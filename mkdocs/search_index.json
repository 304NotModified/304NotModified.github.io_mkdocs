{
    "docs": [
        {
            "location": "/AsyncWrapper-target/",
            "text": "Provides asynchronous, buffered execution of target writes. \n\n\nSupported in .NET, Silverlight, Compact Framework and Mono.\n\n\nConfiguration Syntax\n\n\n<targets>\n  <target xsi:type=\"AsyncWrapper\"\n          name=\"String\"\n          queueLimit=\"Integer\"\n          timeToSleepBetweenBatches=\"Integer\"\n          batchSize=\"Integer\"\n          overflowAction=\"Enum\">\n    <target xsi:type=\"wrappedTargetType\" ...target properties... />\n  </target>\n</targets>\n\n\n\n\nParameters\n\n\nGeneral Options\n\n\n\n\nname\n - Name of the target.\n\n\n\n\nBuffering Options\n\n\n\n\n\n\nqueueLimit\n - Limit on the number of requests in the lazy writer thread request queue. Integer Default: \n10000\n\n\n\n\n\n\ntimeToSleepBetweenBatches\n - Time in milliseconds to sleep between batches. Integer Default: \n50\n. When set to \n0\n, then it will only trigger timer when something is logged (Less timer activity when idle, Faster logging and improved garbage collection behavior).\n\n\n\n\n\n\nbatchSize\n - Number of log events that should be processed in a batch by the lazy writer thread. Integer Default: 100 (NLog 4.4.2 and newer has Default: 200)\n\n\n\n\n\n\nfullBatchSizeWriteLimit\n - Max number of consecutive full \nbatchSize\n writes to perform within the same timer event. Integer Default: 5. Introduced in NLog 4.4.2\n\n\n\n\n\n\noverflowAction\n - Action to be taken when the lazy writer thread request queue count exceeds the set limit. Default: Discard\n\nPossible values:  \n\n\n\n\nBlock - Block until there's more room in the queue.  \n\n\nDiscard - Discard the overflowing item.\n\n\n\n\nGrow - Grow the queue.\n\n\n\n\n\n\noptimizeBufferReuse\n - Instead of allocating new buffers for every \nbatchSize\n write, then it reuse the same buffer. This means that the wrapped target no longer can take ownership of the buffers. All targets in the NLog package supports this mode. It is enabled automatically if the wrapped target has enabled \noptimizeBufferReuse\n. Introduced in NLog 4.4.2\n\n\n\n\n\n\nRemarks\n\n\nAsync attribute\n\n\nAsynchronous target wrapper allows the logger code to execute more quickly, by queuing messages and processing them in a separate thread. You should wrap targets that spend a non-trivial amount of time in their \nWrite()\n method with asynchronous target to speed up logging. Because asynchronous logging is quite a common scenario, NLog supports a shorthand notation for wrapping all targets with AsyncWrapper. Just add \nasync=\"true\"\n to the \n<targets/>\n element in the configuration file.\n\n\nExample:\n\n\n<targets async=\"true\"> \n  ... your targets go here ...\n</targets>\n\n\n\n\nAsyncWrapper and \n<rules>\n\n\nWhen using the \nAsyncWrapper\n, do write to the wrapper in your \n<rules>\n section! In the following example: do write to \n\"target2\". If the \n<logger>\n is writing to \"target1\", the messages are not written asynchronously!\n\n\n   <targets>\n      <target name=\"target2\" xsi:type=\"AsyncWrapper\">\n        <target name =\"target1\" xsi:type=\"File\"\n                    fileName=\"c:/temp/test.log\" layout=\"${message}\"\n                    keepFileOpen=\"true\" />\n      </target>\n    <rules>\n      <logger name=\"*\" minlevel=\"Info\" writeTo=\"target2\"/>\n    </rules>\n  </targets> \n\n\n\n\nAsync attribute and AsyncWrapper\n\n\nDon't combine the Async attribute and AsyncWrapper. This will only slow down processing and will behave unreliably.\n\n\nAsync attribute will discard by default\n\n\nThe async attribute is a shorthand for:\n\n\nxsi:type=\"AsyncWrapper overflowAction=\"Discard\" queueLimit=\"10000\" batchSize=\"100\" timeToSleepBetweenBatches=\"50\"\n\n\n\n\nSo if you write a lot of messages (more then 10000) in a short time, it's possible that messages will be lost. This is intended behavior as keeping all the messages or waiting for all the messages to be written, could have impact on the performance of your program.\n\n\nIf you need all the log messages, do use the AsyncWrapper instead of the async attribute. \n\n\nAsynchronously writing and threads\n\n\nWhen messages are written asynchronously, this is done in another thread. Some targets require to write on the main thread and so if asynchronous writing is used, the message get lost.\n\n\nBufferingWrapper and Async\n\n\nThe \nBufferingWrapper\n can write asynchronously by itself. No need to use the async attribute or AsyncWrapper. See \nremarks at the BufferingWrapper\n.",
            "title": "AsyncWrapper target"
        },
        {
            "location": "/AsyncWrapper-target/#configuration-syntax",
            "text": "<targets>\n  <target xsi:type=\"AsyncWrapper\"\n          name=\"String\"\n          queueLimit=\"Integer\"\n          timeToSleepBetweenBatches=\"Integer\"\n          batchSize=\"Integer\"\n          overflowAction=\"Enum\">\n    <target xsi:type=\"wrappedTargetType\" ...target properties... />\n  </target>\n</targets>",
            "title": "Configuration Syntax"
        },
        {
            "location": "/AsyncWrapper-target/#parameters",
            "text": "",
            "title": "Parameters"
        },
        {
            "location": "/AsyncWrapper-target/#general-options",
            "text": "name  - Name of the target.",
            "title": "General Options"
        },
        {
            "location": "/AsyncWrapper-target/#buffering-options",
            "text": "queueLimit  - Limit on the number of requests in the lazy writer thread request queue. Integer Default:  10000    timeToSleepBetweenBatches  - Time in milliseconds to sleep between batches. Integer Default:  50 . When set to  0 , then it will only trigger timer when something is logged (Less timer activity when idle, Faster logging and improved garbage collection behavior).    batchSize  - Number of log events that should be processed in a batch by the lazy writer thread. Integer Default: 100 (NLog 4.4.2 and newer has Default: 200)    fullBatchSizeWriteLimit  - Max number of consecutive full  batchSize  writes to perform within the same timer event. Integer Default: 5. Introduced in NLog 4.4.2    overflowAction  - Action to be taken when the lazy writer thread request queue count exceeds the set limit. Default: Discard \nPossible values:     Block - Block until there's more room in the queue.    Discard - Discard the overflowing item.   Grow - Grow the queue.    optimizeBufferReuse  - Instead of allocating new buffers for every  batchSize  write, then it reuse the same buffer. This means that the wrapped target no longer can take ownership of the buffers. All targets in the NLog package supports this mode. It is enabled automatically if the wrapped target has enabled  optimizeBufferReuse . Introduced in NLog 4.4.2",
            "title": "Buffering Options"
        },
        {
            "location": "/AsyncWrapper-target/#remarks",
            "text": "",
            "title": "Remarks"
        },
        {
            "location": "/AsyncWrapper-target/#async-attribute",
            "text": "Asynchronous target wrapper allows the logger code to execute more quickly, by queuing messages and processing them in a separate thread. You should wrap targets that spend a non-trivial amount of time in their  Write()  method with asynchronous target to speed up logging. Because asynchronous logging is quite a common scenario, NLog supports a shorthand notation for wrapping all targets with AsyncWrapper. Just add  async=\"true\"  to the  <targets/>  element in the configuration file.  Example:  <targets async=\"true\"> \n  ... your targets go here ...\n</targets>",
            "title": "Async attribute"
        },
        {
            "location": "/AsyncWrapper-target/#asyncwrapper-and-rules",
            "text": "When using the  AsyncWrapper , do write to the wrapper in your  <rules>  section! In the following example: do write to \n\"target2\". If the  <logger>  is writing to \"target1\", the messages are not written asynchronously!     <targets>\n      <target name=\"target2\" xsi:type=\"AsyncWrapper\">\n        <target name =\"target1\" xsi:type=\"File\"\n                    fileName=\"c:/temp/test.log\" layout=\"${message}\"\n                    keepFileOpen=\"true\" />\n      </target>\n    <rules>\n      <logger name=\"*\" minlevel=\"Info\" writeTo=\"target2\"/>\n    </rules>\n  </targets>",
            "title": "AsyncWrapper and &lt;rules&gt;"
        },
        {
            "location": "/AsyncWrapper-target/#async-attribute-and-asyncwrapper",
            "text": "Don't combine the Async attribute and AsyncWrapper. This will only slow down processing and will behave unreliably.",
            "title": "Async attribute and AsyncWrapper"
        },
        {
            "location": "/AsyncWrapper-target/#async-attribute-will-discard-by-default",
            "text": "The async attribute is a shorthand for:  xsi:type=\"AsyncWrapper overflowAction=\"Discard\" queueLimit=\"10000\" batchSize=\"100\" timeToSleepBetweenBatches=\"50\"  So if you write a lot of messages (more then 10000) in a short time, it's possible that messages will be lost. This is intended behavior as keeping all the messages or waiting for all the messages to be written, could have impact on the performance of your program.  If you need all the log messages, do use the AsyncWrapper instead of the async attribute.",
            "title": "Async attribute will discard by default"
        },
        {
            "location": "/AsyncWrapper-target/#asynchronously-writing-and-threads",
            "text": "When messages are written asynchronously, this is done in another thread. Some targets require to write on the main thread and so if asynchronous writing is used, the message get lost.",
            "title": "Asynchronously writing and threads"
        },
        {
            "location": "/AsyncWrapper-target/#bufferingwrapper-and-async",
            "text": "The  BufferingWrapper  can write asynchronously by itself. No need to use the async attribute or AsyncWrapper. See  remarks at the BufferingWrapper .",
            "title": "BufferingWrapper and Async"
        },
        {
            "location": "/AutoFlushWrapper-target/",
            "text": "Causes a flush on a wrapped target if LogEvent satisfies provided condition.\n\nIf condition isn't set, a flush will occur after each successful write.\n\n\nSupported in .NET, Silverlight, Compact Framework and Mono.\n\n\nConfiguration Syntax\n\n\n<targets>\n  <target xsi:type=\"AutoFlushWrapper\" name=\"String\" condition=\"Condition\">\n    <target xsi:type=\"wrappedTargetType\" ...target properties... />\n  </target>\n</targets>\n\n\n\n\nParameters\n\n\nGeneral Options\n\n\n\n\nname\n - Name of the target.  \n\n\ncondition\n - \nCondition\n is expression used to determine if flush must be executed. (\nintroduced in NLog 4.4\n)\n\n\nasyncFlush\n - Delay the flush until the LogEvent has been confirmed as written. Default \ntrue\n. (\nintroduced in NLog 4.4.6\n)\n\n\n\n\nExamples\n\n\nFlush into target on each write\n\n\n<?xml version=\"1.0\" ?>\n<nlog xmlns=\"http://www.nlog-project.org/schemas/NLog.xsd\"\n      xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n    <targets>\n        <target name=\"file\" xsi:type=\"AutoFlushWrapper\">\n            <target xsi:type=\"File\" fileName=\"${basedir}/file.txt\" />\n        </target>\n    </targets>\n    <rules>\n        <logger name=\"*\" minlevel=\"Debug\" writeTo=\"file\" />\n    </rules>\n</nlog>\n\n\n\n\nFlush into target, if LogEvent level >= Warn (\nintroduced in NLog 4.4\n)\n\n\n<?xml version=\"1.0\" ?>\n<nlog xmlns=\"http://www.nlog-project.org/schemas/NLog.xsd\"\n      xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n    <targets>\n        <target name=\"file\" xsi:type=\"AutoFlushWrapper\" condition=\"level >= LogLevel.Warn\">\n            <target xsi:type=\"File\" fileName=\"${basedir}/file.txt\" />\n        </target>\n    </targets>\n    <rules>\n        <logger name=\"*\" minlevel=\"Debug\" writeTo=\"file\" />\n    </rules>\n</nlog>",
            "title": "AutoFlushWrapper target"
        },
        {
            "location": "/AutoFlushWrapper-target/#configuration-syntax",
            "text": "<targets>\n  <target xsi:type=\"AutoFlushWrapper\" name=\"String\" condition=\"Condition\">\n    <target xsi:type=\"wrappedTargetType\" ...target properties... />\n  </target>\n</targets>",
            "title": "Configuration Syntax"
        },
        {
            "location": "/AutoFlushWrapper-target/#parameters",
            "text": "",
            "title": "Parameters"
        },
        {
            "location": "/AutoFlushWrapper-target/#general-options",
            "text": "name  - Name of the target.    condition  -  Condition  is expression used to determine if flush must be executed. ( introduced in NLog 4.4 )  asyncFlush  - Delay the flush until the LogEvent has been confirmed as written. Default  true . ( introduced in NLog 4.4.6 )",
            "title": "General Options"
        },
        {
            "location": "/AutoFlushWrapper-target/#examples",
            "text": "Flush into target on each write  <?xml version=\"1.0\" ?>\n<nlog xmlns=\"http://www.nlog-project.org/schemas/NLog.xsd\"\n      xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n    <targets>\n        <target name=\"file\" xsi:type=\"AutoFlushWrapper\">\n            <target xsi:type=\"File\" fileName=\"${basedir}/file.txt\" />\n        </target>\n    </targets>\n    <rules>\n        <logger name=\"*\" minlevel=\"Debug\" writeTo=\"file\" />\n    </rules>\n</nlog>  Flush into target, if LogEvent level >= Warn ( introduced in NLog 4.4 )  <?xml version=\"1.0\" ?>\n<nlog xmlns=\"http://www.nlog-project.org/schemas/NLog.xsd\"\n      xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n    <targets>\n        <target name=\"file\" xsi:type=\"AutoFlushWrapper\" condition=\"level >= LogLevel.Warn\">\n            <target xsi:type=\"File\" fileName=\"${basedir}/file.txt\" />\n        </target>\n    </targets>\n    <rules>\n        <logger name=\"*\" minlevel=\"Debug\" writeTo=\"file\" />\n    </rules>\n</nlog>",
            "title": "Examples"
        },
        {
            "location": "/BufferingWrapper-target/",
            "text": "A target that buffers log events and sends them in batches to the wrapped target. \n\n\nSupported in .NET, Silverlight, Compact Framework and Mono.\n\n\nConfiguration Syntax\n\n\n<targets>\n  <target xsi:type=\"BufferingWrapper\"\n          name=\"String\"\n          bufferSize=\"Integer\"\n          flushTimeout=\"Integer\"\n          slidingTimeout=\"Boolean\">\n    <target xsi:type=\"wrappedTargetType\" ...target properties... />\n  </target>\n</targets>\n\n\n\n\nParameters\n\n\nGeneral Options\n\n\n\n\nname\n - Name of the target.\n\n\n\n\nBuffering Options\n\n\n\n\n\n\nbufferSize\n - Number of log events to be buffered. When the limit is reached, then a synchronous flush is performed. \nInteger\n Default: \n100\n\n\n\n\n\n\nflushTimeout\n - Timeout (in milliseconds) after a write, until the entire buffer is asynchronously flushed. Use \n-1\n to disable timed flushes. \nInteger\n Default: \n-1\n\n\n\n\n\n\nslidingTimeout\n - Indicates whether to use sliding \nflushTimeout\n. \nBoolean\n Default: \nTrue\n\nThis value determines how the inactivity period is determined. If sliding timeout is enabled, the inactivity timer is reset after each write, if it is disabled - inactivity timer will count from the first event written to the buffer.\n\n\n\n\n\n\nRemarks\n\n\nBuffer and asynchronously writing\n\n\nIf \nflushTimeout\n is larger than \n0\n, then the messages are written asynchronously. There is then no need to use this target in combination with the \nasync\n attribute or the \nAsyncWrapper\n.\n\n\nWhen messages are written asynchronously, this is done in another thread. This means context information like thread-user-identity is different.\n\n\nIf the buffer is filled before the \nflushTimeout\n fires and triggers the asynchronous flush, then the logging thread will be performing the flush, and be blocked by the operation.",
            "title": "BufferingWrapper target"
        },
        {
            "location": "/BufferingWrapper-target/#configuration-syntax",
            "text": "<targets>\n  <target xsi:type=\"BufferingWrapper\"\n          name=\"String\"\n          bufferSize=\"Integer\"\n          flushTimeout=\"Integer\"\n          slidingTimeout=\"Boolean\">\n    <target xsi:type=\"wrappedTargetType\" ...target properties... />\n  </target>\n</targets>",
            "title": "Configuration Syntax"
        },
        {
            "location": "/BufferingWrapper-target/#parameters",
            "text": "",
            "title": "Parameters"
        },
        {
            "location": "/BufferingWrapper-target/#general-options",
            "text": "name  - Name of the target.",
            "title": "General Options"
        },
        {
            "location": "/BufferingWrapper-target/#buffering-options",
            "text": "bufferSize  - Number of log events to be buffered. When the limit is reached, then a synchronous flush is performed.  Integer  Default:  100    flushTimeout  - Timeout (in milliseconds) after a write, until the entire buffer is asynchronously flushed. Use  -1  to disable timed flushes.  Integer  Default:  -1    slidingTimeout  - Indicates whether to use sliding  flushTimeout .  Boolean  Default:  True \nThis value determines how the inactivity period is determined. If sliding timeout is enabled, the inactivity timer is reset after each write, if it is disabled - inactivity timer will count from the first event written to the buffer.",
            "title": "Buffering Options"
        },
        {
            "location": "/BufferingWrapper-target/#remarks",
            "text": "",
            "title": "Remarks"
        },
        {
            "location": "/BufferingWrapper-target/#buffer-and-asynchronously-writing",
            "text": "If  flushTimeout  is larger than  0 , then the messages are written asynchronously. There is then no need to use this target in combination with the  async  attribute or the  AsyncWrapper .  When messages are written asynchronously, this is done in another thread. This means context information like thread-user-identity is different.  If the buffer is filled before the  flushTimeout  fires and triggers the asynchronous flush, then the logging thread will be performing the flush, and be blocked by the operation.",
            "title": "Buffer and asynchronously writing"
        },
        {
            "location": "/Chainsaw-target/",
            "text": "Sends log messages to the remote instance of Chainsaw application from log4j. \n\n\nSupported in .NET, Silverlight, Compact Framework and Mono\n\n\nConfiguration Syntax\n\n\n<targets>\n  <target xsi:type=\"Chainsaw\"\n          name=\"String\"\n          newLine=\"Boolean\"\n          layout=\"Layout\"\n          onOverflow=\"Enum\"\n          maxMessageSize=\"Integer\"\n          encoding=\"Encoding\"\n          connectionCacheSize=\"Integer\"\n          address=\"Layout\"\n          keepConnection=\"Boolean\"\n          includeSourceInfo=\"Boolean\"\n          includeCallSite=\"Boolean\"\n          appInfo=\"String\"\n          ndcItemSeparator=\"String\"\n          includeNdc=\"Boolean\"\n          includeNLogData=\"Boolean\"\n          includeMdc=\"Boolean\">\n    <parameter layout=\"Layout\" name=\"String\"/><!-- repeated -->\n  </target>\n</targets>\n\n\n\n\nRead more about using the [[Configuration File]].\n\n\nParameters\n\n\nGeneral Options\n\n\n\n\nname\n - Name of the target.\n\n\n\n\nLayout Options\n\n\n\n\n\n\nnewLine\n - Indicates whether to append newline at the end of log message. \nBoolean\n Default: False\n\n\n\n\n\n\nlayout\n - Instance of Log4JXmlEventLayout that is used to format log messages. \nLayout\n Default: ${longdate}|${level:uppercase=true}|${logger}|${message}\n\n\n\n\n\n\nonOverflow\n - Action that should be taken if the message is larger than maxMessageSize.\n\nPossible values:\n\n\n\n\nDiscard - Discard the entire message.\n\n\nError - Report an error.\n\n\n\n\nSplit - Split the message into smaller pieces.\n\n\n\n\n\n\n*\nmaxMessageSize\n - Maximum message size in bytes. \nInteger\n Default: 65000\nencoding - Encoding to be used. \nEncoding\n Default: utf-8\n\n\n\n\n\n\nConnection Options\n\n\n\n\n\n\nconnectionCacheSize\n - Size of the connection cache (number of connections which are kept alive). \nInteger\n Default: 5\n\n\n\n\nThis parameter is not supported in:\n\n NLog v1.0 for .NET Compact Framework 1.0\n\n NLog v1.0 for .NET Compact Framework 2.0\n\n NLog v1.0 for .NET Framework 1.0\n\n NLog v1.0 for .NET Framework 1.1\n* NLog v1.0 for .NET Framework 2.0\n\n\n\n\n\n\n\n\naddress\n - Network address. \nLayout\n\nThe network address can be:\n\n\n\n\ntcp://host:port - TCP (auto select IPv4/IPv6) (not supported on Windows Phone 7.0)\n\n\ntcp4://host:port - force TCP/IPv4 (not supported on Windows Phone 7.0)\n\n\ntcp6://host:port - force TCP/IPv6 (not supported on Windows Phone 7.0)\n\n\nudp://host:port - UDP (auto select IPv4/IPv6, not supported on Silverlight and on Windows Phone 7.0)\n\n\nudp4://host:port - force UDP/IPv4 (not supported on Silverlight and on Windows Phone 7.0)\n\n\nudp6://host:port - force UDP/IPv6 (not supported on Silverlight and on Windows Phone 7.0)\n\n\nhttp://host:port/pageName - HTTP using POST verb\n\n\n\n\nhttps://host:port/pageName - HTTPS using POST verb\nFor SOAP-based webservice support over HTTP use WebService target.\n\n\n\n\n\n\nkeepConnection\n - Indicates whether to keep connection open whenever possible. \nBoolean\n Default: True\n\n\n\n\n\n\nPayload Options\n\n\n\n\n\n\nincludeSourceInfo\n - Indicates whether to include source info (file name and line number) in the information sent over the network. \nBoolean\n  \n\n\n\n\nThis parameter is not supported in:\n\n NLog v1.0 for .NET Compact Framework 1.0\n\n NLog v1.0 for .NET Compact Framework 2.0\n\n NLog v2.0 for .NET Compact Framework 2.0\n\n NLog v2.0 for .NET Compact Framework 3.5\n\n NLog v2.0 for Silverlight 2.0\n\n NLog v2.0 for Silverlight 3.0\n\n NLog v2.0 for Silverlight 4.0\n\n NLog v2.0 for Silverlight for Windows Phone 7\n* NLog v2.0 for Silverlight for Windows Phone 7.1\n\n\n\n\n\n\n\n\nincludeCallSite\n - Indicates whether to include call site (class and method name) in the information sent over the network. \nBoolean\n  \n\n\n\n\nThis parameter is not supported in:\n\n NLog v1.0 for .NET Compact Framework 1.0\n\n NLog v1.0 for .NET Compact Framework 2.0\n\n NLog v2.0 for .NET Compact Framework 2.0\n\n NLog v2.0 for .NET Compact Framework 3.5\n\n\n\n\n\n\n\n\nappInfo\n - AppInfo field. By default it's the friendly name of the current AppDomain.\n\n\n\n\n\n\nndcItemSeparator\n - NDC item separator.\n\n\n\n\nThis parameter is not supported in:\n\n NLog v1.0 for .NET Compact Framework 1.0\n\n NLog v1.0 for .NET Compact Framework 2.0\n\n NLog v1.0 for .NET Framework 1.0\n\n NLog v1.0 for .NET Framework 1.1\n* NLog v1.0 for .NET Framework 2.0\n\n\n\n\n\n\n\n\nincludeNdc\n - Indicates whether to include NestedDiagnosticsContext stack contents. \nBoolean\n\n\n\n\n\n\nincludeMdc\n - Indicates whether to include MappedDiagnosticsContext dictionary contents. \nBoolean\n\n\n\n\n\n\nincludeNLogData\n - Indicates whether to include NLog-specific extensions to log4j schema. \nBoolean\n\n\n\n\n\n\nparameters\n - The collection of parameters. Each parameter contains a mapping between NLog layout and a named parameter. \nCollection\n\nEach collection item is represented by \n element with the following attributes:\n\n\n\n\nlayout\n - Layout that should be use to calcuate the value for the parameter. \nLayout\n Required.\n\n\nname\n - Viewer parameter name. Required.",
            "title": "Chainsaw target"
        },
        {
            "location": "/Chainsaw-target/#configuration-syntax",
            "text": "<targets>\n  <target xsi:type=\"Chainsaw\"\n          name=\"String\"\n          newLine=\"Boolean\"\n          layout=\"Layout\"\n          onOverflow=\"Enum\"\n          maxMessageSize=\"Integer\"\n          encoding=\"Encoding\"\n          connectionCacheSize=\"Integer\"\n          address=\"Layout\"\n          keepConnection=\"Boolean\"\n          includeSourceInfo=\"Boolean\"\n          includeCallSite=\"Boolean\"\n          appInfo=\"String\"\n          ndcItemSeparator=\"String\"\n          includeNdc=\"Boolean\"\n          includeNLogData=\"Boolean\"\n          includeMdc=\"Boolean\">\n    <parameter layout=\"Layout\" name=\"String\"/><!-- repeated -->\n  </target>\n</targets>  Read more about using the [[Configuration File]].",
            "title": "Configuration Syntax"
        },
        {
            "location": "/Chainsaw-target/#parameters",
            "text": "",
            "title": "Parameters"
        },
        {
            "location": "/Chainsaw-target/#general-options",
            "text": "name  - Name of the target.",
            "title": "General Options"
        },
        {
            "location": "/Chainsaw-target/#layout-options",
            "text": "newLine  - Indicates whether to append newline at the end of log message.  Boolean  Default: False    layout  - Instance of Log4JXmlEventLayout that is used to format log messages.  Layout  Default: ${longdate}|${level:uppercase=true}|${logger}|${message}    onOverflow  - Action that should be taken if the message is larger than maxMessageSize. \nPossible values:   Discard - Discard the entire message.  Error - Report an error.   Split - Split the message into smaller pieces.    * maxMessageSize  - Maximum message size in bytes.  Integer  Default: 65000\nencoding - Encoding to be used.  Encoding  Default: utf-8",
            "title": "Layout Options"
        },
        {
            "location": "/Chainsaw-target/#connection-options",
            "text": "connectionCacheSize  - Size of the connection cache (number of connections which are kept alive).  Integer  Default: 5   This parameter is not supported in:  NLog v1.0 for .NET Compact Framework 1.0  NLog v1.0 for .NET Compact Framework 2.0  NLog v1.0 for .NET Framework 1.0  NLog v1.0 for .NET Framework 1.1\n* NLog v1.0 for .NET Framework 2.0     address  - Network address.  Layout \nThe network address can be:   tcp://host:port - TCP (auto select IPv4/IPv6) (not supported on Windows Phone 7.0)  tcp4://host:port - force TCP/IPv4 (not supported on Windows Phone 7.0)  tcp6://host:port - force TCP/IPv6 (not supported on Windows Phone 7.0)  udp://host:port - UDP (auto select IPv4/IPv6, not supported on Silverlight and on Windows Phone 7.0)  udp4://host:port - force UDP/IPv4 (not supported on Silverlight and on Windows Phone 7.0)  udp6://host:port - force UDP/IPv6 (not supported on Silverlight and on Windows Phone 7.0)  http://host:port/pageName - HTTP using POST verb   https://host:port/pageName - HTTPS using POST verb\nFor SOAP-based webservice support over HTTP use WebService target.    keepConnection  - Indicates whether to keep connection open whenever possible.  Boolean  Default: True",
            "title": "Connection Options"
        },
        {
            "location": "/Chainsaw-target/#payload-options",
            "text": "includeSourceInfo  - Indicates whether to include source info (file name and line number) in the information sent over the network.  Boolean      This parameter is not supported in:  NLog v1.0 for .NET Compact Framework 1.0  NLog v1.0 for .NET Compact Framework 2.0  NLog v2.0 for .NET Compact Framework 2.0  NLog v2.0 for .NET Compact Framework 3.5  NLog v2.0 for Silverlight 2.0  NLog v2.0 for Silverlight 3.0  NLog v2.0 for Silverlight 4.0  NLog v2.0 for Silverlight for Windows Phone 7\n* NLog v2.0 for Silverlight for Windows Phone 7.1     includeCallSite  - Indicates whether to include call site (class and method name) in the information sent over the network.  Boolean      This parameter is not supported in:  NLog v1.0 for .NET Compact Framework 1.0  NLog v1.0 for .NET Compact Framework 2.0  NLog v2.0 for .NET Compact Framework 2.0  NLog v2.0 for .NET Compact Framework 3.5     appInfo  - AppInfo field. By default it's the friendly name of the current AppDomain.    ndcItemSeparator  - NDC item separator.   This parameter is not supported in:  NLog v1.0 for .NET Compact Framework 1.0  NLog v1.0 for .NET Compact Framework 2.0  NLog v1.0 for .NET Framework 1.0  NLog v1.0 for .NET Framework 1.1\n* NLog v1.0 for .NET Framework 2.0     includeNdc  - Indicates whether to include NestedDiagnosticsContext stack contents.  Boolean    includeMdc  - Indicates whether to include MappedDiagnosticsContext dictionary contents.  Boolean    includeNLogData  - Indicates whether to include NLog-specific extensions to log4j schema.  Boolean    parameters  - The collection of parameters. Each parameter contains a mapping between NLog layout and a named parameter.  Collection \nEach collection item is represented by   element with the following attributes:   layout  - Layout that should be use to calcuate the value for the parameter.  Layout  Required.  name  - Viewer parameter name. Required.",
            "title": "Payload Options"
        },
        {
            "location": "/ColoredConsole-target/",
            "text": "Writes log messages to the console with customizable coloring. \n\n\nSupported in .NET and Mono\n\n\nConfiguration Syntax\n\n\n<targets>\n  <target xsi:type=\"ColoredConsole\"\n          name=\"String\"\n          encoding=\"Encoding\"\n          layout=\"Layout\"\n          header=\"Layout\"\n          footer=\"Layout\"\n          useDefaultRowHighlightingRules=\"Boolean\"\n          errorStream=\"Boolean\"\n          detectConsoleAvailable=\"Boolean\">\n    <highlight-row backgroundColor=\"Enum\" condition=\"Condition\" foregroundColor=\"Enum\"/><!-- repeated -->\n    <highlight-word backgroundColor=\"Enum\" foregroundColor=\"Enum\" ignoreCase=\"Boolean\"\n                    regex=\"String\" text=\"String\" wholeWords=\"Boolean\" compileRegex=\"Boolean\"/><!-- repeated -->\n  </target>\n</targets>\n\n\n\n\nRead more about using the [[Configuration File]].\n\n\nParameters\n\n\nGeneral Options\n\n\n\n\n\n\nname\n - Name of the target.\n\n\n\n\n\n\nencoding\n - File encoding name like \"utf-8\", \"ascii\" or \"utf-16\". See \nEncoding class on MSDN\n. Defaults to \nEncoding.Default\n (\nUTF-8\n on silverlight). Starting for NLog 4.0.\n\n\n\n\n\n\nLayout Options\n\n\n\n\nlayout\n - Text to be rendered. \nLayout\n Required. Default: \n${longdate}|${level:uppercase=true}|${logger}|${message}\n\n\nheader\n - Header. \nLayout\n  \n\n\nfooter\n - Footer. \nLayout\n\n\n\n\nHighlighting Rules\n\n\n\n\n\n\nuseDefaultRowHighlightingRules\n - Indicates whether to use default row highlighting rules. \nBoolean\n Default: True\nThe default rules are:\n\n\n\n\n\nCondition\nForeground Color\nBackground Color\n\n\n\n\n\n\nlevel == LogLevel.Fatal\nRed\nNoChange\n\n\nlevel == LogLevel.Error\nYellow\nNoChange\n\n\nlevel == LogLevel.Warn\nMagenta\nNoChange\n\n\nlevel == LogLevel.Info\nWhite\nNoChange\n\n\nlevel == LogLevel.Debug\nGray\nNoChange\n\n\nlevel == LogLevel.Trace\nDarkGray\nNoChange\n\n\n\n\n\n\n\n\n\n\nrowHighlightingRules\n - The row highlighting rules. \nCollection\n\nEach collection item is represented by \\\n element with the following attributes:\n\n\n\n\n\n\nbackgroundColor\n - Background color. Default: NoChange\n\nPossible values:\n\n\n\n\nBlack - Black Color (#000000).\n\n\nBlue - Blue Color (#0000FF).\n\n\nCyan - Cyan Color (#00FFFF).\n\n\nDarkBlue - Dark blue Color (#000080).\n\n\nDarkCyan - Dark Cyan Color (#008080).\n\n\nDarkGray - Dark Gray Color (#808080).\n\n\nDarkGreen - Dark green Color (#008000).\n\n\nDarkMagenta - Dark Magenta Color (#800080).\n\n\nDarkRed - Dark Red Color (#800000).\n\n\nDarkYellow - Dark Yellow Color (#808000).\n\n\nGray - Gray Color (#C0C0C0).\n\n\nGreen - Green Color (#00FF00).\n\n\nMagenta - Magenta Color (#FF00FF).\n\n\nNoChange - Don't change the color.\n\n\nRed - Red Color (#FF0000).\n\n\nWhite - White Color (#FFFFFF).\n\n\nYellow - Yellow Color (#FFFF00).\n\n\n\n\n\n\n\n\ncondition\n - Condition that must be met in order to set the specified foreground and background color. \nCondition\n Required.  \n\n\n\n\n\n\nforegroundColor\n - Foreground color. Default: NoChange\n\nPossible values:\n\n\n\n\nBlack - Black Color (#000000).\n\n\nBlue - Blue Color (#0000FF).\n\n\nCyan - Cyan Color (#00FFFF).\n\n\nDarkBlue - Dark blue Color (#000080).\n\n\nDarkCyan - Dark Cyan Color (#008080).\n\n\nDarkGray - Dark Gray Color (#808080).\n\n\nDarkGreen - Dark green Color (#008000).\n\n\nDarkMagenta - Dark Magenta Color (#800080).\n\n\nDarkRed - Dark Red Color (#800000).\n\n\nDarkYellow - Dark Yellow Color (#808000).\n\n\nGray - Gray Color (#C0C0C0).\n\n\nGreen - Green Color (#00FF00).\n\n\nMagenta - Magenta Color (#FF00FF).\n\n\nNoChange - Don't change the color.\n\n\nRed - Red Color (#FF0000).\n\n\nWhite - White Color (#FFFFFF).\n\n\nYellow - Yellow Color (#FFFF00).\n\n\n\n\n\n\n\n\nwordHighlightingRules\n - The word highlighting rules. \nCollection\n\nEach collection item is represented by \\\n element with the following attributes:\n\n\n\n\n\n\nbackgroundColor\n - Background color. Default: NoChange\n\n  Possible values:\n\n\n\n\nBlack - Black Color (#000000).\n\n\nBlue - Blue Color (#0000FF).\n\n\nCyan - Cyan Color (#00FFFF).\n\n\nDarkBlue - Dark blue Color (#000080).\n\n\nDarkCyan - Dark Cyan Color (#008080).\n\n\nDarkGray - Dark Gray Color (#808080).\n\n\nDarkGreen - Dark green Color (#008000).\n\n\nDarkMagenta - Dark Magenta Color (#800080).\n\n\nDarkRed - Dark Red Color (#800000).\n\n\nDarkYellow - Dark Yellow Color (#808000).\n\n\nGray - Gray Color (#C0C0C0).\n\n\nGreen - Green Color (#00FF00).\n\n\nMagenta - Magenta Color (#FF00FF).\n\n\nNoChange - Don't change the color.\n\n\nRed - Red Color (#FF0000).\n\n\nWhite - White Color (#FFFFFF).\n\n\nYellow - Yellow Color (#FFFF00).\n\n\n\n\n\n\n\n\nforegroundColor\n - Foreground color. Default: NoChange\n\n  Possible values:\n\n\n\n\nBlack - Black Color (#000000).\n\n\nBlue - Blue Color (#0000FF).\n\n\nCyan - Cyan Color (#00FFFF).\n\n\nDarkBlue - Dark blue Color (#000080).\n\n\nDarkCyan - Dark Cyan Color (#008080).\n\n\nDarkGray - Dark Gray Color (#808080).\n\n\nDarkGreen - Dark green Color (#008000).\n\n\nDarkMagenta - Dark Magenta Color (#800080).\n\n\nDarkRed - Dark Red Color (#800000).\n\n\nDarkYellow - Dark Yellow Color (#808000).\n\n\nGray - Gray Color (#C0C0C0).\n\n\nGreen - Green Color (#00FF00).\n\n\nMagenta - Magenta Color (#FF00FF).\n\n\nNoChange - Don't change the color.\n\n\nRed - Red Color (#FF0000).\n\n\nWhite - White Color (#FFFFFF).\n\n\nYellow - Yellow Color (#FFFF00).\n\n\n\n\n\n\n\n\nignoreCase\n - Indicates whether to ignore case when comparing texts. \nBoolean\n  Default: \nfalse\n \n\n\n\n\nregex\n - Regular expression to be matched. You must specify either text or regex.  \n\n\ntext\n - Text to be matched. You must specify either text or regex.  \n\n\nwholeWords\n - Indicates whether to match whole words only. \nBoolean\n Default: \nfalse\n  \n\n\ncompileRegex\n - Introduced in NLog 4.3. Compiles the Regex. If \nfalse\n, the regex cache is used. Setting this to \ntrue\n can improve performance, but costs memory. Default: \nfalse\n \n\n\n\n\nOutput Options\n\n\n\n\n\n\nerrorStream\n - Indicates whether the error stream (stderr) should be used instead of the output stream (stdout). \nBoolean\n Default: False\n\n\n\n\n\n\ndetectConsoleAvailable\n - Indicates whether the console target should disable itself when no console detected. Boolean Default: \nfalse\n (introduced in 4.3.10 with default: \ntrue\n. Since NLog 4.4 default \nfalse\n)\n\n\n\n\n\n\nProgrammatic example\n\n\nvar consoleTarget = new ColoredConsoleTarget();\n\nvar highlightRule = new ConsoleRowHighlightingRule();\nhighlightRule.Condition = ConditionParser.ParseExpression(\"level == LogLevel.Info\");\nhighlightRule.ForegroundColor = ConsoleOutputColor.Green;\nconsoleTarget.RowHighlightingRules.Add(highlightRule);",
            "title": "ColoredConsole target"
        },
        {
            "location": "/ColoredConsole-target/#configuration-syntax",
            "text": "<targets>\n  <target xsi:type=\"ColoredConsole\"\n          name=\"String\"\n          encoding=\"Encoding\"\n          layout=\"Layout\"\n          header=\"Layout\"\n          footer=\"Layout\"\n          useDefaultRowHighlightingRules=\"Boolean\"\n          errorStream=\"Boolean\"\n          detectConsoleAvailable=\"Boolean\">\n    <highlight-row backgroundColor=\"Enum\" condition=\"Condition\" foregroundColor=\"Enum\"/><!-- repeated -->\n    <highlight-word backgroundColor=\"Enum\" foregroundColor=\"Enum\" ignoreCase=\"Boolean\"\n                    regex=\"String\" text=\"String\" wholeWords=\"Boolean\" compileRegex=\"Boolean\"/><!-- repeated -->\n  </target>\n</targets>  Read more about using the [[Configuration File]].",
            "title": "Configuration Syntax"
        },
        {
            "location": "/ColoredConsole-target/#parameters",
            "text": "",
            "title": "Parameters"
        },
        {
            "location": "/ColoredConsole-target/#general-options",
            "text": "name  - Name of the target.    encoding  - File encoding name like \"utf-8\", \"ascii\" or \"utf-16\". See  Encoding class on MSDN . Defaults to  Encoding.Default  ( UTF-8  on silverlight). Starting for NLog 4.0.",
            "title": "General Options"
        },
        {
            "location": "/ColoredConsole-target/#layout-options",
            "text": "layout  - Text to be rendered.  Layout  Required. Default:  ${longdate}|${level:uppercase=true}|${logger}|${message}  header  - Header.  Layout     footer  - Footer.  Layout",
            "title": "Layout Options"
        },
        {
            "location": "/ColoredConsole-target/#highlighting-rules",
            "text": "useDefaultRowHighlightingRules  - Indicates whether to use default row highlighting rules.  Boolean  Default: True\nThe default rules are:   Condition Foreground Color Background Color    level == LogLevel.Fatal Red NoChange  level == LogLevel.Error Yellow NoChange  level == LogLevel.Warn Magenta NoChange  level == LogLevel.Info White NoChange  level == LogLevel.Debug Gray NoChange  level == LogLevel.Trace DarkGray NoChange      rowHighlightingRules  - The row highlighting rules.  Collection \nEach collection item is represented by \\  element with the following attributes:    backgroundColor  - Background color. Default: NoChange \nPossible values:   Black - Black Color (#000000).  Blue - Blue Color (#0000FF).  Cyan - Cyan Color (#00FFFF).  DarkBlue - Dark blue Color (#000080).  DarkCyan - Dark Cyan Color (#008080).  DarkGray - Dark Gray Color (#808080).  DarkGreen - Dark green Color (#008000).  DarkMagenta - Dark Magenta Color (#800080).  DarkRed - Dark Red Color (#800000).  DarkYellow - Dark Yellow Color (#808000).  Gray - Gray Color (#C0C0C0).  Green - Green Color (#00FF00).  Magenta - Magenta Color (#FF00FF).  NoChange - Don't change the color.  Red - Red Color (#FF0000).  White - White Color (#FFFFFF).  Yellow - Yellow Color (#FFFF00).     condition  - Condition that must be met in order to set the specified foreground and background color.  Condition  Required.      foregroundColor  - Foreground color. Default: NoChange \nPossible values:   Black - Black Color (#000000).  Blue - Blue Color (#0000FF).  Cyan - Cyan Color (#00FFFF).  DarkBlue - Dark blue Color (#000080).  DarkCyan - Dark Cyan Color (#008080).  DarkGray - Dark Gray Color (#808080).  DarkGreen - Dark green Color (#008000).  DarkMagenta - Dark Magenta Color (#800080).  DarkRed - Dark Red Color (#800000).  DarkYellow - Dark Yellow Color (#808000).  Gray - Gray Color (#C0C0C0).  Green - Green Color (#00FF00).  Magenta - Magenta Color (#FF00FF).  NoChange - Don't change the color.  Red - Red Color (#FF0000).  White - White Color (#FFFFFF).  Yellow - Yellow Color (#FFFF00).     wordHighlightingRules  - The word highlighting rules.  Collection \nEach collection item is represented by \\  element with the following attributes:    backgroundColor  - Background color. Default: NoChange \n  Possible values:   Black - Black Color (#000000).  Blue - Blue Color (#0000FF).  Cyan - Cyan Color (#00FFFF).  DarkBlue - Dark blue Color (#000080).  DarkCyan - Dark Cyan Color (#008080).  DarkGray - Dark Gray Color (#808080).  DarkGreen - Dark green Color (#008000).  DarkMagenta - Dark Magenta Color (#800080).  DarkRed - Dark Red Color (#800000).  DarkYellow - Dark Yellow Color (#808000).  Gray - Gray Color (#C0C0C0).  Green - Green Color (#00FF00).  Magenta - Magenta Color (#FF00FF).  NoChange - Don't change the color.  Red - Red Color (#FF0000).  White - White Color (#FFFFFF).  Yellow - Yellow Color (#FFFF00).     foregroundColor  - Foreground color. Default: NoChange \n  Possible values:   Black - Black Color (#000000).  Blue - Blue Color (#0000FF).  Cyan - Cyan Color (#00FFFF).  DarkBlue - Dark blue Color (#000080).  DarkCyan - Dark Cyan Color (#008080).  DarkGray - Dark Gray Color (#808080).  DarkGreen - Dark green Color (#008000).  DarkMagenta - Dark Magenta Color (#800080).  DarkRed - Dark Red Color (#800000).  DarkYellow - Dark Yellow Color (#808000).  Gray - Gray Color (#C0C0C0).  Green - Green Color (#00FF00).  Magenta - Magenta Color (#FF00FF).  NoChange - Don't change the color.  Red - Red Color (#FF0000).  White - White Color (#FFFFFF).  Yellow - Yellow Color (#FFFF00).     ignoreCase  - Indicates whether to ignore case when comparing texts.  Boolean   Default:  false     regex  - Regular expression to be matched. You must specify either text or regex.    text  - Text to be matched. You must specify either text or regex.    wholeWords  - Indicates whether to match whole words only.  Boolean  Default:  false     compileRegex  - Introduced in NLog 4.3. Compiles the Regex. If  false , the regex cache is used. Setting this to  true  can improve performance, but costs memory. Default:  false",
            "title": "Highlighting Rules"
        },
        {
            "location": "/ColoredConsole-target/#output-options",
            "text": "errorStream  - Indicates whether the error stream (stderr) should be used instead of the output stream (stdout).  Boolean  Default: False    detectConsoleAvailable  - Indicates whether the console target should disable itself when no console detected. Boolean Default:  false  (introduced in 4.3.10 with default:  true . Since NLog 4.4 default  false )",
            "title": "Output Options"
        },
        {
            "location": "/ColoredConsole-target/#programmatic-example",
            "text": "var consoleTarget = new ColoredConsoleTarget();\n\nvar highlightRule = new ConsoleRowHighlightingRule();\nhighlightRule.Condition = ConditionParser.ParseExpression(\"level == LogLevel.Info\");\nhighlightRule.ForegroundColor = ConsoleOutputColor.Green;\nconsoleTarget.RowHighlightingRules.Add(highlightRule);",
            "title": "Programmatic example"
        },
        {
            "location": "/Console-target/",
            "text": "Writes log messages to the console. \n\n\nSupported in .NET, Silverlight, Compact Framework and Mono\n\n\nConfiguration Syntax\n\n\n<targets>\n  <target xsi:type=\"Console\"\n          name=\"String\"\n          layout=\"Layout\"\n          footer=\"Layout\"\n          header=\"Layout\"\n          encoding=\"Encoding\"\n          error=\"Boolean\"\n          detectConsoleAvailable=\"Boolean\" />\n</targets>\n\n\n\n\nRead more about using the \nConfiguration File\n.\n\n\nParameters\n\n\nGeneral Options\n\n\n\n\nname\n - Name of the target.\n\n\n\n\nLayout Options\n\n\n\n\nlayout\n - Text to be rendered. \nLayout\n Required. Default: \n${longdate}|${level:uppercase=true}|${logger}|${message}\n\n\nfooter\n - Footer. \nLayout\n  \n\n\nheader\n - Header. \nLayout\n\n\n\n\nConsole Options\n\n\n\n\n\n\nencoding\n - File encoding name like \"utf-8\", \"ascii\" or \"utf-16\". See \nEncoding class on MSDN\n. Defaults to \nEncoding.Default\n (\nUTF-8\n on silverlight). Starting for NLog 4.0.\n\n\n\n\n\n\nerror\n - Indicates whether to send the log messages to the standard error instead of the standard output. \nBoolean\n Default: \nfalse\n\n\n\n\n\n\ndetectConsoleAvailable\n - Indicates whether the console target should disable itself when no console detected. \nBoolean\n Default: \nfalse\n (introduced in 4.3.10 with default: \ntrue\n. Since NLog 4.4 default \nfalse\n)",
            "title": "Console target"
        },
        {
            "location": "/Console-target/#configuration-syntax",
            "text": "<targets>\n  <target xsi:type=\"Console\"\n          name=\"String\"\n          layout=\"Layout\"\n          footer=\"Layout\"\n          header=\"Layout\"\n          encoding=\"Encoding\"\n          error=\"Boolean\"\n          detectConsoleAvailable=\"Boolean\" />\n</targets>  Read more about using the  Configuration File .",
            "title": "Configuration Syntax"
        },
        {
            "location": "/Console-target/#parameters",
            "text": "",
            "title": "Parameters"
        },
        {
            "location": "/Console-target/#general-options",
            "text": "name  - Name of the target.",
            "title": "General Options"
        },
        {
            "location": "/Console-target/#layout-options",
            "text": "layout  - Text to be rendered.  Layout  Required. Default:  ${longdate}|${level:uppercase=true}|${logger}|${message}  footer  - Footer.  Layout     header  - Header.  Layout",
            "title": "Layout Options"
        },
        {
            "location": "/Console-target/#console-options",
            "text": "encoding  - File encoding name like \"utf-8\", \"ascii\" or \"utf-16\". See  Encoding class on MSDN . Defaults to  Encoding.Default  ( UTF-8  on silverlight). Starting for NLog 4.0.    error  - Indicates whether to send the log messages to the standard error instead of the standard output.  Boolean  Default:  false    detectConsoleAvailable  - Indicates whether the console target should disable itself when no console detected.  Boolean  Default:  false  (introduced in 4.3.10 with default:  true . Since NLog 4.4 default  false )",
            "title": "Console Options"
        },
        {
            "location": "/Database-target/",
            "text": "Writes log messages to the database using an ADO.NET provider. The database operation is always executed outside of a transaction.\n\n\nSupported in .NET, Compact Framework and Mono\n\n\nConfiguration Syntax\n\n\n<targets>\n  <target xsi:type=\"Database\"\n          name=\"String\"\n          dbUserName=\"Layout\"\n          dbProvider=\"String\"\n          useTransactions=\"Boolean\"\n          connectionStringName=\"String\"\n          connectionString=\"Layout\"\n          keepConnection=\"Boolean\"\n          dbDatabase=\"Layout\"\n          dbPassword=\"Layout\"\n          dbHost=\"Layout\"\n          installConnectionString=\"Layout\"\n          commandText=\"Layout\">\n    <install-command commandType=\"Enum\" connectionString=\"Layout\" ignoreFailures=\"Boolean\"\n                 text=\"Layout\"/><!-- repeated -->\n    <uninstall-command commandType=\"Enum\" connectionString=\"Layout\" ignoreFailures=\"Boolean\"\n                   text=\"Layout\"/><!-- repeated -->\n    <parameter layout=\"Layout\" name=\"String\" precision=\"Byte\"\n         scale=\"Byte\" size=\"Integer\"/><!-- repeated -->\n  </target>\n</targets>\n\n\n\n\nRead more about using the [[Configuration File]].\n\n\nParameters\n\n\nGeneral Options\n\n\n\n\nname\n - Name of the target.\n\n\n\n\nConnection Options\n\n\n\n\n\n\ndbUserName\n - Database user name. If the ConnectionString is not provided this value will be used to construct the \"User ID=\" part of the connection string. \nLayout\n  \n\n\n\n\n\n\ndbProvider\n - Name of the database provider. Required. Default: sqlserver\n\nThe parameter name should be a provider invariant name as registered in machine.config or app.config. Common values are:\n\n\n\n\nSystem.Data.SqlClient -\n\n\nSystem.Data.SqlServerCe.3.5 -\n\n\nSystem.Data.OracleClient - (deprecated in .NET Framework 4)\n\n\nOracle.DataAccess.Client -\n\n\nSystem.Data.SQLite -\n\n\nNpgsql -\n\n\n\n\nMySql.Data.MySqlClient -\n\n\n\n\n(Note that provider invariant names are not supported on .NET Compact Framework). Alternatively the parameter value > can be be a fully qualified name of the provider connection type (class implementing IDbConnection) or one of the\nfollowing tokens:\n * sqlserver, mssql, microsoft or msde - SQL Server Data Provider\n * oledb - OLEDB Data Provider\n * odbc - ODBC Data Provider\n\n\nExample of using a fully qualified name with Mono.Data.Sqlite\n\n\ndbProvider=\"Mono.Data.Sqlite.SqliteConnection, Mono.Data.Sqlite, Version=4.0.0.0, Culture=neutral,\nPublicKeyToken=0738eb9f132ed756\"\n\n\n\n\n\n\n\n\nuseTransactions\n - This option was removed in NLog 4.0 because the logging code always runs outside of transaction. This ensures that the log gets written to the database if you rollback the main transaction because of an error and want to log the error.\n\n\n\n\n\n\nconnectionStringName\n - Name of the connection string. The ProviderName of the connectionstring will be used to determine the SQL type. Since NLog 4.3 this  ProviderName attribute isn't required anymore and the \ndbProvider\n will be used as fallback.\n\n\n\n\n\n\nconnectionString\n - Connection string. When provided, it overrides the values specified in DBHost, DBUserName, DBPassword, DBDatabase and DBProvider. \nLayout\n  \n\n\n\n\n\n\nkeepConnection\n - Indicates whether to keep the database connection open between the log events. \nBoolean\n Default: \nfalse\n  \n\n\n\n\n\n\ndbDatabase\n - Database name. If the ConnectionString is not provided this value will be used to construct the \"Database=\" part of the connection string. \nLayout\n  \n\n\n\n\n\n\n*\ndbPassword\n' - Database password. If the ConnectionString is not provided this value will be used to construct the \"Password=\" part of the connection string. \nLayout\n  \n\n\n\n\n\n\n*\ndbHost\n - Database host name. If the ConnectionString is not provided this value will be used to construct the \"Server=\" part of the connection string. \nLayout\n  \n\n\n\n\n\n\nInstallation Options\n\n\nSee  \nInstalling targets\n.\n\n\ninstallDdlCommands\n - The installation DDL commands. \nCollection\n  . \nEach collection item is represented by \\\n element with the following attributes:\n  * \ncommandType\n - Type of the command. Required. Default: \ntext\n\nPossible values:\n    * StoredProcedure -\n    * TableDirect -\n    * Text -\n  * \nconnectionString\n - Connection string to run the command against. If not provided, connection string from the target is used. \nLayout\n\n  * \nignoreFailures\n - Indicates whether to ignore failures. \nBoolean\n\n  * \nparameters\n - The collection of parameters. Each parameter contains a mapping between NLog layout and a database named or positional parameter. \nCollection\n\nEach collection item is represented by \n element with the following attributes:\n    * \nlayout\n - Layout that should be use to calcuate the value for the parameter. \nLayout\n Required.\n    * \nname\n - Database parameter name. Required.\n    * \nprecision\n - Database parameter precision. \nByte\n Default: 0\n    * \nscale\n - Database parameter scale. \nByte\n Default: 0\n    * \nsize\n - Database parameter size. \nInteger\n Default: 0\n    * \ntext\n - Command text. \nLayout\n Required.\n\n    * \ninstallConnectionString\n - Connection string using for installation and uninstallation. If not provided, regular ConnectionString is being used. \nLayout\n\n    * \nuninstallDdlCommands\n - The uninstallation DDL commands. \nCollection\n\nEach collection item is represented by \\\n element with the following attributes:\n      * \ncommandType\n - Type of the command. Required. Default: \ntext\n \nPossible values:\n        * \nStoredProcedure\n - \ncommandText\n is the stored procedure name.\n        * \nTableDirect\n -\n        * \nText\n - regular query\n      * \nconnectionString\n - Connection string to run the command against. If not provided, connection string from the target is used. \nLayout\n\n      * \nignoreFailures\n - Indicates whether to ignore failures. \nBoolean\n\n      * \nparameters\n - The collection of parameters. Each parameter contains a mapping between NLog layout and a database named or positional parameter. \nCollection\n\nEach collection item is represented by \\\n element with the following attributes:\n        * \nlayout\n - Layout that should be use to calcuate the value for the parameter. \nLayout\n Required.\n        * \nname\n - Database parameter name. Required.\n        * \nprecision\n - Database parameter precision. \nByte\n Default: 0\n        * \nscale\n - Database parameter scale. \nByte\n Default: 0\n        * \nsize\n - Database parameter size. \nInteger\n Default: 0\n        * \ntext\n - Command text. \nLayout\n Required.\n\n\nSQL Statement\n\n\n\n\n\n\ncommandText\n - Text of the SQL command to be run on each log level. \nLayout\n Required.\n\nTypically this is a SQL INSERT statement or a stored procedure call. It should use the database-specific parameters (marked as @parameter for SQL server or :parameter for Oracle, other data providers have their own notation) and not the layout renderers, because the latter is prone to SQL injection attacks. The layout renderers should be specified as \\\n elements instead.\n\n\n\n\n\n\nparameters\n - The collection of parameters. Each parameter contains a mapping between NLog layout and a database named or positional parameter. \nCollection\n\nEach collection item is represented by \\\n element with the following attributes:\n\n\n\n\nlayout\n - Layout that should be use to calcuate the value for the parameter. \nLayout\n Required.  \n\n\nname\n - Database parameter name. Required.\n\n\nprecision\n - Database parameter precision. \nByte\n Default: 0\n\n\nscale\n - Database parameter scale. \nByte\n Default: 0\n\n\nsize\n - Database parameter size. \nInteger\n Default: 0\n\n\n\n\nExample Configurations\n\n\nSQL Server and ASP.NET Example Configuration\n\n\n<target name=\"database\" xsi:type=\"Database\">\n  <!--\n  Remarks:\n    The appsetting layouts require the NLog.Extended assembly.\n    The aspnet-* layouts require the NLog.Web assembly.\n    The Application value is determined by an AppName appSetting in Web.config.\n    The \"NLogDb\" connection string determines the database that NLog write to.\n    The create dbo.Log script in the comment below must be manually executed.\n  -->\n\n  <connectionStringName>NLogDb</connectionStringName>\n\n  <!--\n  Script for creating the dbo.Log table.\n\n  SET ANSI_NULLS ON\n  SET QUOTED_IDENTIFIER ON\n  CREATE TABLE [dbo].[Log] (\n      [Id] [int] IDENTITY(1,1) NOT NULL,\n      [Application] [nvarchar](50) NOT NULL,\n      [Logged] [datetime] NOT NULL,\n      [Level] [nvarchar](50) NOT NULL,\n      [Message] [nvarchar](max) NOT NULL,\n      [UserName] [nvarchar](250) NULL,\n      [ServerName] [nvarchar](max) NULL,\n      [Port] [nvarchar](max) NULL,\n      [Url] [nvarchar](max) NULL,\n      [Https] [bit] NULL,\n      [ServerAddress] [nvarchar](100) NULL,\n      [RemoteAddress] [nvarchar](100) NULL,\n      [Logger] [nvarchar](250) NULL,\n      [Callsite] [nvarchar](max) NULL,\n      [Exception] [nvarchar](max) NULL,\n    CONSTRAINT [PK_dbo.Log] PRIMARY KEY CLUSTERED ([Id] ASC)\n      WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]\n  ) ON [PRIMARY]\n  -->\n\n  <commandText>\n    insert into dbo.Log (\n      Application, Logged, Level, Message,\n      Username,\n      ServerName, Port, Url, Https,\n      ServerAddress, RemoteAddress,\n      Logger, CallSite, Exception\n    ) values (\n      @Application, @Logged, @Level, @Message,\n      @Username,\n      @ServerName, @Port, @Url, @Https,\n      @ServerAddress, @RemoteAddress,\n      @Logger, @Callsite, @Exception\n    );\n  </commandText>\n\n  <parameter name=\"@application\" layout=\"${appsetting:name=AppName:default=Unknown\\: set AppName in appSettings}\" />\n  <parameter name=\"@logged\" layout=\"${date}\" />\n  <parameter name=\"@level\" layout=\"${level}\" />\n  <parameter name=\"@message\" layout=\"${message}\" />\n\n  <parameter name=\"@username\" layout=\"${identity}\" />\n\n  <parameter name=\"@serverName\" layout=\"${aspnet-request:serverVariable=SERVER_NAME}\" />\n  <parameter name=\"@port\" layout=\"${aspnet-request:serverVariable=SERVER_PORT}\" />\n  <parameter name=\"@url\" layout=\"${aspnet-request:serverVariable=HTTP_URL}\" />\n  <parameter name=\"@https\" layout=\"${when:inner=1:when='${aspnet-request:serverVariable=HTTPS}' == 'on'}${when:inner=0:when='${aspnet-request:serverVariable=HTTPS}' != 'on'}\" />\n\n  <parameter name=\"@serverAddress\" layout=\"${aspnet-request:serverVariable=LOCAL_ADDR}\" />\n  <parameter name=\"@remoteAddress\" layout=\"${aspnet-request:serverVariable=REMOTE_ADDR}:${aspnet-request:serverVariable=REMOTE_PORT}\" />\n\n  <parameter name=\"@logger\" layout=\"${logger}\" />\n  <parameter name=\"@callSite\" layout=\"${callsite}\" />\n  <parameter name=\"@exception\" layout=\"${exception:tostring}\" />\n</target>\n\n\n\n\nASP.NET and SQL Server using a stored procedure\n\n\nThis approach keeps the NLog.config file simpler, and helps confine \ndatabase logic to the database.\n\n\nNLog target configuration\n\n\n<target name=\"db\"\n        xsi:type=\"Database\"\n        connectionStringName=\"NLogConn\"\n        commandType=\"StoredProcedure\"\n        commandText=\"[dbo].[NLog_AddEntry_p]\"\n        >\n  <parameter name=\"@machineName\"    layout=\"${machinename}\" />\n  <parameter name=\"@siteName\"       layout=\"${iis-site-name}\" />\n  <parameter name=\"@logged\"         layout=\"${date}\" />\n  <parameter name=\"@level\"          layout=\"${level}\" />\n  <parameter name=\"@username\"       layout=\"${aspnet-user-identity}\" />\n  <parameter name=\"@message\"        layout=\"${message}\" />\n  <parameter name=\"@logger\"         layout=\"${logger}\" />\n  <parameter name=\"@properties\"     layout=\"${all-event-properties:separator=|}\" />\n  <parameter name=\"@serverName\"     layout=\"${aspnet-request:serverVariable=SERVER_NAME}\" />\n  <parameter name=\"@port\"           layout=\"${aspnet-request:serverVariable=SERVER_PORT}\" />\n  <parameter name=\"@url\"            layout=\"${aspnet-request:serverVariable=HTTP_URL}\" />\n  <parameter name=\"@https\"          layout=\"${when:inner=1:when='${aspnet-request:serverVariable=HTTPS}' == 'on'}${when:inner=0:when='${aspnet-request:serverVariable=HTTPS}' != 'on'}\" />\n  <parameter name=\"@serverAddress\"  layout=\"${aspnet-request:serverVariable=LOCAL_ADDR}\" />\n  <parameter name=\"@remoteAddress\"  layout=\"${aspnet-request:serverVariable=REMOTE_ADDR}:${aspnet-request:serverVariable=REMOTE_PORT}\" />\n  <parameter name=\"@callSite\"       layout=\"${callsite}\" />\n  <parameter name=\"@exception\"      layout=\"${exception:tostring}\" />\n</target>\n\n<!--\n  Notes:\n\n  - Some of these layout renderers require a reference to NLog.Web. \n    (http://nuget.org/List/Packages/NLog.Web)\n\n  - If the connection string was created with Visual Studio's Settings dialog\n    then its name may be prefixed with a namespace like \"<project>.Settings.Properties.*\".\n    If so be sure to include the entire name (with the namespace).\n-->\n\n\n\n\nSQL scripts to set up the database objects\n\n\nRemember to grant permissions on the database objects so that the website can execute the stored procedure.\n\n\nCREATE TABLE [dbo].[NLog] (\n   [ID] [int] IDENTITY(1,1) NOT NULL,\n   [MachineName] [nvarchar](200) NULL,\n   [SiteName] [nvarchar](200) NOT NULL,\n   [Logged] [datetime] NOT NULL,\n   [Level] [varchar](5) NOT NULL,\n   [UserName] [nvarchar](200) NULL,\n   [Message] [nvarchar](max) NOT NULL,\n   [Logger] [nvarchar](300) NULL,\n   [Properties] [nvarchar](max) NULL,\n   [ServerName] [nvarchar](200) NULL,\n   [Port] [nvarchar](100) NULL,\n   [Url] [nvarchar](2000) NULL,\n   [Https] [bit] NULL,\n   [ServerAddress] [nvarchar](100) NULL,\n   [RemoteAddress] [nvarchar](100) NULL,\n   [Callsite] [nvarchar](300) NULL,\n   [Exception] [nvarchar](max) NULL,\n CONSTRAINT [PK_dbo.Log] PRIMARY KEY CLUSTERED ([ID] ASC) \n   WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]\n) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY];\n\nGO\n\nCREATE PROCEDURE [dbo].[NLog_AddEntry_p] (\n  @machineName nvarchar(200),\n  @siteName nvarchar(200),\n  @logged datetime,\n  @level varchar(5),\n  @userName nvarchar(200),\n  @message nvarchar(max),\n  @logger nvarchar(300),\n  @properties nvarchar(max),\n  @serverName nvarchar(200),\n  @port nvarchar(100),\n  @url nvarchar(2000),\n  @https bit,\n  @serverAddress nvarchar(100),\n  @remoteAddress nvarchar(100),\n  @callSite nvarchar(300),\n  @exception nvarchar(max)\n) AS\nBEGIN\n  INSERT INTO [dbo].[NLog] (\n    [MachineName],\n    [SiteName],\n    [Logged],\n    [Level],\n    [UserName],\n    [Message],\n    [Logger],\n    [Properties],\n    [ServerName],\n    [Port],\n    [Url],\n    [Https],\n    [ServerAddress],\n    [RemoteAddress],\n    [CallSite],\n    [Exception]\n  ) VALUES (\n    @machineName,\n    @siteName,\n    @logged,\n    @level,\n    @userName,\n    @message,\n    @logger,\n    @properties,\n    @serverName,\n    @port,\n    @url,\n    @https,\n    @serverAddress,\n    @remoteAddress,\n    @callSite,\n    @exception\n  );\nEND\n\n\n\n\nMySql and .NET Core\n\n\nInstalled this package \nMySql.Data\n\n\nwith following settings\n\n\n<target name=\"database\" xsi:type=\"Database\"\n             dbProvider=\"MySql.Data.MySqlClient.MySqlConnection, MySql.Data\"\n             connectionString=\"server=localhost;Database=*****;user id=****;password=*****\"\n             >",
            "title": "Database target"
        },
        {
            "location": "/Database-target/#configuration-syntax",
            "text": "<targets>\n  <target xsi:type=\"Database\"\n          name=\"String\"\n          dbUserName=\"Layout\"\n          dbProvider=\"String\"\n          useTransactions=\"Boolean\"\n          connectionStringName=\"String\"\n          connectionString=\"Layout\"\n          keepConnection=\"Boolean\"\n          dbDatabase=\"Layout\"\n          dbPassword=\"Layout\"\n          dbHost=\"Layout\"\n          installConnectionString=\"Layout\"\n          commandText=\"Layout\">\n    <install-command commandType=\"Enum\" connectionString=\"Layout\" ignoreFailures=\"Boolean\"\n                 text=\"Layout\"/><!-- repeated -->\n    <uninstall-command commandType=\"Enum\" connectionString=\"Layout\" ignoreFailures=\"Boolean\"\n                   text=\"Layout\"/><!-- repeated -->\n    <parameter layout=\"Layout\" name=\"String\" precision=\"Byte\"\n         scale=\"Byte\" size=\"Integer\"/><!-- repeated -->\n  </target>\n</targets>  Read more about using the [[Configuration File]].",
            "title": "Configuration Syntax"
        },
        {
            "location": "/Database-target/#parameters",
            "text": "",
            "title": "Parameters"
        },
        {
            "location": "/Database-target/#general-options",
            "text": "name  - Name of the target.",
            "title": "General Options"
        },
        {
            "location": "/Database-target/#connection-options",
            "text": "dbUserName  - Database user name. If the ConnectionString is not provided this value will be used to construct the \"User ID=\" part of the connection string.  Layout       dbProvider  - Name of the database provider. Required. Default: sqlserver \nThe parameter name should be a provider invariant name as registered in machine.config or app.config. Common values are:   System.Data.SqlClient -  System.Data.SqlServerCe.3.5 -  System.Data.OracleClient - (deprecated in .NET Framework 4)  Oracle.DataAccess.Client -  System.Data.SQLite -  Npgsql -   MySql.Data.MySqlClient -   (Note that provider invariant names are not supported on .NET Compact Framework). Alternatively the parameter value > can be be a fully qualified name of the provider connection type (class implementing IDbConnection) or one of the\nfollowing tokens:\n * sqlserver, mssql, microsoft or msde - SQL Server Data Provider\n * oledb - OLEDB Data Provider\n * odbc - ODBC Data Provider  Example of using a fully qualified name with Mono.Data.Sqlite  dbProvider=\"Mono.Data.Sqlite.SqliteConnection, Mono.Data.Sqlite, Version=4.0.0.0, Culture=neutral,\nPublicKeyToken=0738eb9f132ed756\"     useTransactions  - This option was removed in NLog 4.0 because the logging code always runs outside of transaction. This ensures that the log gets written to the database if you rollback the main transaction because of an error and want to log the error.    connectionStringName  - Name of the connection string. The ProviderName of the connectionstring will be used to determine the SQL type. Since NLog 4.3 this  ProviderName attribute isn't required anymore and the  dbProvider  will be used as fallback.    connectionString  - Connection string. When provided, it overrides the values specified in DBHost, DBUserName, DBPassword, DBDatabase and DBProvider.  Layout       keepConnection  - Indicates whether to keep the database connection open between the log events.  Boolean  Default:  false       dbDatabase  - Database name. If the ConnectionString is not provided this value will be used to construct the \"Database=\" part of the connection string.  Layout       * dbPassword ' - Database password. If the ConnectionString is not provided this value will be used to construct the \"Password=\" part of the connection string.  Layout       * dbHost  - Database host name. If the ConnectionString is not provided this value will be used to construct the \"Server=\" part of the connection string.  Layout",
            "title": "Connection Options"
        },
        {
            "location": "/Database-target/#installation-options",
            "text": "See   Installing targets .  installDdlCommands  - The installation DDL commands.  Collection   . \nEach collection item is represented by \\  element with the following attributes:\n  *  commandType  - Type of the command. Required. Default:  text \nPossible values:\n    * StoredProcedure -\n    * TableDirect -\n    * Text -\n  *  connectionString  - Connection string to run the command against. If not provided, connection string from the target is used.  Layout \n  *  ignoreFailures  - Indicates whether to ignore failures.  Boolean \n  *  parameters  - The collection of parameters. Each parameter contains a mapping between NLog layout and a database named or positional parameter.  Collection \nEach collection item is represented by   element with the following attributes:\n    *  layout  - Layout that should be use to calcuate the value for the parameter.  Layout  Required.\n    *  name  - Database parameter name. Required.\n    *  precision  - Database parameter precision.  Byte  Default: 0\n    *  scale  - Database parameter scale.  Byte  Default: 0\n    *  size  - Database parameter size.  Integer  Default: 0\n    *  text  - Command text.  Layout  Required. \n    *  installConnectionString  - Connection string using for installation and uninstallation. If not provided, regular ConnectionString is being used.  Layout \n    *  uninstallDdlCommands  - The uninstallation DDL commands.  Collection \nEach collection item is represented by \\  element with the following attributes:\n      *  commandType  - Type of the command. Required. Default:  text  \nPossible values:\n        *  StoredProcedure  -  commandText  is the stored procedure name.\n        *  TableDirect  -\n        *  Text  - regular query\n      *  connectionString  - Connection string to run the command against. If not provided, connection string from the target is used.  Layout \n      *  ignoreFailures  - Indicates whether to ignore failures.  Boolean \n      *  parameters  - The collection of parameters. Each parameter contains a mapping between NLog layout and a database named or positional parameter.  Collection \nEach collection item is represented by \\  element with the following attributes:\n        *  layout  - Layout that should be use to calcuate the value for the parameter.  Layout  Required.\n        *  name  - Database parameter name. Required.\n        *  precision  - Database parameter precision.  Byte  Default: 0\n        *  scale  - Database parameter scale.  Byte  Default: 0\n        *  size  - Database parameter size.  Integer  Default: 0\n        *  text  - Command text.  Layout  Required.",
            "title": "Installation Options"
        },
        {
            "location": "/Database-target/#sql-statement",
            "text": "commandText  - Text of the SQL command to be run on each log level.  Layout  Required. \nTypically this is a SQL INSERT statement or a stored procedure call. It should use the database-specific parameters (marked as @parameter for SQL server or :parameter for Oracle, other data providers have their own notation) and not the layout renderers, because the latter is prone to SQL injection attacks. The layout renderers should be specified as \\  elements instead.    parameters  - The collection of parameters. Each parameter contains a mapping between NLog layout and a database named or positional parameter.  Collection \nEach collection item is represented by \\  element with the following attributes:   layout  - Layout that should be use to calcuate the value for the parameter.  Layout  Required.    name  - Database parameter name. Required.  precision  - Database parameter precision.  Byte  Default: 0  scale  - Database parameter scale.  Byte  Default: 0  size  - Database parameter size.  Integer  Default: 0",
            "title": "SQL Statement"
        },
        {
            "location": "/Database-target/#example-configurations",
            "text": "",
            "title": "Example Configurations"
        },
        {
            "location": "/Database-target/#sql-server-and-aspnet-example-configuration",
            "text": "<target name=\"database\" xsi:type=\"Database\">\n  <!--\n  Remarks:\n    The appsetting layouts require the NLog.Extended assembly.\n    The aspnet-* layouts require the NLog.Web assembly.\n    The Application value is determined by an AppName appSetting in Web.config.\n    The \"NLogDb\" connection string determines the database that NLog write to.\n    The create dbo.Log script in the comment below must be manually executed.\n  -->\n\n  <connectionStringName>NLogDb</connectionStringName>\n\n  <!--\n  Script for creating the dbo.Log table.\n\n  SET ANSI_NULLS ON\n  SET QUOTED_IDENTIFIER ON\n  CREATE TABLE [dbo].[Log] (\n      [Id] [int] IDENTITY(1,1) NOT NULL,\n      [Application] [nvarchar](50) NOT NULL,\n      [Logged] [datetime] NOT NULL,\n      [Level] [nvarchar](50) NOT NULL,\n      [Message] [nvarchar](max) NOT NULL,\n      [UserName] [nvarchar](250) NULL,\n      [ServerName] [nvarchar](max) NULL,\n      [Port] [nvarchar](max) NULL,\n      [Url] [nvarchar](max) NULL,\n      [Https] [bit] NULL,\n      [ServerAddress] [nvarchar](100) NULL,\n      [RemoteAddress] [nvarchar](100) NULL,\n      [Logger] [nvarchar](250) NULL,\n      [Callsite] [nvarchar](max) NULL,\n      [Exception] [nvarchar](max) NULL,\n    CONSTRAINT [PK_dbo.Log] PRIMARY KEY CLUSTERED ([Id] ASC)\n      WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]\n  ) ON [PRIMARY]\n  -->\n\n  <commandText>\n    insert into dbo.Log (\n      Application, Logged, Level, Message,\n      Username,\n      ServerName, Port, Url, Https,\n      ServerAddress, RemoteAddress,\n      Logger, CallSite, Exception\n    ) values (\n      @Application, @Logged, @Level, @Message,\n      @Username,\n      @ServerName, @Port, @Url, @Https,\n      @ServerAddress, @RemoteAddress,\n      @Logger, @Callsite, @Exception\n    );\n  </commandText>\n\n  <parameter name=\"@application\" layout=\"${appsetting:name=AppName:default=Unknown\\: set AppName in appSettings}\" />\n  <parameter name=\"@logged\" layout=\"${date}\" />\n  <parameter name=\"@level\" layout=\"${level}\" />\n  <parameter name=\"@message\" layout=\"${message}\" />\n\n  <parameter name=\"@username\" layout=\"${identity}\" />\n\n  <parameter name=\"@serverName\" layout=\"${aspnet-request:serverVariable=SERVER_NAME}\" />\n  <parameter name=\"@port\" layout=\"${aspnet-request:serverVariable=SERVER_PORT}\" />\n  <parameter name=\"@url\" layout=\"${aspnet-request:serverVariable=HTTP_URL}\" />\n  <parameter name=\"@https\" layout=\"${when:inner=1:when='${aspnet-request:serverVariable=HTTPS}' == 'on'}${when:inner=0:when='${aspnet-request:serverVariable=HTTPS}' != 'on'}\" />\n\n  <parameter name=\"@serverAddress\" layout=\"${aspnet-request:serverVariable=LOCAL_ADDR}\" />\n  <parameter name=\"@remoteAddress\" layout=\"${aspnet-request:serverVariable=REMOTE_ADDR}:${aspnet-request:serverVariable=REMOTE_PORT}\" />\n\n  <parameter name=\"@logger\" layout=\"${logger}\" />\n  <parameter name=\"@callSite\" layout=\"${callsite}\" />\n  <parameter name=\"@exception\" layout=\"${exception:tostring}\" />\n</target>",
            "title": "SQL Server and ASP.NET Example Configuration"
        },
        {
            "location": "/Database-target/#aspnet-and-sql-server-using-a-stored-procedure",
            "text": "This approach keeps the NLog.config file simpler, and helps confine \ndatabase logic to the database.",
            "title": "ASP.NET and SQL Server using a stored procedure"
        },
        {
            "location": "/Database-target/#nlog-target-configuration",
            "text": "<target name=\"db\"\n        xsi:type=\"Database\"\n        connectionStringName=\"NLogConn\"\n        commandType=\"StoredProcedure\"\n        commandText=\"[dbo].[NLog_AddEntry_p]\"\n        >\n  <parameter name=\"@machineName\"    layout=\"${machinename}\" />\n  <parameter name=\"@siteName\"       layout=\"${iis-site-name}\" />\n  <parameter name=\"@logged\"         layout=\"${date}\" />\n  <parameter name=\"@level\"          layout=\"${level}\" />\n  <parameter name=\"@username\"       layout=\"${aspnet-user-identity}\" />\n  <parameter name=\"@message\"        layout=\"${message}\" />\n  <parameter name=\"@logger\"         layout=\"${logger}\" />\n  <parameter name=\"@properties\"     layout=\"${all-event-properties:separator=|}\" />\n  <parameter name=\"@serverName\"     layout=\"${aspnet-request:serverVariable=SERVER_NAME}\" />\n  <parameter name=\"@port\"           layout=\"${aspnet-request:serverVariable=SERVER_PORT}\" />\n  <parameter name=\"@url\"            layout=\"${aspnet-request:serverVariable=HTTP_URL}\" />\n  <parameter name=\"@https\"          layout=\"${when:inner=1:when='${aspnet-request:serverVariable=HTTPS}' == 'on'}${when:inner=0:when='${aspnet-request:serverVariable=HTTPS}' != 'on'}\" />\n  <parameter name=\"@serverAddress\"  layout=\"${aspnet-request:serverVariable=LOCAL_ADDR}\" />\n  <parameter name=\"@remoteAddress\"  layout=\"${aspnet-request:serverVariable=REMOTE_ADDR}:${aspnet-request:serverVariable=REMOTE_PORT}\" />\n  <parameter name=\"@callSite\"       layout=\"${callsite}\" />\n  <parameter name=\"@exception\"      layout=\"${exception:tostring}\" />\n</target>\n\n<!--\n  Notes:\n\n  - Some of these layout renderers require a reference to NLog.Web. \n    (http://nuget.org/List/Packages/NLog.Web)\n\n  - If the connection string was created with Visual Studio's Settings dialog\n    then its name may be prefixed with a namespace like \"<project>.Settings.Properties.*\".\n    If so be sure to include the entire name (with the namespace).\n-->",
            "title": "NLog target configuration"
        },
        {
            "location": "/Database-target/#sql-scripts-to-set-up-the-database-objects",
            "text": "Remember to grant permissions on the database objects so that the website can execute the stored procedure.  CREATE TABLE [dbo].[NLog] (\n   [ID] [int] IDENTITY(1,1) NOT NULL,\n   [MachineName] [nvarchar](200) NULL,\n   [SiteName] [nvarchar](200) NOT NULL,\n   [Logged] [datetime] NOT NULL,\n   [Level] [varchar](5) NOT NULL,\n   [UserName] [nvarchar](200) NULL,\n   [Message] [nvarchar](max) NOT NULL,\n   [Logger] [nvarchar](300) NULL,\n   [Properties] [nvarchar](max) NULL,\n   [ServerName] [nvarchar](200) NULL,\n   [Port] [nvarchar](100) NULL,\n   [Url] [nvarchar](2000) NULL,\n   [Https] [bit] NULL,\n   [ServerAddress] [nvarchar](100) NULL,\n   [RemoteAddress] [nvarchar](100) NULL,\n   [Callsite] [nvarchar](300) NULL,\n   [Exception] [nvarchar](max) NULL,\n CONSTRAINT [PK_dbo.Log] PRIMARY KEY CLUSTERED ([ID] ASC) \n   WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]\n) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY];\n\nGO\n\nCREATE PROCEDURE [dbo].[NLog_AddEntry_p] (\n  @machineName nvarchar(200),\n  @siteName nvarchar(200),\n  @logged datetime,\n  @level varchar(5),\n  @userName nvarchar(200),\n  @message nvarchar(max),\n  @logger nvarchar(300),\n  @properties nvarchar(max),\n  @serverName nvarchar(200),\n  @port nvarchar(100),\n  @url nvarchar(2000),\n  @https bit,\n  @serverAddress nvarchar(100),\n  @remoteAddress nvarchar(100),\n  @callSite nvarchar(300),\n  @exception nvarchar(max)\n) AS\nBEGIN\n  INSERT INTO [dbo].[NLog] (\n    [MachineName],\n    [SiteName],\n    [Logged],\n    [Level],\n    [UserName],\n    [Message],\n    [Logger],\n    [Properties],\n    [ServerName],\n    [Port],\n    [Url],\n    [Https],\n    [ServerAddress],\n    [RemoteAddress],\n    [CallSite],\n    [Exception]\n  ) VALUES (\n    @machineName,\n    @siteName,\n    @logged,\n    @level,\n    @userName,\n    @message,\n    @logger,\n    @properties,\n    @serverName,\n    @port,\n    @url,\n    @https,\n    @serverAddress,\n    @remoteAddress,\n    @callSite,\n    @exception\n  );\nEND",
            "title": "SQL scripts to set up the database objects"
        },
        {
            "location": "/Database-target/#mysql-and-net-core",
            "text": "Installed this package  MySql.Data  with following settings  <target name=\"database\" xsi:type=\"Database\"\n             dbProvider=\"MySql.Data.MySqlClient.MySqlConnection, MySql.Data\"\n             connectionString=\"server=localhost;Database=*****;user id=****;password=*****\"\n             >",
            "title": "MySql and .NET Core"
        },
        {
            "location": "/Debug-target/",
            "text": "Mock target - useful for testing. \n\n\nSupported in .NET, Silverlight, Compact Framework and Mono\n\n\nConfiguration Syntax\n\n\n<targets>\n  <target xsi:type=\"Debug\" name=\"String\" layout=\"Layout\" />\n</targets>\n\n\n\n\nRead more about using the [[Configuration File]].\n\n\nParameters\n\n\nGeneral Options\n\n\n\n\nname\n - Name of the target.\n\n\n\n\nLayout Options\n\n\n\n\nlayout\n - Layout used to format log messages. \nLayout\n Required. Default: \n${longdate}|${level:uppercase=true}|${logger}|${message}\n\n\n\n\nExamples\n\n\nLogging to Debug Target\n\n\n(snippet from \nDebug Simple Example.cs\n  )\n\n\n    DebugTarget target = new DebugTarget();\n    target.Layout = \"${message}\";\n\n    NLog.Config.SimpleConfigurator.ConfigureForTargetLogging(target, LogLevel.Debug);\n\n    Logger logger = LogManager.GetLogger(\"Example\");\n    logger.Debug(\"log message\");\n    logger.Debug(\"another log message\");\n\n    Console.WriteLine(\"The debug target has been hit {0} times.\", target.Counter);\n    Console.WriteLine(\"The last message was '{0}'.\", target.LastMessage);\n\n\n\nSome examples of DebugTarget use can be found in \nunit tests",
            "title": "Debug target"
        },
        {
            "location": "/Debug-target/#configuration-syntax",
            "text": "<targets>\n  <target xsi:type=\"Debug\" name=\"String\" layout=\"Layout\" />\n</targets>  Read more about using the [[Configuration File]].",
            "title": "Configuration Syntax"
        },
        {
            "location": "/Debug-target/#parameters",
            "text": "",
            "title": "Parameters"
        },
        {
            "location": "/Debug-target/#general-options",
            "text": "name  - Name of the target.",
            "title": "General Options"
        },
        {
            "location": "/Debug-target/#layout-options",
            "text": "layout  - Layout used to format log messages.  Layout  Required. Default:  ${longdate}|${level:uppercase=true}|${logger}|${message}",
            "title": "Layout Options"
        },
        {
            "location": "/Debug-target/#examples",
            "text": "",
            "title": "Examples"
        },
        {
            "location": "/Debug-target/#logging-to-debug-target",
            "text": "(snippet from  Debug Simple Example.cs   )      DebugTarget target = new DebugTarget();\n    target.Layout = \"${message}\";\n\n    NLog.Config.SimpleConfigurator.ConfigureForTargetLogging(target, LogLevel.Debug);\n\n    Logger logger = LogManager.GetLogger(\"Example\");\n    logger.Debug(\"log message\");\n    logger.Debug(\"another log message\");\n\n    Console.WriteLine(\"The debug target has been hit {0} times.\", target.Counter);\n    Console.WriteLine(\"The last message was '{0}'.\", target.LastMessage);  Some examples of DebugTarget use can be found in  unit tests",
            "title": "Logging to Debug Target"
        },
        {
            "location": "/Debugger-target/",
            "text": "Writes log messages to the attached managed debugger. \n\n\nSupported in .NET, Silverlight and Mono\n\n\nConfiguration Syntax\n\n\n<targets>\n  <target xsi:type=\"Debugger\"\n          name=\"String\"\n          footer=\"Layout\"\n          layout=\"Layout\"\n          header=\"Layout\" />\n</targets>\n\n\n\n\nRead more about using the [[Configuration File]].\n\n\nParameters\n\n\nGeneral Options\n\n\n\n\nname\n - Name of the target.\n\n\n\n\nLayout Options\n\n\n\n\nfooter\n - Footer. \nLayout\n  \n\n\nlayout\n - Text to be rendered. \nLayout\n Required. Default: \n${longdate}|${level:uppercase=true}|${logger}|${message}\n\n\nheader\n - Header. \nLayout\n\n\n\n\nExamples\n\n\nFrom \nstackoverflow\n \n\n\n <targets>\n        <target name=\"debugger\" xsi:type=\"Debugger\" layout=\"${logger}::${message}\"/>\n  </targets>\n\n  <rules>\n    <logger name=\"*\" minlevel=\"Trace\" writeTo=\"debugger\" />\n  </rules>",
            "title": "Debugger target"
        },
        {
            "location": "/Debugger-target/#configuration-syntax",
            "text": "<targets>\n  <target xsi:type=\"Debugger\"\n          name=\"String\"\n          footer=\"Layout\"\n          layout=\"Layout\"\n          header=\"Layout\" />\n</targets>  Read more about using the [[Configuration File]].",
            "title": "Configuration Syntax"
        },
        {
            "location": "/Debugger-target/#parameters",
            "text": "",
            "title": "Parameters"
        },
        {
            "location": "/Debugger-target/#general-options",
            "text": "name  - Name of the target.",
            "title": "General Options"
        },
        {
            "location": "/Debugger-target/#layout-options",
            "text": "footer  - Footer.  Layout     layout  - Text to be rendered.  Layout  Required. Default:  ${longdate}|${level:uppercase=true}|${logger}|${message}  header  - Header.  Layout",
            "title": "Layout Options"
        },
        {
            "location": "/Debugger-target/#examples",
            "text": "From  stackoverflow     <targets>\n        <target name=\"debugger\" xsi:type=\"Debugger\" layout=\"${logger}::${message}\"/>\n  </targets>\n\n  <rules>\n    <logger name=\"*\" minlevel=\"Trace\" writeTo=\"debugger\" />\n  </rules>",
            "title": "Examples"
        },
        {
            "location": "/Elmah-target/",
            "text": "TODO see: https://github.com/NLog/NLog.Elmah/blob/master/NLog.Elmah/ElmahTarget.cs",
            "title": "Elmah target"
        },
        {
            "location": "/Eventlog-target/",
            "text": "Writes log message to the Event Log. \n\n\nSupported in .NET and Mono\n\n\nConfiguration Syntax\n\n\n<targets>\n  <target xsi:type=\"EventLog\"\n          name=\"String\"\n          layout=\"Layout\"\n          machineName=\"String\"\n          source=\"Layout\" \n          category=\"Layout\"\n          eventId=\"Layout\"\n          log=\"String\"\n          maxMessageLength=\"Integer\" />\n<!-- note: source is a string in NLog before 4.0 -->\n</targets>\n\n\n\n\nRead more about using the [[Configuration File]].\n\n\nParameters\n\n\nGeneral Options\n\n\n\n\nname\n - Name of the target.\n\n\n\n\nLayout Options\n\n\n\n\nlayout\n - Layout used to format log messages. \nLayout\n Required. Default: \n${longdate}|${level:uppercase=true}|${logger}|${message}\n. Note: max size of 16384 characters (limitation of the \nEventLog\n API)\n\n\n\n\nEvent Log Options\n\n\n\n\nmachineName\n - Name of the machine on which Event Log service is running. Default: \n.\n  \n\n\nsource\n - Value to be used as the event Source. By default this is the friendly name of the current AppDomain. From NLog 4.0 this is layoutable(Layouts). \n\n\ncategory\n - \nLayout\n that renders event Category.  The categories must be predefined for the specified \nsource\n and needs to be numeric.   \n\n\neventId\n - \nLayout\n that renders event ID. \n\n\nlog\n - Name of the Event Log to write to. This can be System, Application or any user-defined name. Default: Application\n\n\nMaxMessageLength\n - The message length limit to write to the Event Log. There are \nvarious message length limit that depends on the OS.\n Therefore, be careful for the value. Default: 16,384. If given value is zero or negative, then Exception will throw. Introduced in NLog 4.3.\n\n\nonOverflow\n - Action to take when a log message is larger than the \nMaxMessageLength\n option. Available actions are:\n\n\nTruncate\n - Truncates the message before writing to the Event Log. This is the default.\n\n\nSplit\n - Splits the message and writes multiple entries to the Event Log. Warning: the message layout will be spread across multiple Event Log entries; if there is an application reading and parsing the Event Log, split messages will not have the expected layout of a log entry.\n\n\nDiscard\n - Discards of the message. It will not be written to the Event Log.\n\n\n\n\nNotes\n\n\nTo log to the event log, an event source is required to exist. This involves creating the event source.\n\n\nWhen install/uninstalling, the event source is only created / removed when the \nsource\n doesn't contain layout renderers.\n\n\nWhen installing, the event source can only be created when run as an Administrator. Alternatively a simple PowerShell command to create this source is shown below (run PowerShell as Administrator).\n\n\nNew-EventLog -LogName Application -Source \"MySourceName\"\n\n\n\nThe Event Log has a limit in the number of bytes in a message. From \nMSDN\n:\n\n\n\n\nThe message string is longer than 31,839 bytes (32,766 bytes on Windows operating systems before Windows Vista).\n\n\n\n\nExample\n\n\n<target xsi:type=\"EventLog\"\n            name=\"eventlog\"\n            source=\"test\"\n            layout=\"${message}${newline}${exception:format=ToString}\"/>",
            "title": "Eventlog target"
        },
        {
            "location": "/Eventlog-target/#configuration-syntax",
            "text": "<targets>\n  <target xsi:type=\"EventLog\"\n          name=\"String\"\n          layout=\"Layout\"\n          machineName=\"String\"\n          source=\"Layout\" \n          category=\"Layout\"\n          eventId=\"Layout\"\n          log=\"String\"\n          maxMessageLength=\"Integer\" />\n<!-- note: source is a string in NLog before 4.0 -->\n</targets>  Read more about using the [[Configuration File]].",
            "title": "Configuration Syntax"
        },
        {
            "location": "/Eventlog-target/#parameters",
            "text": "",
            "title": "Parameters"
        },
        {
            "location": "/Eventlog-target/#general-options",
            "text": "name  - Name of the target.",
            "title": "General Options"
        },
        {
            "location": "/Eventlog-target/#layout-options",
            "text": "layout  - Layout used to format log messages.  Layout  Required. Default:  ${longdate}|${level:uppercase=true}|${logger}|${message} . Note: max size of 16384 characters (limitation of the  EventLog  API)",
            "title": "Layout Options"
        },
        {
            "location": "/Eventlog-target/#event-log-options",
            "text": "machineName  - Name of the machine on which Event Log service is running. Default:  .     source  - Value to be used as the event Source. By default this is the friendly name of the current AppDomain. From NLog 4.0 this is layoutable(Layouts).   category  -  Layout  that renders event Category.  The categories must be predefined for the specified  source  and needs to be numeric.     eventId  -  Layout  that renders event ID.   log  - Name of the Event Log to write to. This can be System, Application or any user-defined name. Default: Application  MaxMessageLength  - The message length limit to write to the Event Log. There are  various message length limit that depends on the OS.  Therefore, be careful for the value. Default: 16,384. If given value is zero or negative, then Exception will throw. Introduced in NLog 4.3.  onOverflow  - Action to take when a log message is larger than the  MaxMessageLength  option. Available actions are:  Truncate  - Truncates the message before writing to the Event Log. This is the default.  Split  - Splits the message and writes multiple entries to the Event Log. Warning: the message layout will be spread across multiple Event Log entries; if there is an application reading and parsing the Event Log, split messages will not have the expected layout of a log entry.  Discard  - Discards of the message. It will not be written to the Event Log.",
            "title": "Event Log Options"
        },
        {
            "location": "/Eventlog-target/#notes",
            "text": "To log to the event log, an event source is required to exist. This involves creating the event source.  When install/uninstalling, the event source is only created / removed when the  source  doesn't contain layout renderers.  When installing, the event source can only be created when run as an Administrator. Alternatively a simple PowerShell command to create this source is shown below (run PowerShell as Administrator).  New-EventLog -LogName Application -Source \"MySourceName\"  The Event Log has a limit in the number of bytes in a message. From  MSDN :   The message string is longer than 31,839 bytes (32,766 bytes on Windows operating systems before Windows Vista).",
            "title": "Notes"
        },
        {
            "location": "/Eventlog-target/#example",
            "text": "<target xsi:type=\"EventLog\"\n            name=\"eventlog\"\n            source=\"test\"\n            layout=\"${message}${newline}${exception:format=ToString}\"/>",
            "title": "Example"
        },
        {
            "location": "/FallbackGroup-target/",
            "text": "Provides fallback-on-error. \n\n\nSupported in .NET, Silverlight, Compact Framework and Mono.\n\n\nConfiguration Syntax\n\n\n<targets>\n  <target xsi:type=\"FallbackGroup\" name=\"String\" returnToFirstOnSuccess=\"Boolean\">\n    <target xsi:type=\"wrappedTargetType\" ... />\n    <target xsi:type=\"wrappedTargetType\" ... />\n    ...\n    <target xsi:type=\"wrappedTargetType\" ... />\n  </target>\n</targets>\n\n\n\n\nParameters\n\n\nGeneral Options\n\n\n\n\nname\n - Name of the target.\n\n\n\n\nFallback Options\n\n\n\n\nreturnToFirstOnSuccess\n - Indicates whether to return to the first target after any successful write. \nBoolean\n. Default \nfalse\n\n\n\n\nExample\n\n\nFallback to another mail if the mailserver is down\n\n\n<target xsi:type=\"FallbackGroup\" \n        name=\"mail\"\n        returnToFirstOnSuccess=\"true\">\n    <target xsi:type=\"Mail\"\n            name=\"mailserver1\"\n            subject=\"Layout\"\n            to=\"Layout\"\n            from=\"Layout\"\n            smtpServer=\"mx1.example.com\" \n            smtpPort=\"Integer\"\n            layout=\"Layout\" />\n    <target xsi:type=\"Mail\"\n            name=\"mailserver2\" \n            subject=\"Layout\"\n            to=\"Layout\"\n            from=\"Layout\"\n            smtpServer=\"mx2.example.com\" \n            smtpPort=\"Integer\"\n            layout=\"Layout\" />\n</target>\n<rules>\n  <logger name=\"*\" minlevel=\"Trace\" writeTo=\"mail\" />\n</rules>",
            "title": "FallbackGroup target"
        },
        {
            "location": "/FallbackGroup-target/#configuration-syntax",
            "text": "<targets>\n  <target xsi:type=\"FallbackGroup\" name=\"String\" returnToFirstOnSuccess=\"Boolean\">\n    <target xsi:type=\"wrappedTargetType\" ... />\n    <target xsi:type=\"wrappedTargetType\" ... />\n    ...\n    <target xsi:type=\"wrappedTargetType\" ... />\n  </target>\n</targets>",
            "title": "Configuration Syntax"
        },
        {
            "location": "/FallbackGroup-target/#parameters",
            "text": "",
            "title": "Parameters"
        },
        {
            "location": "/FallbackGroup-target/#general-options",
            "text": "name  - Name of the target.",
            "title": "General Options"
        },
        {
            "location": "/FallbackGroup-target/#fallback-options",
            "text": "returnToFirstOnSuccess  - Indicates whether to return to the first target after any successful write.  Boolean . Default  false",
            "title": "Fallback Options"
        },
        {
            "location": "/FallbackGroup-target/#example",
            "text": "Fallback to another mail if the mailserver is down  <target xsi:type=\"FallbackGroup\" \n        name=\"mail\"\n        returnToFirstOnSuccess=\"true\">\n    <target xsi:type=\"Mail\"\n            name=\"mailserver1\"\n            subject=\"Layout\"\n            to=\"Layout\"\n            from=\"Layout\"\n            smtpServer=\"mx1.example.com\" \n            smtpPort=\"Integer\"\n            layout=\"Layout\" />\n    <target xsi:type=\"Mail\"\n            name=\"mailserver2\" \n            subject=\"Layout\"\n            to=\"Layout\"\n            from=\"Layout\"\n            smtpServer=\"mx2.example.com\" \n            smtpPort=\"Integer\"\n            layout=\"Layout\" />\n</target>\n<rules>\n  <logger name=\"*\" minlevel=\"Trace\" writeTo=\"mail\" />\n</rules>",
            "title": "Example"
        },
        {
            "location": "/File-target/",
            "text": "Writes log messages to one or more files. \n\n\nSince NLog 4.3 the \n${basedir}\n isn't needed anymore for relative paths.\n\n\nSupported in .NET, Silverlight, Compact Framework and Mono.\n\n\nConfiguration Syntax\n\n\n<targets>\n  <target xsi:type=\"File\"\n          name=\"String\"\n          layout=\"Layout\"\n          header=\"Layout\"\n          footer=\"Layout\"\n          encoding=\"Encoding\"\n          lineEnding=\"Enum\"\n          archiveAboveSize=\"Long\"\n          maxArchiveFiles=\"Integer\"\n          archiveFileName=\"Layout\"\n          archiveNumbering=\"Enum\"\n          archiveDateFormat=\"String\"\n          archiveEvery=\"Enum\"          \n          archiveOldFileOnStartup=\"Boolean\"\n          replaceFileContentsOnEachWrite=\"Boolean\"\n          fileAttributes=\"Enum\"\n          fileName=\"Layout\"\n          deleteOldFileOnStartup=\"Boolean\"\n          enableFileDelete=\"Boolean\"\n          createDirs=\"Boolean\"\n          concurrentWrites=\"Boolean\"\n          openFileCacheTimeout=\"Integer\"\n          openFileCacheSize=\"Integer\"\n          networkWrites=\"Boolean\"\n          concurrentWriteAttemptDelay=\"Integer\"\n          concurrentWriteAttempts=\"Integer\"\n          bufferSize=\"Integer\"\n          autoFlush=\"Boolean\"\n          keepFileOpen=\"Boolean\"\n          forceManaged=\"Boolean\"\n          enableArchiveFileCompression=\"Boolean\"\n          cleanupFileName=\"Boolean\"\n          writeFooterOnArchivingOnly=\"Boolean\"  />\n</targets>\n\n\n\n\nRead more about using the \nConfiguration File\n.\n\n\nParameters\n\n\nGeneral Options\n\n\n\n\n\n\nname\n - Name of the target.\n\n\n\n\n\n\nforceManaged\n - Indicates that the file target should only use managed methods. This disables some of the options.\n\n\n\n\n\n\nLayout Options\n\n\n\n\n\n\nlayout\n - Text to be rendered. \nLayout\n Required. Default: \n${longdate}|${level:uppercase=true}|${logger}|${message}\n\n\n\n\n\n\nheader\n - Header. \nLayout\n  \n\n\n\n\n\n\nfooter\n - Footer. \nLayout\n\n\n\n\n\n\nencoding\n - File encoding name like \"utf-8\", \"ascii\" or \"utf-16\". See \nEncoding class on MSDN\n. Defaults to \nEncoding.Default\n (\nUTF-8\n on silverlight)\n\n\n\n\n\n\nlineEnding\n - Line ending mode.\n\nPossible values:\n\n\n\n\nCR - Insert CR character (ASCII 13) after each line.\n\n\nCRLF - Insert CR LF sequence (ASCII 13, ASCII 10) after each line.\n\n\nDefault - Insert platform-dependent end-of-line sequence after each line.\n\n\nLF - Insert LF character (ASCII 10) after each line.\n\n\nNone - Don't insert any line ending.\n\n\n\n\nArchival Options\n\n\n\n\n\n\narchiveAboveSize\n - Size in bytes above which log files will be automatically archived. \nLong\n\nCaution: Enabling this option can considerably slow down your file logging in multi-process scenarios. If only one process is going to be writing to the file, consider setting ConcurrentWrites to false for maximum performance. \n\nWarning: combining this mode with \nArchive Numbering Date\n is not supported. Archive files are not merged. \nDateAndSequence\n will work\n\n\n\n\n\n\nmaxArchiveFiles\n - Maximum number of archive files that should be kept. If \nmaxArchiveFiles\n is less or equal to 0, old files aren't deleted \nInteger\n Default: 0  \n\n\n\n\n\n\narchiveFileName\n - Name of the file to be used for an archive. \nLayout\n\nIt may contain a special placeholder {#####} that will be replaced with a sequence of numbers depending on the archiving strategy. The number of hash characters used determines the number of numerical digits to be used for numbering files.\n\n\nwarning\n when deleting archives files is enabled (e.g. \nmaxArchiveFiles\n ), the folder of the archives should different than the log files.\n\n\n\n\n\n\narchiveNumbering\n - Way file archives are numbered. See also \nArchive Numbering Examples\n \n\nPossible values:\n\n\n\n\nRolling - Rolling style numbering (the most recent is always #0 then #1, ..., #N).\n\n\nSequence - Sequence style numbering. The most recent archive has the highest number.\n\n\nDate - Date style numbering. The date is formatted according to the value of \narchiveDateFormat\n. \nWarning: combining this mode with \narchiveAboveSize\n is not supported. Archive files are not merged.  \n\n\n\n\nDateAndSequence - Combination of \nDate\n and \nSequence\n .Archives will be stamped with the prior period (Year, Month, Day) datetime.\n     The most recent archive has the highest number (in combination with the date). The date is formatted according to the value of \narchiveDateFormat\n.\n\n\n\n\n\n\narchiveEvery\n - Indicates whether to automatically archive log files every time the specified time passes.\n\nPossible values:\n\n\n\n\nDay - Archive daily.\n\n\nHour - Archive every hour.\n\n\nMinute - Archive every minute.\n\n\nMonth - Archive every month.\n\n\nNone - Don't archive based on time.\n\n\nYear - Archive every year.\n\n\nSunday - Archive every Sunday. Introduced in NLog 4.4.4.\n\n\nMonday - Archive every Monday. Introduced in NLog 4.4.4.\n\n\nTuesday - Archive every Tuesday. Introduced in NLog 4.4.4.\n\n\nWednesday - Archive every Wednesday. Introduced in NLog 4.4.4.\n\n\nThursday - Archive every Thursday. Introduced in NLog 4.4.4.\n\n\nFriday - Archive every Friday. Introduced in NLog 4.4.4.\n\n\n\n\nSaturday - Archive every Saturday. Introduced in NLog 4.4.4.\n\n\n\n\nFiles are moved to the archive as part of the write operation if the current period of time changes. For example if > the current hour changes from 10 to 11, the first write that will occur on or after 11:00 will trigger the\narchiving. Caution: Enabling this option can considerably slow down your file logging in multi-process scenarios. If > only one process is going to be writing to the file, consider setting ConcurrentWrites to false for maximum\nperformance.\n\n\n\n\n\n\n\n\narchiveDateFormat\n - Specifies the date format used for archive numbering. Default format depends on the archive period. This option works only when the \"ArchiveNumbering\" parameter is set to Date or DateAndSequence\n\n\n\n\n\n\nArchiveOldFileOnStartup\n - Achive old log file on startup.\n\n\n\n\n\n\nOutput Options\n\n\n\n\n\n\nreplaceFileContentsOnEachWrite\n - Indicates whether to replace file contents on each write instead of appending log message at the end. \nBoolean\n Default: False  \n\n\n\n\n\n\nfileAttributes\n - File attributes (Windows only).\n\nPossible values:\n\n\n\n\nArchive - File should be archived.\n\n\n~~Compressed~~ - Compress won't work due to .Net restrictions. You can use enableArchiveFileCompression.\n\n\nDeleteOnClose - Delete file after it is closed.\n\n\nDevice - Device file.\n\n\nEncrypted - Encrypted file.\n\n\nHidden - Hidden file.\n\n\nNoBuffering - The system opens a file with no system caching.\n\n\nNormal - Normal file.\n\n\nNotContentIndexed - File should not be indexed by the content indexing service.\n\n\nPosixSemantics - A file is accessed according to POSIX rules.\n\n\nReadonly - Read-only\n\n\nReadOnly - Read-only file.\n\n\nReparsePoint - Reparse point.\n\n\nSparseFile - Sparse file.\n\n\nSystem - System file.\n\n\nTemporary - File is temporary (should be kept in cache and not written to disk if possible).\n\n\n\n\nWriteThrough - The system writes through any intermediate cache and goes directly to disk.\n    > This parameter is not supported in:\n    > * Silverlight 4.0\n\n\n\n\n\n\nfileName\n - Name of the file to write to. \nLayout\n Required.\n\nThis FileName string is a layout which may include instances of layout renderers. This lets you use a single target to write to multiple files.\n\nThe following value makes NLog write logging events to files based on the log level in the directory where the application runs. \n${basedir}/${level}.log\n All Debug messages will go to \nDebug.log\n, all Info messages will go to \nInfo.log\n and so on. You can combine as many of the layout renderers as you want to produce an arbitrary log file name. Since NLog 4.3 the \n${basedir}\n isn't needed anymore for relative paths.\n\n\n\n\n\n\ndeleteOldFileOnStartup\n - Indicates whether to delete old log file on startup. \nBoolean\n Default: False. This option works only when the \"FileName\" parameter denotes a single file.\n\n\n\n\n\n\nenableFileDelete\n - Indicates whether to enable log file(s) to be deleted. \nBoolean\n Default: True  \n\n\n\n\n\n\ncreateDirs\n - Indicates whether to create directories if they don't exist. \nBoolean\n Default: True\n\nSetting this to false may improve performance a bit, but you'll receive an error when attempting to write to a directory that's not present.\n\n\n\n\n\n\nenableArchiveFileCompression\n - Indicates whether to compress the archive files into the zip files. \nBoolean\n Default: False\n    > Supported in:\n    > * NLog v4.0 for .NET 4.5\n\n\n\n\n\n\nwriteFooterOnArchivingOnly\n - Indicates whether the footer should be written only when the file is archived. If \nFalse\n, the footer will also be written when starting to write to a different file and when the target is closed \nBoolean\n Default: False\n\n\n\n\n\n\nPerformance Tuning Options\n\n\n\n\n\n\nkeepFileOpen\n - Indicates whether to keep log file open instead of opening and closing it on each logging event. Changing this property to true will improve performance a lot, but will also keep the file handle locked. Consider setting \nopenFileCacheTimeout\n = 30 when enabling this, as it will allow archive operations and react to log file being deleted. \nBoolean\n Default: False \n\n\n\n\n\n\nconcurrentWrites\n - Enables support for optimized concurrent writes to same log file from multiple processes on the same machine-host, when using \nkeepFileOpen\n = true. By using a special technique that lets it keep the files open from multiple processes. If only single process (and single AppDomain) application is logging, then it is faster to set to \nconcurrentWrites\n = False.  \nBoolean\n Default: True\n\n\n\n\n\n\nopenFileCacheTimeout\n - Maximum number of seconds that files are kept open. If this number is negative the files are not automatically closed after a period of inactivity. \nInteger\n Default: -1  \n\n\n\n\n\n\nopenFileCacheSize\n - Number of files to be kept open. Setting this to a higher value may improve performance in a situation where a single File target is writing to many files (such as splitting by level or by logger). \nInteger\n Default: 5\n\nThe files are managed on a LRU (least recently used) basis, which flushes the files that have not been used for the longest period of time should the cache become full. As a rule of thumb, you shouldn't set this parameter to a very high value. A number like 10-15 shouldn't be exceeded, because you'd be keeping a large number of files open which consumes system resources.\n\n\n\n\n\n\noptimizeBufferReuse\n - Instead of allocating new buffers for every file write and for each layout rendering of log message, then it reuse the same buffers. \nBoolean\n Default: True. Introduced in NLog 4.4.2\n\n\n\n\n\n\nnetworkWrites\n - Indicates whether concurrent writes to the log file by multiple processes on different network hosts. \nBoolean\n Default: False\n\nThis effectively prevents files from being kept open.\n\n\n\n\n\n\nconcurrentWriteAttemptDelay\n - Delay in milliseconds to wait before attempting to write to the file again. \nInteger\n Default: 1\n\nThe actual delay is a random value between 0 and the value specified in this parameter. On each failed attempt the delay base is doubled up to ConcurrentWriteAttempts times.\n\nAssuming that ConcurrentWriteAttemptDelay is 10 the time to wait will be: a random value between 0 and 10 milliseconds - 1st attempt a random value between 0 and 20 milliseconds - 2nd attempt a random value between 0 and 40 milliseconds - 3rd attempt a random value between 0 and 80 milliseconds - 4th attempt ... and so on.\n\n\n\n\n\n\nconcurrentWriteAttempts\n - Number of times the write is appended on the file before NLog discards the log message. \nInteger\n Default: 10  \n\n\n\n\n\n\ncleanupFileName\n - before writing to a file, the name of the file get checked for illegal characters (OS dependent). This can be costly if a lot of messages are written. The cleanup is cached for fixed names (no layout renderers). Set this to \nfalse\n for optimal performance (but beware of the file name, if it's wrong, nothing gets written). Default: \ntrue\n. Introduced in NLog 4.2.3.\n\n\n\n\n\n\nbufferSize\n - Log file buffer size in bytes. \nInteger\n Default: 32768  \n\n\n\n\n\n\nautoFlush\n - Indicates whether to automatically flush the file buffers after each log message. \nBoolean\n Default: True  \n\n\n\n\n\n\nExamples\n\n\nSimple logging\n\n\nThe simplest use of File target is to produce single log file. In order to do this, put the following code in the configuration file such as NLog.config. Logs wil be written to logfile.txt in logs directory.\n\n\n<?xml version=\"1.0\" ?>\n<nlog xmlns=\"http://www.nlog-project.org/schemas/NLog.xsd\"\n      xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n\n    <targets>\n        <target name=\"file\" xsi:type=\"File\"\n            layout=\"${longdate} ${logger} ${message}\" \n            fileName=\"${basedir}/logs/logfile.txt\" \n            keepFileOpen=\"false\"\n            encoding=\"iso-8859-2\" />\n    </targets>\n\n    <rules>\n        <logger name=\"*\" minlevel=\"Debug\" writeTo=\"file\" />\n    </rules>\n</nlog>\n\n\n\n\nPer-level log files\n\n\nSingle File target can be used to write to multiple files at once. The following configuration will cause log entries for each log level to be written to a separate file, so you will get:\n * Trace.log\n * Debug.log\n * Info.log\n * Warn.log\n * Error.log\n * Fatal.log\n\n\n<?xml version=\"1.0\" ?>\n<nlog xmlns=\"http://www.nlog-project.org/schemas/NLog.xsd\"\n      xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n\n    <targets>\n        <target name=\"file\" xsi:type=\"File\"\n            layout=\"${longdate} ${logger} ${message}\" \n            fileName=\"${basedir}/${level}.log\" />\n    </targets>\n\n    <rules>\n        <logger name=\"*\" minlevel=\"Debug\" writeTo=\"file\" />\n    </rules>\n</nlog>\n\n\n\n\nOne log file per day\n\n\nThe following configuration will create one log file for each day. Log files will be named:\n * 2010-06-05.log\n * 2010-06-06.log\n * 2010-06-07.log\n * 2010-06-08.log\n * ...\n\n\n<?xml version=\"1.0\" ?>\n<nlog xmlns=\"http://www.nlog-project.org/schemas/NLog.xsd\"\n      xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n\n    <targets>\n        <target name=\"file\" xsi:type=\"File\"\n            layout=\"${longdate} ${logger} ${message}\" \n            fileName=\"${basedir}/${shortdate}.log\" />\n    </targets>\n\n    <rules>\n        <logger name=\"*\" minlevel=\"Debug\" writeTo=\"file\" />\n    </rules>\n</nlog>\n\n\n\n\nAsynchronous logging\n\n\nDepending on your usage scenario it may be useful to add an AsyncWrapper target the file target. This way all your log messages will be written on a separate thread so your main thread can be unblocked more quickly. Asynchronous logging is recommended for multi-threaded server applications which run for a long time and is not recommended for quickly-finishing command line applications.\n\n\n<?xml version=\"1.0\" ?>\n<nlog xmlns=\"http://www.nlog-project.org/schemas/NLog.xsd\"\n      xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n\n    <targets>\n        <!-- Log in a separate thread, possibly queueing up to\n        5000 messages. When the queue overflows, discard any\n        extra messages-->\n\n        <target name=\"file\" xsi:type=\"AsyncWrapper\" queueLimit=\"5000\" overflowAction=\"Discard\">\n            <target xsi:type=\"File\" fileName=\"${basedir}/logs/${level}.txt\" />\n        </target>\n    </targets>\n\n    <rules>\n        <logger name=\"*\" minlevel=\"Debug\" writeTo=\"file\" />\n    </rules>\n</nlog>\n\n\n\n\nCreating comma-separated log file (CSV)\n\n\nIn order to create comma-separated files (CSV), use the following configuration, which utilizes CsvLayout. The resulting file will have 4 columns and will be formatted according to CSV rules:\n\n\n<?xml version=\"1.0\" ?>\n<nlog xmlns=\"http://www.nlog-project.org/schemas/NLog.xsd\"\n      xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n    <targets>\n        <target name=\"csv\" xsi:type=\"File\" fileName=\"${basedir}/file.csv\">\n            <layout xsi:type=\"CSVLayout\">\n                <column name=\"time\" layout=\"${longdate}\" />\n                <column name=\"message\" layout=\"${message}\" />\n                <column name=\"logger\" layout=\"${logger}\"/>\n                <column name=\"level\" layout=\"${level}\"/>\n            </layout>\n        </target>\n    </targets>\n\n    <rules>\n        <logger name=\"*\" minlevel=\"Debug\" writeTo=\"csv\" />\n    </rules>\n</nlog>\n\n\n\n\nSize-based file archival\n\n\nLog files can be automatically archived by moving them to another location after reaching certain size. The following configuration will create logs/logfile.txt which will be archived to archives/log.000000.txt', archives/log.000001.txt', archives/log.000002.txt' and so on once the main log file reaches 10KB.\n\n\n<?xml version=\"1.0\" ?>\n<nlog xmlns=\"http://www.nlog-project.org/schemas/NLog.xsd\"\n      xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n\n    <targets>\n        <target name=\"file\" xsi:type=\"File\"\n            layout=\"${longdate} ${logger} ${message}\" \n            fileName=\"${basedir}/logs/logfile.txt\" \n            archiveFileName=\"${basedir}/archives/log.{#####}.txt\"\n            archiveAboveSize=\"10240\"\n            archiveNumbering=\"Sequence\"\n            concurrentWrites=\"true\"\n            keepFileOpen=\"false\"\n            encoding=\"iso-8859-2\" />\n    </targets>\n\n    <rules>\n        <logger name=\"*\" minlevel=\"Debug\" writeTo=\"file\" />\n    </rules>\n</nlog>\n\n\n\n\nTime-based file archival\n\n\nLog files can also be automatically archived based on time. This configuration will archive a file at the beginning of each day and will use rolling file naming, so log file from the previous day can always be found in archives//log.0.txt, log from two days ago is in archives//log.1.txt and so on. This configuration will keep at most 7 archive files, so logs older than one week will be automatically deleted.\n\n\n<?xml version=\"1.0\" ?>\n<nlog xmlns=\"http://www.nlog-project.org/schemas/NLog.xsd\"\n      xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n\n    <targets>\n        <target name=\"file\" xsi:type=\"File\"\n            layout=\"${longdate} ${logger} ${message}\" \n            fileName=\"${basedir}/logs/logfile.txt\" \n            archiveFileName=\"${basedir}/archives/log.{#}.txt\"\n            archiveEvery=\"Day\"\n            archiveNumbering=\"Rolling\"\n            maxArchiveFiles=\"7\"\n            concurrentWrites=\"true\"\n            keepFileOpen=\"false\"\n            encoding=\"iso-8859-2\" />\n    </targets>\n\n    <rules>\n        <logger name=\"*\" minlevel=\"Debug\" writeTo=\"file\" />\n    </rules>\n</nlog>\n\n\n\n\nArchive every Week\n\n\nYou can specify different archival time periods. For example, if you wanted to archive once a week on Tuesdays,\nyou would set \narchiveEvery=\"Tuesday\"\n. Possible values for \narchiveEvery\n can be found above. This will result in\nthe following files being created:\n+ logfile.txt           // the current log being written to\n+ logfile.20170307.txt\n+ logfile.20170314.txt\n+ logfile.20170321.txt\n+ etc.\n\n\n<?xml version=\"1.0\" ?>\n<nlog xmlns=\"http://www.nlog-project.org/schemas/NLog.xsd\"\n      xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n\n    <targets>\n        <target name=\"file\" xsi:type=\"File\"\n            layout=\"${longdate} ${logger} ${message}\" \n            fileName=\"${basedir}/logs/logfile.txt\" \n            archiveFileName=\"${basedir}/archives/logfile.{#}.txt\"\n            archiveEvery=\"Tuesday\"\n            maxArchiveFiles=\"7\" />\n    </targets>\n\n    <rules>\n        <logger name=\"*\" minlevel=\"Debug\" writeTo=\"file\" />\n    </rules>\n</nlog>\n\n\n\n\nArchive Numbering Examples\n\n\nRolling\n\n\n        <target name=\"file\" xsi:type=\"File\"\n            ...\n            fileName=\"file.txt\"\n            archiveFileName=\"log.{####}.txt\"\n            archiveNumbering=\"Rolling\"  />\n\n\n\n\n\nExample of file names (newest files first):\n\n\n\n\nfile.txt\n\n\nlog.0000.txt\n\n\nlog.0001.txt\n\n\nlog.0002.txt\n\n\n\n\nSequence\n\n\n        <target name=\"file\" xsi:type=\"File\"\n            ...\n            fileName=\"file.txt\"\n            archiveFileName=\"log.{####}.txt\"\n            archiveNumbering=\"Sequence\"  />\n\n\n\n\n\nExample of file names (newest files first):\n\n\n\n\nfile.txt\n\n\nlog.0002.txt\n\n\nlog.0001.txt\n\n\nlog.0000.txt\n\n\n\n\nDate\n\n\n        <target name=\"file\" xsi:type=\"File\"\n            ...\n            fileName=\"file.txt\"\n            archiveFileName=\"log.{#}.txt\"\n            archiveNumbering=\"Date\"\n            archiveEvery=\"Day\"\n            archiveDateFormat=\"yyyyMMdd\"\n  />\n\n\n\n\n\nExample of file names (newest files first):\n\n\n\n\nfile.txt\n\n\nlog.20150731.txt\n\n\nlog.20150730.txt\n\n\n\n\nDateAndSequence\n\n\n        <target name=\"file\" xsi:type=\"File\"\n            ...\n            fileName=\"file.txt\"\n            archiveFileName=\"log.{#}.txt\"\n            archiveNumbering=\"DateAndSequence\"\n            archiveAboveSize=\"1000\"\n            archiveDateFormat=\"yyyyMMdd\"\n  />\n\n\n\n\n\nExample of file names (newest files first):\n\n\n\n\nfile.txt\n\n\nlog.20150730.3.txt\n\n\nlog.20150730.2.txt\n\n\nlog.20150730.1.txt",
            "title": "File target"
        },
        {
            "location": "/File-target/#configuration-syntax",
            "text": "<targets>\n  <target xsi:type=\"File\"\n          name=\"String\"\n          layout=\"Layout\"\n          header=\"Layout\"\n          footer=\"Layout\"\n          encoding=\"Encoding\"\n          lineEnding=\"Enum\"\n          archiveAboveSize=\"Long\"\n          maxArchiveFiles=\"Integer\"\n          archiveFileName=\"Layout\"\n          archiveNumbering=\"Enum\"\n          archiveDateFormat=\"String\"\n          archiveEvery=\"Enum\"          \n          archiveOldFileOnStartup=\"Boolean\"\n          replaceFileContentsOnEachWrite=\"Boolean\"\n          fileAttributes=\"Enum\"\n          fileName=\"Layout\"\n          deleteOldFileOnStartup=\"Boolean\"\n          enableFileDelete=\"Boolean\"\n          createDirs=\"Boolean\"\n          concurrentWrites=\"Boolean\"\n          openFileCacheTimeout=\"Integer\"\n          openFileCacheSize=\"Integer\"\n          networkWrites=\"Boolean\"\n          concurrentWriteAttemptDelay=\"Integer\"\n          concurrentWriteAttempts=\"Integer\"\n          bufferSize=\"Integer\"\n          autoFlush=\"Boolean\"\n          keepFileOpen=\"Boolean\"\n          forceManaged=\"Boolean\"\n          enableArchiveFileCompression=\"Boolean\"\n          cleanupFileName=\"Boolean\"\n          writeFooterOnArchivingOnly=\"Boolean\"  />\n</targets>  Read more about using the  Configuration File .",
            "title": "Configuration Syntax"
        },
        {
            "location": "/File-target/#parameters",
            "text": "",
            "title": "Parameters"
        },
        {
            "location": "/File-target/#general-options",
            "text": "name  - Name of the target.    forceManaged  - Indicates that the file target should only use managed methods. This disables some of the options.",
            "title": "General Options"
        },
        {
            "location": "/File-target/#layout-options",
            "text": "layout  - Text to be rendered.  Layout  Required. Default:  ${longdate}|${level:uppercase=true}|${logger}|${message}    header  - Header.  Layout       footer  - Footer.  Layout    encoding  - File encoding name like \"utf-8\", \"ascii\" or \"utf-16\". See  Encoding class on MSDN . Defaults to  Encoding.Default  ( UTF-8  on silverlight)    lineEnding  - Line ending mode. \nPossible values:   CR - Insert CR character (ASCII 13) after each line.  CRLF - Insert CR LF sequence (ASCII 13, ASCII 10) after each line.  Default - Insert platform-dependent end-of-line sequence after each line.  LF - Insert LF character (ASCII 10) after each line.  None - Don't insert any line ending.",
            "title": "Layout Options"
        },
        {
            "location": "/File-target/#archival-options",
            "text": "archiveAboveSize  - Size in bytes above which log files will be automatically archived.  Long \nCaution: Enabling this option can considerably slow down your file logging in multi-process scenarios. If only one process is going to be writing to the file, consider setting ConcurrentWrites to false for maximum performance.  Warning: combining this mode with  Archive Numbering Date  is not supported. Archive files are not merged.  DateAndSequence  will work    maxArchiveFiles  - Maximum number of archive files that should be kept. If  maxArchiveFiles  is less or equal to 0, old files aren't deleted  Integer  Default: 0      archiveFileName  - Name of the file to be used for an archive.  Layout \nIt may contain a special placeholder {#####} that will be replaced with a sequence of numbers depending on the archiving strategy. The number of hash characters used determines the number of numerical digits to be used for numbering files.  warning  when deleting archives files is enabled (e.g.  maxArchiveFiles  ), the folder of the archives should different than the log files.    archiveNumbering  - Way file archives are numbered. See also  Archive Numbering Examples   \nPossible values:   Rolling - Rolling style numbering (the most recent is always #0 then #1, ..., #N).  Sequence - Sequence style numbering. The most recent archive has the highest number.  Date - Date style numbering. The date is formatted according to the value of  archiveDateFormat .  Warning: combining this mode with  archiveAboveSize  is not supported. Archive files are not merged.     DateAndSequence - Combination of  Date  and  Sequence  .Archives will be stamped with the prior period (Year, Month, Day) datetime.\n     The most recent archive has the highest number (in combination with the date). The date is formatted according to the value of  archiveDateFormat .    archiveEvery  - Indicates whether to automatically archive log files every time the specified time passes. \nPossible values:   Day - Archive daily.  Hour - Archive every hour.  Minute - Archive every minute.  Month - Archive every month.  None - Don't archive based on time.  Year - Archive every year.  Sunday - Archive every Sunday. Introduced in NLog 4.4.4.  Monday - Archive every Monday. Introduced in NLog 4.4.4.  Tuesday - Archive every Tuesday. Introduced in NLog 4.4.4.  Wednesday - Archive every Wednesday. Introduced in NLog 4.4.4.  Thursday - Archive every Thursday. Introduced in NLog 4.4.4.  Friday - Archive every Friday. Introduced in NLog 4.4.4.   Saturday - Archive every Saturday. Introduced in NLog 4.4.4.   Files are moved to the archive as part of the write operation if the current period of time changes. For example if > the current hour changes from 10 to 11, the first write that will occur on or after 11:00 will trigger the\narchiving. Caution: Enabling this option can considerably slow down your file logging in multi-process scenarios. If > only one process is going to be writing to the file, consider setting ConcurrentWrites to false for maximum\nperformance.     archiveDateFormat  - Specifies the date format used for archive numbering. Default format depends on the archive period. This option works only when the \"ArchiveNumbering\" parameter is set to Date or DateAndSequence    ArchiveOldFileOnStartup  - Achive old log file on startup.",
            "title": "Archival Options"
        },
        {
            "location": "/File-target/#output-options",
            "text": "replaceFileContentsOnEachWrite  - Indicates whether to replace file contents on each write instead of appending log message at the end.  Boolean  Default: False      fileAttributes  - File attributes (Windows only). \nPossible values:   Archive - File should be archived.  ~~Compressed~~ - Compress won't work due to .Net restrictions. You can use enableArchiveFileCompression.  DeleteOnClose - Delete file after it is closed.  Device - Device file.  Encrypted - Encrypted file.  Hidden - Hidden file.  NoBuffering - The system opens a file with no system caching.  Normal - Normal file.  NotContentIndexed - File should not be indexed by the content indexing service.  PosixSemantics - A file is accessed according to POSIX rules.  Readonly - Read-only  ReadOnly - Read-only file.  ReparsePoint - Reparse point.  SparseFile - Sparse file.  System - System file.  Temporary - File is temporary (should be kept in cache and not written to disk if possible).   WriteThrough - The system writes through any intermediate cache and goes directly to disk.\n    > This parameter is not supported in:\n    > * Silverlight 4.0    fileName  - Name of the file to write to.  Layout  Required. \nThis FileName string is a layout which may include instances of layout renderers. This lets you use a single target to write to multiple files. \nThe following value makes NLog write logging events to files based on the log level in the directory where the application runs.  ${basedir}/${level}.log  All Debug messages will go to  Debug.log , all Info messages will go to  Info.log  and so on. You can combine as many of the layout renderers as you want to produce an arbitrary log file name. Since NLog 4.3 the  ${basedir}  isn't needed anymore for relative paths.    deleteOldFileOnStartup  - Indicates whether to delete old log file on startup.  Boolean  Default: False. This option works only when the \"FileName\" parameter denotes a single file.    enableFileDelete  - Indicates whether to enable log file(s) to be deleted.  Boolean  Default: True      createDirs  - Indicates whether to create directories if they don't exist.  Boolean  Default: True \nSetting this to false may improve performance a bit, but you'll receive an error when attempting to write to a directory that's not present.    enableArchiveFileCompression  - Indicates whether to compress the archive files into the zip files.  Boolean  Default: False\n    > Supported in:\n    > * NLog v4.0 for .NET 4.5    writeFooterOnArchivingOnly  - Indicates whether the footer should be written only when the file is archived. If  False , the footer will also be written when starting to write to a different file and when the target is closed  Boolean  Default: False",
            "title": "Output Options"
        },
        {
            "location": "/File-target/#performance-tuning-options",
            "text": "keepFileOpen  - Indicates whether to keep log file open instead of opening and closing it on each logging event. Changing this property to true will improve performance a lot, but will also keep the file handle locked. Consider setting  openFileCacheTimeout  = 30 when enabling this, as it will allow archive operations and react to log file being deleted.  Boolean  Default: False     concurrentWrites  - Enables support for optimized concurrent writes to same log file from multiple processes on the same machine-host, when using  keepFileOpen  = true. By using a special technique that lets it keep the files open from multiple processes. If only single process (and single AppDomain) application is logging, then it is faster to set to  concurrentWrites  = False.   Boolean  Default: True    openFileCacheTimeout  - Maximum number of seconds that files are kept open. If this number is negative the files are not automatically closed after a period of inactivity.  Integer  Default: -1      openFileCacheSize  - Number of files to be kept open. Setting this to a higher value may improve performance in a situation where a single File target is writing to many files (such as splitting by level or by logger).  Integer  Default: 5 \nThe files are managed on a LRU (least recently used) basis, which flushes the files that have not been used for the longest period of time should the cache become full. As a rule of thumb, you shouldn't set this parameter to a very high value. A number like 10-15 shouldn't be exceeded, because you'd be keeping a large number of files open which consumes system resources.    optimizeBufferReuse  - Instead of allocating new buffers for every file write and for each layout rendering of log message, then it reuse the same buffers.  Boolean  Default: True. Introduced in NLog 4.4.2    networkWrites  - Indicates whether concurrent writes to the log file by multiple processes on different network hosts.  Boolean  Default: False \nThis effectively prevents files from being kept open.    concurrentWriteAttemptDelay  - Delay in milliseconds to wait before attempting to write to the file again.  Integer  Default: 1 \nThe actual delay is a random value between 0 and the value specified in this parameter. On each failed attempt the delay base is doubled up to ConcurrentWriteAttempts times. \nAssuming that ConcurrentWriteAttemptDelay is 10 the time to wait will be: a random value between 0 and 10 milliseconds - 1st attempt a random value between 0 and 20 milliseconds - 2nd attempt a random value between 0 and 40 milliseconds - 3rd attempt a random value between 0 and 80 milliseconds - 4th attempt ... and so on.    concurrentWriteAttempts  - Number of times the write is appended on the file before NLog discards the log message.  Integer  Default: 10      cleanupFileName  - before writing to a file, the name of the file get checked for illegal characters (OS dependent). This can be costly if a lot of messages are written. The cleanup is cached for fixed names (no layout renderers). Set this to  false  for optimal performance (but beware of the file name, if it's wrong, nothing gets written). Default:  true . Introduced in NLog 4.2.3.    bufferSize  - Log file buffer size in bytes.  Integer  Default: 32768      autoFlush  - Indicates whether to automatically flush the file buffers after each log message.  Boolean  Default: True",
            "title": "Performance Tuning Options"
        },
        {
            "location": "/File-target/#examples",
            "text": "",
            "title": "Examples"
        },
        {
            "location": "/File-target/#simple-logging",
            "text": "The simplest use of File target is to produce single log file. In order to do this, put the following code in the configuration file such as NLog.config. Logs wil be written to logfile.txt in logs directory.  <?xml version=\"1.0\" ?>\n<nlog xmlns=\"http://www.nlog-project.org/schemas/NLog.xsd\"\n      xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n\n    <targets>\n        <target name=\"file\" xsi:type=\"File\"\n            layout=\"${longdate} ${logger} ${message}\" \n            fileName=\"${basedir}/logs/logfile.txt\" \n            keepFileOpen=\"false\"\n            encoding=\"iso-8859-2\" />\n    </targets>\n\n    <rules>\n        <logger name=\"*\" minlevel=\"Debug\" writeTo=\"file\" />\n    </rules>\n</nlog>",
            "title": "Simple logging"
        },
        {
            "location": "/File-target/#per-level-log-files",
            "text": "Single File target can be used to write to multiple files at once. The following configuration will cause log entries for each log level to be written to a separate file, so you will get:\n * Trace.log\n * Debug.log\n * Info.log\n * Warn.log\n * Error.log\n * Fatal.log  <?xml version=\"1.0\" ?>\n<nlog xmlns=\"http://www.nlog-project.org/schemas/NLog.xsd\"\n      xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n\n    <targets>\n        <target name=\"file\" xsi:type=\"File\"\n            layout=\"${longdate} ${logger} ${message}\" \n            fileName=\"${basedir}/${level}.log\" />\n    </targets>\n\n    <rules>\n        <logger name=\"*\" minlevel=\"Debug\" writeTo=\"file\" />\n    </rules>\n</nlog>",
            "title": "Per-level log files"
        },
        {
            "location": "/File-target/#one-log-file-per-day",
            "text": "The following configuration will create one log file for each day. Log files will be named:\n * 2010-06-05.log\n * 2010-06-06.log\n * 2010-06-07.log\n * 2010-06-08.log\n * ...  <?xml version=\"1.0\" ?>\n<nlog xmlns=\"http://www.nlog-project.org/schemas/NLog.xsd\"\n      xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n\n    <targets>\n        <target name=\"file\" xsi:type=\"File\"\n            layout=\"${longdate} ${logger} ${message}\" \n            fileName=\"${basedir}/${shortdate}.log\" />\n    </targets>\n\n    <rules>\n        <logger name=\"*\" minlevel=\"Debug\" writeTo=\"file\" />\n    </rules>\n</nlog>",
            "title": "One log file per day"
        },
        {
            "location": "/File-target/#asynchronous-logging",
            "text": "Depending on your usage scenario it may be useful to add an AsyncWrapper target the file target. This way all your log messages will be written on a separate thread so your main thread can be unblocked more quickly. Asynchronous logging is recommended for multi-threaded server applications which run for a long time and is not recommended for quickly-finishing command line applications.  <?xml version=\"1.0\" ?>\n<nlog xmlns=\"http://www.nlog-project.org/schemas/NLog.xsd\"\n      xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n\n    <targets>\n        <!-- Log in a separate thread, possibly queueing up to\n        5000 messages. When the queue overflows, discard any\n        extra messages-->\n\n        <target name=\"file\" xsi:type=\"AsyncWrapper\" queueLimit=\"5000\" overflowAction=\"Discard\">\n            <target xsi:type=\"File\" fileName=\"${basedir}/logs/${level}.txt\" />\n        </target>\n    </targets>\n\n    <rules>\n        <logger name=\"*\" minlevel=\"Debug\" writeTo=\"file\" />\n    </rules>\n</nlog>",
            "title": "Asynchronous logging"
        },
        {
            "location": "/File-target/#creating-comma-separated-log-file-csv",
            "text": "In order to create comma-separated files (CSV), use the following configuration, which utilizes CsvLayout. The resulting file will have 4 columns and will be formatted according to CSV rules:  <?xml version=\"1.0\" ?>\n<nlog xmlns=\"http://www.nlog-project.org/schemas/NLog.xsd\"\n      xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n    <targets>\n        <target name=\"csv\" xsi:type=\"File\" fileName=\"${basedir}/file.csv\">\n            <layout xsi:type=\"CSVLayout\">\n                <column name=\"time\" layout=\"${longdate}\" />\n                <column name=\"message\" layout=\"${message}\" />\n                <column name=\"logger\" layout=\"${logger}\"/>\n                <column name=\"level\" layout=\"${level}\"/>\n            </layout>\n        </target>\n    </targets>\n\n    <rules>\n        <logger name=\"*\" minlevel=\"Debug\" writeTo=\"csv\" />\n    </rules>\n</nlog>",
            "title": "Creating comma-separated log file (CSV)"
        },
        {
            "location": "/File-target/#size-based-file-archival",
            "text": "Log files can be automatically archived by moving them to another location after reaching certain size. The following configuration will create logs/logfile.txt which will be archived to archives/log.000000.txt', archives/log.000001.txt', archives/log.000002.txt' and so on once the main log file reaches 10KB.  <?xml version=\"1.0\" ?>\n<nlog xmlns=\"http://www.nlog-project.org/schemas/NLog.xsd\"\n      xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n\n    <targets>\n        <target name=\"file\" xsi:type=\"File\"\n            layout=\"${longdate} ${logger} ${message}\" \n            fileName=\"${basedir}/logs/logfile.txt\" \n            archiveFileName=\"${basedir}/archives/log.{#####}.txt\"\n            archiveAboveSize=\"10240\"\n            archiveNumbering=\"Sequence\"\n            concurrentWrites=\"true\"\n            keepFileOpen=\"false\"\n            encoding=\"iso-8859-2\" />\n    </targets>\n\n    <rules>\n        <logger name=\"*\" minlevel=\"Debug\" writeTo=\"file\" />\n    </rules>\n</nlog>",
            "title": "Size-based file archival"
        },
        {
            "location": "/File-target/#time-based-file-archival",
            "text": "Log files can also be automatically archived based on time. This configuration will archive a file at the beginning of each day and will use rolling file naming, so log file from the previous day can always be found in archives//log.0.txt, log from two days ago is in archives//log.1.txt and so on. This configuration will keep at most 7 archive files, so logs older than one week will be automatically deleted.  <?xml version=\"1.0\" ?>\n<nlog xmlns=\"http://www.nlog-project.org/schemas/NLog.xsd\"\n      xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n\n    <targets>\n        <target name=\"file\" xsi:type=\"File\"\n            layout=\"${longdate} ${logger} ${message}\" \n            fileName=\"${basedir}/logs/logfile.txt\" \n            archiveFileName=\"${basedir}/archives/log.{#}.txt\"\n            archiveEvery=\"Day\"\n            archiveNumbering=\"Rolling\"\n            maxArchiveFiles=\"7\"\n            concurrentWrites=\"true\"\n            keepFileOpen=\"false\"\n            encoding=\"iso-8859-2\" />\n    </targets>\n\n    <rules>\n        <logger name=\"*\" minlevel=\"Debug\" writeTo=\"file\" />\n    </rules>\n</nlog>",
            "title": "Time-based file archival"
        },
        {
            "location": "/File-target/#archive-every-week",
            "text": "You can specify different archival time periods. For example, if you wanted to archive once a week on Tuesdays,\nyou would set  archiveEvery=\"Tuesday\" . Possible values for  archiveEvery  can be found above. This will result in\nthe following files being created:\n+ logfile.txt           // the current log being written to\n+ logfile.20170307.txt\n+ logfile.20170314.txt\n+ logfile.20170321.txt\n+ etc.  <?xml version=\"1.0\" ?>\n<nlog xmlns=\"http://www.nlog-project.org/schemas/NLog.xsd\"\n      xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n\n    <targets>\n        <target name=\"file\" xsi:type=\"File\"\n            layout=\"${longdate} ${logger} ${message}\" \n            fileName=\"${basedir}/logs/logfile.txt\" \n            archiveFileName=\"${basedir}/archives/logfile.{#}.txt\"\n            archiveEvery=\"Tuesday\"\n            maxArchiveFiles=\"7\" />\n    </targets>\n\n    <rules>\n        <logger name=\"*\" minlevel=\"Debug\" writeTo=\"file\" />\n    </rules>\n</nlog>",
            "title": "Archive every Week"
        },
        {
            "location": "/File-target/#archive-numbering-examples",
            "text": "",
            "title": "Archive Numbering Examples"
        },
        {
            "location": "/File-target/#rolling",
            "text": "<target name=\"file\" xsi:type=\"File\"\n            ...\n            fileName=\"file.txt\"\n            archiveFileName=\"log.{####}.txt\"\n            archiveNumbering=\"Rolling\"  />  Example of file names (newest files first):   file.txt  log.0000.txt  log.0001.txt  log.0002.txt",
            "title": "Rolling"
        },
        {
            "location": "/File-target/#sequence",
            "text": "<target name=\"file\" xsi:type=\"File\"\n            ...\n            fileName=\"file.txt\"\n            archiveFileName=\"log.{####}.txt\"\n            archiveNumbering=\"Sequence\"  />  Example of file names (newest files first):   file.txt  log.0002.txt  log.0001.txt  log.0000.txt",
            "title": "Sequence"
        },
        {
            "location": "/File-target/#date",
            "text": "<target name=\"file\" xsi:type=\"File\"\n            ...\n            fileName=\"file.txt\"\n            archiveFileName=\"log.{#}.txt\"\n            archiveNumbering=\"Date\"\n            archiveEvery=\"Day\"\n            archiveDateFormat=\"yyyyMMdd\"\n  />  Example of file names (newest files first):   file.txt  log.20150731.txt  log.20150730.txt",
            "title": "Date"
        },
        {
            "location": "/File-target/#dateandsequence",
            "text": "<target name=\"file\" xsi:type=\"File\"\n            ...\n            fileName=\"file.txt\"\n            archiveFileName=\"log.{#}.txt\"\n            archiveNumbering=\"DateAndSequence\"\n            archiveAboveSize=\"1000\"\n            archiveDateFormat=\"yyyyMMdd\"\n  />  Example of file names (newest files first):   file.txt  log.20150730.3.txt  log.20150730.2.txt  log.20150730.1.txt",
            "title": "DateAndSequence"
        },
        {
            "location": "/FilteringWrapper-target/",
            "text": "Filters log entries based on a condition. \n\n\nSupported in .NET, Silverlight, Compact Framework and Mono.\n\n\nConfiguration Syntax\n\n\n<targets>\n  <target xsi:type=\"FilteringWrapper\" name=\"String\" condition=\"Condition\">\n    <target xsi:type=\"wrappedTargetType\" ...target properties... />\n  </target>\n</targets>\n\n\n\n\nParameters\n\n\nGeneral Options\n\n\n\n\nname\n - Name of the target.\n\n\n\n\nFiltering Options\n\n\n\n\ncondition\n - Condition expression. Log events who meet this condition will be forwarded to the wrapped target. Condition Required.",
            "title": "FilteringWrapper target"
        },
        {
            "location": "/FilteringWrapper-target/#configuration-syntax",
            "text": "<targets>\n  <target xsi:type=\"FilteringWrapper\" name=\"String\" condition=\"Condition\">\n    <target xsi:type=\"wrappedTargetType\" ...target properties... />\n  </target>\n</targets>",
            "title": "Configuration Syntax"
        },
        {
            "location": "/FilteringWrapper-target/#parameters",
            "text": "",
            "title": "Parameters"
        },
        {
            "location": "/FilteringWrapper-target/#general-options",
            "text": "name  - Name of the target.",
            "title": "General Options"
        },
        {
            "location": "/FilteringWrapper-target/#filtering-options",
            "text": "condition  - Condition expression. Log events who meet this condition will be forwarded to the wrapped target. Condition Required.",
            "title": "Filtering Options"
        },
        {
            "location": "/FormControl-target/",
            "text": "Logs text to Windows.Forms.Control.Text property control of specified Name. \n\n\nSupported in .NET\n\n\nConfiguration Syntax\n\n\n<targets>\n  <target xsi:type=\"FormControl\"\n          name=\"String\"\n          layout=\"Layout\"\n          append=\"Boolean\"\n          reverseOrder=\"Boolean\"\n          controlName=\"String\"\n          formName=\"String\" />\n</targets>\n\n\n\n\nRead more about using the \nConfiguration File\n.\n\n\nParameters\n\n\nGeneral Options\n\n\n\n\nname\n - Name of the target.\n\n\n\n\nLayout Options\n\n\n\n\nlayout\n - Layout used to format log messages. \nLayout\n Required. Default: ${longdate}|${level:uppercase=true}|${logger}|${message}\n\n\n\n\nForm Options\n\n\n\n\n\n\nappend\n - Indicates whether log text should be appended to the text of the control instead of overwriting it. \nBoolean\n Default: True\n\n\n\n\n\n\nreverseOrder\n - Indicates whether log text should be appended or prepended. \nBoolean\n Default: False\n\n\n\n\n\n\ncontrolName\n - Name of control to which NLog will log write log text. Required.\n\n\n\n\n\n\nformName\n - Name of the Form on which the control is located.",
            "title": "FormControl target"
        },
        {
            "location": "/FormControl-target/#configuration-syntax",
            "text": "<targets>\n  <target xsi:type=\"FormControl\"\n          name=\"String\"\n          layout=\"Layout\"\n          append=\"Boolean\"\n          reverseOrder=\"Boolean\"\n          controlName=\"String\"\n          formName=\"String\" />\n</targets>  Read more about using the  Configuration File .",
            "title": "Configuration Syntax"
        },
        {
            "location": "/FormControl-target/#parameters",
            "text": "",
            "title": "Parameters"
        },
        {
            "location": "/FormControl-target/#general-options",
            "text": "name  - Name of the target.",
            "title": "General Options"
        },
        {
            "location": "/FormControl-target/#layout-options",
            "text": "layout  - Layout used to format log messages.  Layout  Required. Default: ${longdate}|${level:uppercase=true}|${logger}|${message}",
            "title": "Layout Options"
        },
        {
            "location": "/FormControl-target/#form-options",
            "text": "append  - Indicates whether log text should be appended to the text of the control instead of overwriting it.  Boolean  Default: True    reverseOrder  - Indicates whether log text should be appended or prepended.  Boolean  Default: False    controlName  - Name of control to which NLog will log write log text. Required.    formName  - Name of the Form on which the control is located.",
            "title": "Form Options"
        },
        {
            "location": "/ImpersonatingWrapper-target/",
            "text": "Impersonates another user for the duration of the write. \n\n\nSupported in .NET and Mono\n\n\nConfiguration Syntax\n\n\n<targets>\n  <target xsi:type=\"ImpersonatingWrapper\"\n          name=\"String\"\n          userName=\"String\"\n          password=\"String\"\n          revertToSelf=\"Boolean\"\n          impersonationLevel=\"Enum\"\n          domain=\"String\"\n          logOnType=\"Enum\"\n          logOnProvider=\"Enum\">\n    <target xsi:type=\"wrappedTargetType\" ...target properties... />\n  </target>\n</targets>\n\n\n\n\nParameters\n\n\nGeneral Options\n\n\n\n\nname\n - Name of the target.\n\n\n\n\nImpersonation Options\n\n\n\n\n\n\nuserName\n - Username to change context to.\n\n\n\n\n\n\npassword\n - User account password.\n\n\n\n\n\n\nrevertToSelf\n - Indicates whether to revert to the credentials of the process instead of impersonating another user. Boolean Default: False\n\n\n\n\n\n\nimpersonationLevel\n - Required impersonation level.\n\nPossible values:  \n\n\n\n\nAnonymous - Anonymous Level.\n\n\nDelegation - Delegation Level.\n\n\nIdentification - Identification Level.\n\n\n\n\nImpersonation - Impersonation Level.\n\n\n\n\n\n\ndomain\n - Windows domain name to change context to. Default: .\n\n\n\n\n\n\nlogOnType\n - Logon Type.\n\nPossible values:  \n\n\n\n\nBatch - Batch Logon.\n\n\nInteractive - Interactive Logon.\n\n\nNetwork - Network Logon.\n\n\nNetworkClearText - Network Clear Text Logon.\n\n\nNewCredentials - New Network Credentials.\n\n\n\n\nService - Logon as a Service.\n\n\n\n\n\n\nlogOnProvider\n - Type of the logon provider.\n\nPossible values:  \n\n\n\n\nDefault - Use the standard logon provider for the system.",
            "title": "ImpersonatingWrapper target"
        },
        {
            "location": "/ImpersonatingWrapper-target/#configuration-syntax",
            "text": "<targets>\n  <target xsi:type=\"ImpersonatingWrapper\"\n          name=\"String\"\n          userName=\"String\"\n          password=\"String\"\n          revertToSelf=\"Boolean\"\n          impersonationLevel=\"Enum\"\n          domain=\"String\"\n          logOnType=\"Enum\"\n          logOnProvider=\"Enum\">\n    <target xsi:type=\"wrappedTargetType\" ...target properties... />\n  </target>\n</targets>",
            "title": "Configuration Syntax"
        },
        {
            "location": "/ImpersonatingWrapper-target/#parameters",
            "text": "",
            "title": "Parameters"
        },
        {
            "location": "/ImpersonatingWrapper-target/#general-options",
            "text": "name  - Name of the target.",
            "title": "General Options"
        },
        {
            "location": "/ImpersonatingWrapper-target/#impersonation-options",
            "text": "userName  - Username to change context to.    password  - User account password.    revertToSelf  - Indicates whether to revert to the credentials of the process instead of impersonating another user. Boolean Default: False    impersonationLevel  - Required impersonation level. \nPossible values:     Anonymous - Anonymous Level.  Delegation - Delegation Level.  Identification - Identification Level.   Impersonation - Impersonation Level.    domain  - Windows domain name to change context to. Default: .    logOnType  - Logon Type. \nPossible values:     Batch - Batch Logon.  Interactive - Interactive Logon.  Network - Network Logon.  NetworkClearText - Network Clear Text Logon.  NewCredentials - New Network Credentials.   Service - Logon as a Service.    logOnProvider  - Type of the logon provider. \nPossible values:     Default - Use the standard logon provider for the system.",
            "title": "Impersonation Options"
        },
        {
            "location": "/Installing-targets/",
            "text": "Some targets support installing. Current the following targets support installing\n\n\n\n\nDatabase target\n\n\nEventLogger target\n\n\nPerformanceCounter target\n\n\n\n\nInstall\n\n\nInstall all targets used in the config:\n\n\nLogManager.Configuration.Install(new InstallationContext());\n\n\n\n\nUninstall\n\n\nUninstall all targets used in the config:\n\n\nLogManager.Configuration.Uninstall(new InstallationContext());\n\n\n\n\nExample install database target\n\n\n<target xsi:type=\"Database\" name=\"db\"\n        connectionStringName=\"LoggingDatabase\">\n    <install-command>\n        <text>\n            <!--\n            NOTE: call LogManager.Configuration.Install(new InstallationContext()); \n                  to execute this query.\n            -->\n            CREATE TABLE ${var:logTableName} (\n            Id bigint primary key not null identity(1,1),\n            Logged datetime2,\n            Level nvarchar(10),\n            LogMessage nvarchar(max),\n            MessageUid uniqueidentifier,\n            MessagePartUid uniqueidentifier,\n            MessagePartDataUid uniqueidentifier,\n            )\n        </text>\n        <ignoreFailures>false</ignoreFailures>\n    </install-command>",
            "title": "Installing targets"
        },
        {
            "location": "/Installing-targets/#install",
            "text": "Install all targets used in the config:  LogManager.Configuration.Install(new InstallationContext());",
            "title": "Install"
        },
        {
            "location": "/Installing-targets/#uninstall",
            "text": "Uninstall all targets used in the config:  LogManager.Configuration.Uninstall(new InstallationContext());",
            "title": "Uninstall"
        },
        {
            "location": "/Installing-targets/#example-install-database-target",
            "text": "<target xsi:type=\"Database\" name=\"db\"\n        connectionStringName=\"LoggingDatabase\">\n    <install-command>\n        <text>\n            <!--\n            NOTE: call LogManager.Configuration.Install(new InstallationContext()); \n                  to execute this query.\n            -->\n            CREATE TABLE ${var:logTableName} (\n            Id bigint primary key not null identity(1,1),\n            Logged datetime2,\n            Level nvarchar(10),\n            LogMessage nvarchar(max),\n            MessageUid uniqueidentifier,\n            MessagePartUid uniqueidentifier,\n            MessagePartDataUid uniqueidentifier,\n            )\n        </text>\n        <ignoreFailures>false</ignoreFailures>\n    </install-command>",
            "title": "Example install database target"
        },
        {
            "location": "/LimitingWrapper-target/",
            "text": "Limiting Wrapper\n\n\nLimits the number of logs written to the wrapped target in a given time interval.\n\n\nSupported in .NET, Silverlight, Compact Framework and Mono.\n\n\nIntroduced in NLog 4.4.\n\n\nConfiguration Syntax\n\n\n<targets>\n  <target xsi:type=\"LimitingWrapper\"\n          name=\"String\"\n          messageLimit=\"Integer\"\n          interval=\"TimeSpan\">\n    <target xsi:type=\"wrappedTargetType\" ...target properties... />\n  </target>\n</targets>\n\n\n\n\nParameters\n\n\nGeneral Options\n\n\n\n\nname\n - Name of the target.\n\n\n\n\nLimiting Options\n\n\n\n\n\n\nmessageLimit\n - Indicates the maximum number of log events written per Interval. Log events in the current interval received after the message limit has been reached will be discarded. \nInteger\n Default: \n1000\n\n\n\n\n\n\ninterval\n - Indicates a time interval in which messages will be written up to the maximum number of messages (\nmessageLimit\n). \nTimeSpan\nDefault: \n\"01:00\"\n (1 hour)",
            "title": "LimitingWrapper target"
        },
        {
            "location": "/LimitingWrapper-target/#limiting-wrapper",
            "text": "Limits the number of logs written to the wrapped target in a given time interval.  Supported in .NET, Silverlight, Compact Framework and Mono.  Introduced in NLog 4.4.",
            "title": "Limiting Wrapper"
        },
        {
            "location": "/LimitingWrapper-target/#configuration-syntax",
            "text": "<targets>\n  <target xsi:type=\"LimitingWrapper\"\n          name=\"String\"\n          messageLimit=\"Integer\"\n          interval=\"TimeSpan\">\n    <target xsi:type=\"wrappedTargetType\" ...target properties... />\n  </target>\n</targets>",
            "title": "Configuration Syntax"
        },
        {
            "location": "/LimitingWrapper-target/#parameters",
            "text": "",
            "title": "Parameters"
        },
        {
            "location": "/LimitingWrapper-target/#general-options",
            "text": "name  - Name of the target.",
            "title": "General Options"
        },
        {
            "location": "/LimitingWrapper-target/#limiting-options",
            "text": "messageLimit  - Indicates the maximum number of log events written per Interval. Log events in the current interval received after the message limit has been reached will be discarded.  Integer  Default:  1000    interval  - Indicates a time interval in which messages will be written up to the maximum number of messages ( messageLimit ).  TimeSpan Default:  \"01:00\"  (1 hour)",
            "title": "Limiting Options"
        },
        {
            "location": "/LogReceiverService-target/",
            "text": "Sends log messages to a NLog Receiver Service (using WCF or Web Services).\n\n\nSupported in .NET, Silverlight, Compact Framework and Mono.\n\n\nConfiguration Syntax\n\n\n<targets>\n  <target xsi:type=\"LogReceiverService\"\n          name=\"String\"\n          endpointConfigurationName=\"String\"\n          endpointAddress=\"String\"\n          useBinaryEncoding=\"Boolean\"\n          clientId=\"Layout\"\n          includeEventProperties=\"Boolean\">\n    <parameter layout=\"Layout\" name=\"String\" type=\"System.Type\"/><!-- repeated -->\n  </target>\n</targets>\n\n\n\n\nRead more about using the \nConfiguration File\n.\n\n\nParameters\n\n\nGeneral Options\n\n\n\n\nname\n - Name of the target.\n\n\n\n\nConnection Options\n\n\n\n\n\n\nendpointConfigurationName\n - Name of the endpoint configuration in WCF configuration file.  \n\n\n\n\n\n\nendpointAddress\n - Endpoint address. Required.\n\n\n\n\n\n\nPayload Options\n\n\n\n\n\n\nuseBinaryEncoding\n - Indicates whether to use binary message encoding. \nBoolean\n  \n\n\n\n\n\n\nparameters\n - The list of parameters. \nCollection\n\nEach collection item is represented by \\\n element with the following attributes:\n\n\n\n\nlayout\n - Layout that should be use to calcuate the value for the parameter. \nLayout\n Required.\n\n\nname\n - Name of the parameter.\n\n\n\n\ntype\n - Type of the parameter.System.Type\n\n\n\n\n\n\nclientId\n - Client ID. \nLayout\n\n\n\n\n\n\nincludeEventProperties\n - Indicates whether to include per-event properties in the payload sent to the server. \nBoolean\n\n\n\n\n\n\nExamples\n\n\nPassing Parameters\n\n\nParameters are passed to the WCF LogReceiverService target using one or more configuration lines such as:\n\n\n<parameter name=\"MyParameter\" layout=\"My Value!\" />\n<parameter name=\"nlogdir\" layout=\"${nlogdir}\" />\n\n\n\n\nThese parameters are passed over the network to the service and can be accessed by emitting events from your receiver application.\n\n\nApplication for receiving events\n\n\nnamespace MyLogReceiverApp\n{\n   using System;\n   using NLog;\n   using NLog.LogReceiverService;\n\n   /// <summary>\n   /// Log service server object that logs messages.\n   /// </summary>\n   public class LogReceiverServer : ILogReceiverServer\n   {\n       public void ProcessLogMessages(NLogEvents nevents)\n       {\n           var events = nevents.ToEventInfo(\"Client.\");\n           Console.WriteLine(\"in: {0} {1}\", nevents.Events.Length, events.Count);\n\n           foreach (var ev in events)\n           {\n               var logger = LogManager.GetLogger(ev.LoggerName);\n               logger.Log(ev);\n           }\n       }\n   }\n}\n\n\n\n\nThe line:\n\n\nlogger.Log(ev);\n\n\nemits each event to the appropriate targets defined in the server side NLog.config file.\n\n\nAccessing Custom Values\n\n\nOn the server side NLog.config file, you may use the ${event-context} layout renderer to access any parameters passed from the client side config. A line such as:\n\n\n<target name=\"c\" xsi:type=\"ColoredConsole\" layout=\"testing ${event-context:item=MyParameter}\" />\n\n\n\n\nwould print to the console:\n\n\ntesting My Value!",
            "title": "LogReceiverService target"
        },
        {
            "location": "/LogReceiverService-target/#configuration-syntax",
            "text": "<targets>\n  <target xsi:type=\"LogReceiverService\"\n          name=\"String\"\n          endpointConfigurationName=\"String\"\n          endpointAddress=\"String\"\n          useBinaryEncoding=\"Boolean\"\n          clientId=\"Layout\"\n          includeEventProperties=\"Boolean\">\n    <parameter layout=\"Layout\" name=\"String\" type=\"System.Type\"/><!-- repeated -->\n  </target>\n</targets>  Read more about using the  Configuration File .",
            "title": "Configuration Syntax"
        },
        {
            "location": "/LogReceiverService-target/#parameters",
            "text": "",
            "title": "Parameters"
        },
        {
            "location": "/LogReceiverService-target/#general-options",
            "text": "name  - Name of the target.",
            "title": "General Options"
        },
        {
            "location": "/LogReceiverService-target/#connection-options",
            "text": "endpointConfigurationName  - Name of the endpoint configuration in WCF configuration file.      endpointAddress  - Endpoint address. Required.",
            "title": "Connection Options"
        },
        {
            "location": "/LogReceiverService-target/#payload-options",
            "text": "useBinaryEncoding  - Indicates whether to use binary message encoding.  Boolean       parameters  - The list of parameters.  Collection \nEach collection item is represented by \\  element with the following attributes:   layout  - Layout that should be use to calcuate the value for the parameter.  Layout  Required.  name  - Name of the parameter.   type  - Type of the parameter.System.Type    clientId  - Client ID.  Layout    includeEventProperties  - Indicates whether to include per-event properties in the payload sent to the server.  Boolean",
            "title": "Payload Options"
        },
        {
            "location": "/LogReceiverService-target/#examples",
            "text": "",
            "title": "Examples"
        },
        {
            "location": "/LogReceiverService-target/#passing-parameters",
            "text": "Parameters are passed to the WCF LogReceiverService target using one or more configuration lines such as:  <parameter name=\"MyParameter\" layout=\"My Value!\" />\n<parameter name=\"nlogdir\" layout=\"${nlogdir}\" />  These parameters are passed over the network to the service and can be accessed by emitting events from your receiver application.",
            "title": "Passing Parameters"
        },
        {
            "location": "/LogReceiverService-target/#application-for-receiving-events",
            "text": "namespace MyLogReceiverApp\n{\n   using System;\n   using NLog;\n   using NLog.LogReceiverService;\n\n   /// <summary>\n   /// Log service server object that logs messages.\n   /// </summary>\n   public class LogReceiverServer : ILogReceiverServer\n   {\n       public void ProcessLogMessages(NLogEvents nevents)\n       {\n           var events = nevents.ToEventInfo(\"Client.\");\n           Console.WriteLine(\"in: {0} {1}\", nevents.Events.Length, events.Count);\n\n           foreach (var ev in events)\n           {\n               var logger = LogManager.GetLogger(ev.LoggerName);\n               logger.Log(ev);\n           }\n       }\n   }\n}  The line:  logger.Log(ev);  emits each event to the appropriate targets defined in the server side NLog.config file.",
            "title": "Application for receiving events"
        },
        {
            "location": "/LogReceiverService-target/#accessing-custom-values",
            "text": "On the server side NLog.config file, you may use the ${event-context} layout renderer to access any parameters passed from the client side config. A line such as:  <target name=\"c\" xsi:type=\"ColoredConsole\" layout=\"testing ${event-context:item=MyParameter}\" />  would print to the console:  testing My Value!",
            "title": "Accessing Custom Values"
        },
        {
            "location": "/Mail-target/",
            "text": "Sends log messages by email using SMTP protocol. \n\n\nCombines well with \nFallbackGroup Target\n in order to create a fallback with multiple SMTP Hosts, example see \nhere\n.\n\n\nSupported in .NET and Mono\n\n\nConfiguration Syntax\n\n\n<targets>\n  <target xsi:type=\"Mail\"\n          name=\"String\"\n          header=\"Layout\"\n          footer=\"Layout\"\n          layout=\"Layout\"\n          html=\"Boolean\"\n          addNewLines=\"Boolean\"\n          replaceNewlineWithBrTagInHtml=\"Boolean\"\n          encoding=\"Encoding\"\n          subject=\"Layout\"\n          to=\"Layout\"\n          bcc=\"Layout\"\n          cc=\"Layout\"\n          from=\"Layout\"\n          body=\"Layout\"\n          smtpUserName=\"Layout\"\n          enableSsl=\"Boolean\"\n          smtpPassword=\"Layout\"\n          smtpAuthentication=\"Enum\"\n          smtpServer=\"Layout\"\n          smtpPort=\"Integer\"\n          useSystemNetMailSettings=\"Boolean\"\n          deliveryMethod=\"Enum\"\n          pickupDirectoryLocation=\"String\"\n          timeout=\"Integer\" />\n</targets>\n\n\n\n\nRead more about using the [[Configuration File]].\n\n\nParameters\n\n\nGeneral Options\n\n\n\n\nname\n - Name of the target.\n\n\n\n\nLayout Options\n\n\n\n\n\n\nheader\n - Header. \nLayout\n\n\n\n\n\n\nfooter\n - Footer. \nLayout\n\n\n\n\n\n\nlayout\n - Text to be rendered. \nLayout\n Required. Default: \n${message}${newline}\n. Same as \nbody\n property\n\n\n\n\n\n\nhtml\n - Indicates whether to send message as HTML instead of plain text. \nBoolean\n Default: \nfalse\n\n\n\n\n\n\naddNewLines\n - Indicates whether to add new lines between log entries. \nBoolean\n\n\n\n\n\n\nreplaceNewlineWithBrTagInHtml\n - Indicates whether NewLine characters in the body should be replaced with \n<br/>\n tags. \nBoolean\n Default: \nfalse\n\n\n\n\n\n\nencoding\n - Encoding to be used for sending e-mail. \nEncoding\n Default: \nUTF-8\n\n\n\n\n\n\nMessage Options\n\n\n\n\n\n\nsubject\n - Mail subject. \nLayout\n Required. Default: Message from NLog on ${machinename}\n\n\n\n\n\n\nto\n - Recipients' email addresses separated by semicolons (e.g. john@domain.com;jane@domain.com). \nLayout\n. Starting in NLog 4.0 this field is no longer required, but To, BCC or CC should be defined otherwise an exception is thrown. \n\n\n\n\n\n\nbcc\n - BCC email addresses separated by semicolons (e.g. john@domain.com;jane@domain.com). \nLayout\n\n\n\n\n\n\ncc\n - CC email addresses separated by semicolons (e.g. john@domain.com;jane@domain.com). \nLayout\n\n\n\n\n\n\nfrom\n - Sender's email address (e.g. joe@domain.com). \nLayout\n Required.\n\n\n\n\n\n\nbody\n - Same as \nLayout\n property. Mail message body (repeated for each log message send in one mail). \nLayout\n Default: \n${message}${newline}\n \n\n\n\n\n\n\nSMTP Options\n\n\n\n\n\n\nsmtpUserName\n - Username used to connect to SMTP server (used when SmtpAuthentication is set to \"basic\"). \nLayout\n\n\n\n\n\n\nenableSsl\n - Indicates whether SSL (secure sockets layer) should be used when communicating with SMTP server. \nBoolean\n Default: False. Note: port 465 isn't working with SSL. See \nissue 1226\n  \n\n\n\n\n\n\nsmtpPassword\n - Password used to authenticate against SMTP server (used when SmtpAuthentication is set to \"basic\"). \nLayout\n\n\n\n\n\n\nsmtpAuthentication\n - SMTP Authentication mode. Default: None\n\nPossible values:\n\n\n\n\nBasic\n - Basic - username and password.\n\n\nNone\n - No authentication.\n\n\n\n\nNtlm\n - NTLM Authentication.\n\n\n\n\n\n\nsmtpServer\n - SMTP Server to be used for sending. \nLayout\n Required.\n\n\n\n\n\n\nsmtpPort\n - Port number that SMTP Server is listening on. \nInteger\n Default: 25. Note: port 465 isn't working with SSL. See \nissue 1226\n\n\n\n\n\n\nuseSystemNetMailSettings\n - Force using smtp configuration from system.net/mailSettings. \nBoolean\n Default: False\n\n\n\n\n\n\ntimeout\n - Indicates the SMTP client timeout in milliseconds. \nInteger\n Default: 10000 (10 seconds)\n\n\n\n\n\n\npickupDirectoryLocation\n - Gets or sets the folder where applications save mail messages to be processed by the local SMTP server (\nintroduced in NLog 4.2\n).\n\n\n\n\n\n\nsmtpDeliveryMethod\n - Specifies how outgoing email messages will be handled (\nintroduced in NLog 4.2\n). Default: Network \nPossible values:\n\n\n\n\nNetwork\n - Email is sent through the network to an SMTP server.\n\n\nPickupDirectoryFromIis\n - Email is copied to the pickup directory used by a local Internet Information Services (IIS) for delivery.\n\n\nSpecifiedPickupDirectory\n - Email is copied to the directory specified by the PickupDirectoryLocation property for delivery by an external application.\n\n\n\n\nRemarks\n\n\nApplication Configuration File\n\n\nIf the application config file contains mail settings, fx.:\n\n\n<system.net>\n  <mailSettings>\n    <smtp from=\"mail@domain.com\" deliveryMethod=\"SpecifiedPickupDirectory\">\n      <network host=\"localhost\" port=\"25\"/>\n      <specifiedPickupDirectory pickupDirectoryLocation=\"C:/Temp/Email\"/>\n    </smtp>\n  </mailSettings>\n</system.net>\n\n\n\n\nThese values will be used, if target doesn't override them (see \nuseSystemNetMailSettings\n attribute).\n\n\nEmail Address Format\n\n\nIt is possible to use an address in format \"John Doe <john.doe@example.com>\" but the special characters < and > must be escaped. The result would be \nJohn Doe &lt;john.doe@example.com&gt;\n\n\nMail Target wrapped by \nFallbackGroup Target\n\n\nExample configuration for a Mailserver Fallback with multiple hosts.\n\n\n<target xsi:type=\"FallbackGroup\" \n        name=\"mail\"\n        returnToFirstOnSuccess=\"true\">\n    <target xsi:type=\"Mail\"\n            name=\"mailserver1\"\n            subject=\"Layout\"\n            to=\"Layout\"\n            from=\"Layout\"\n            smtpServer=\"mx1.example.com\" \n            smtpPort=\"Integer\"\n            layout=\"Layout\" />\n    <target xsi:type=\"Mail\"\n            name=\"mailserver2\" \n            subject=\"Layout\"\n            to=\"Layout\"\n            from=\"Layout\"\n            smtpServer=\"mx2.example.com\" \n            smtpPort=\"Integer\"\n            layout=\"Layout\" />\n</target>",
            "title": "Mail target"
        },
        {
            "location": "/Mail-target/#configuration-syntax",
            "text": "<targets>\n  <target xsi:type=\"Mail\"\n          name=\"String\"\n          header=\"Layout\"\n          footer=\"Layout\"\n          layout=\"Layout\"\n          html=\"Boolean\"\n          addNewLines=\"Boolean\"\n          replaceNewlineWithBrTagInHtml=\"Boolean\"\n          encoding=\"Encoding\"\n          subject=\"Layout\"\n          to=\"Layout\"\n          bcc=\"Layout\"\n          cc=\"Layout\"\n          from=\"Layout\"\n          body=\"Layout\"\n          smtpUserName=\"Layout\"\n          enableSsl=\"Boolean\"\n          smtpPassword=\"Layout\"\n          smtpAuthentication=\"Enum\"\n          smtpServer=\"Layout\"\n          smtpPort=\"Integer\"\n          useSystemNetMailSettings=\"Boolean\"\n          deliveryMethod=\"Enum\"\n          pickupDirectoryLocation=\"String\"\n          timeout=\"Integer\" />\n</targets>  Read more about using the [[Configuration File]].",
            "title": "Configuration Syntax"
        },
        {
            "location": "/Mail-target/#parameters",
            "text": "",
            "title": "Parameters"
        },
        {
            "location": "/Mail-target/#general-options",
            "text": "name  - Name of the target.",
            "title": "General Options"
        },
        {
            "location": "/Mail-target/#layout-options",
            "text": "header  - Header.  Layout    footer  - Footer.  Layout    layout  - Text to be rendered.  Layout  Required. Default:  ${message}${newline} . Same as  body  property    html  - Indicates whether to send message as HTML instead of plain text.  Boolean  Default:  false    addNewLines  - Indicates whether to add new lines between log entries.  Boolean    replaceNewlineWithBrTagInHtml  - Indicates whether NewLine characters in the body should be replaced with  <br/>  tags.  Boolean  Default:  false    encoding  - Encoding to be used for sending e-mail.  Encoding  Default:  UTF-8",
            "title": "Layout Options"
        },
        {
            "location": "/Mail-target/#message-options",
            "text": "subject  - Mail subject.  Layout  Required. Default: Message from NLog on ${machinename}    to  - Recipients' email addresses separated by semicolons (e.g. john@domain.com;jane@domain.com).  Layout . Starting in NLog 4.0 this field is no longer required, but To, BCC or CC should be defined otherwise an exception is thrown.     bcc  - BCC email addresses separated by semicolons (e.g. john@domain.com;jane@domain.com).  Layout    cc  - CC email addresses separated by semicolons (e.g. john@domain.com;jane@domain.com).  Layout    from  - Sender's email address (e.g. joe@domain.com).  Layout  Required.    body  - Same as  Layout  property. Mail message body (repeated for each log message send in one mail).  Layout  Default:  ${message}${newline}",
            "title": "Message Options"
        },
        {
            "location": "/Mail-target/#smtp-options",
            "text": "smtpUserName  - Username used to connect to SMTP server (used when SmtpAuthentication is set to \"basic\").  Layout    enableSsl  - Indicates whether SSL (secure sockets layer) should be used when communicating with SMTP server.  Boolean  Default: False. Note: port 465 isn't working with SSL. See  issue 1226       smtpPassword  - Password used to authenticate against SMTP server (used when SmtpAuthentication is set to \"basic\").  Layout    smtpAuthentication  - SMTP Authentication mode. Default: None \nPossible values:   Basic  - Basic - username and password.  None  - No authentication.   Ntlm  - NTLM Authentication.    smtpServer  - SMTP Server to be used for sending.  Layout  Required.    smtpPort  - Port number that SMTP Server is listening on.  Integer  Default: 25. Note: port 465 isn't working with SSL. See  issue 1226    useSystemNetMailSettings  - Force using smtp configuration from system.net/mailSettings.  Boolean  Default: False    timeout  - Indicates the SMTP client timeout in milliseconds.  Integer  Default: 10000 (10 seconds)    pickupDirectoryLocation  - Gets or sets the folder where applications save mail messages to be processed by the local SMTP server ( introduced in NLog 4.2 ).    smtpDeliveryMethod  - Specifies how outgoing email messages will be handled ( introduced in NLog 4.2 ). Default: Network \nPossible values:   Network  - Email is sent through the network to an SMTP server.  PickupDirectoryFromIis  - Email is copied to the pickup directory used by a local Internet Information Services (IIS) for delivery.  SpecifiedPickupDirectory  - Email is copied to the directory specified by the PickupDirectoryLocation property for delivery by an external application.",
            "title": "SMTP Options"
        },
        {
            "location": "/Mail-target/#remarks",
            "text": "",
            "title": "Remarks"
        },
        {
            "location": "/Mail-target/#application-configuration-file",
            "text": "If the application config file contains mail settings, fx.:  <system.net>\n  <mailSettings>\n    <smtp from=\"mail@domain.com\" deliveryMethod=\"SpecifiedPickupDirectory\">\n      <network host=\"localhost\" port=\"25\"/>\n      <specifiedPickupDirectory pickupDirectoryLocation=\"C:/Temp/Email\"/>\n    </smtp>\n  </mailSettings>\n</system.net>  These values will be used, if target doesn't override them (see  useSystemNetMailSettings  attribute).",
            "title": "Application Configuration File"
        },
        {
            "location": "/Mail-target/#email-address-format",
            "text": "It is possible to use an address in format \"John Doe <john.doe@example.com>\" but the special characters < and > must be escaped. The result would be  John Doe &lt;john.doe@example.com&gt;",
            "title": "Email Address Format"
        },
        {
            "location": "/Mail-target/#mail-target-wrapped-by-fallbackgroup-target",
            "text": "Example configuration for a Mailserver Fallback with multiple hosts.  <target xsi:type=\"FallbackGroup\" \n        name=\"mail\"\n        returnToFirstOnSuccess=\"true\">\n    <target xsi:type=\"Mail\"\n            name=\"mailserver1\"\n            subject=\"Layout\"\n            to=\"Layout\"\n            from=\"Layout\"\n            smtpServer=\"mx1.example.com\" \n            smtpPort=\"Integer\"\n            layout=\"Layout\" />\n    <target xsi:type=\"Mail\"\n            name=\"mailserver2\" \n            subject=\"Layout\"\n            to=\"Layout\"\n            from=\"Layout\"\n            smtpServer=\"mx2.example.com\" \n            smtpPort=\"Integer\"\n            layout=\"Layout\" />\n</target>",
            "title": "Mail Target wrapped by FallbackGroup Target"
        },
        {
            "location": "/Memory-target/",
            "text": "Writes log messages to an ArrayList in memory for programmatic retrieval. \n\n\nSupported in .NET, Silverlight, Compact Framework and Mono.\n\n\nConfiguration Syntax\n\n\n<targets>\n  <target xsi:type=\"Memory\" name=\"String\" layout=\"Layout\" />\n</targets>\n\n\n\n\nRead more about using the [[Configuration File]].\n\n\nParameters\n\n\nGeneral Options\n\n\n\n\nname\n - Name of the target.\n\n\n\n\nLayout Options\n\n\n\n\nlayout\n - Layout used to format log messages. \nLayout\n Required. Default: \n${longdate}|${level:uppercase=true}|${logger}|${message}\n\n\n\n\nExamples\n\n\nLogging to an array\n\n\n(snippet from    \nMemory Simple Example.cs\n  )\n\n\n    MemoryTarget target = new MemoryTarget();\n    target.Layout = \"${message}\";\n\n    NLog.Config.SimpleConfigurator.ConfigureForTargetLogging(target, LogLevel.Debug);\n\n    Logger logger = LogManager.GetLogger(\"Example\");\n    logger.Debug(\"log message\");\n\n    foreach (string s in target.Logs)\n    {\n        Console.Write(\"logged: {0}\", s);\n    }\n\n\n\nSee also \nMemory Target Tests",
            "title": "Memory target"
        },
        {
            "location": "/Memory-target/#configuration-syntax",
            "text": "<targets>\n  <target xsi:type=\"Memory\" name=\"String\" layout=\"Layout\" />\n</targets>  Read more about using the [[Configuration File]].",
            "title": "Configuration Syntax"
        },
        {
            "location": "/Memory-target/#parameters",
            "text": "",
            "title": "Parameters"
        },
        {
            "location": "/Memory-target/#general-options",
            "text": "name  - Name of the target.",
            "title": "General Options"
        },
        {
            "location": "/Memory-target/#layout-options",
            "text": "layout  - Layout used to format log messages.  Layout  Required. Default:  ${longdate}|${level:uppercase=true}|${logger}|${message}",
            "title": "Layout Options"
        },
        {
            "location": "/Memory-target/#examples",
            "text": "",
            "title": "Examples"
        },
        {
            "location": "/Memory-target/#logging-to-an-array",
            "text": "(snippet from     Memory Simple Example.cs   )      MemoryTarget target = new MemoryTarget();\n    target.Layout = \"${message}\";\n\n    NLog.Config.SimpleConfigurator.ConfigureForTargetLogging(target, LogLevel.Debug);\n\n    Logger logger = LogManager.GetLogger(\"Example\");\n    logger.Debug(\"log message\");\n\n    foreach (string s in target.Logs)\n    {\n        Console.Write(\"logged: {0}\", s);\n    }  See also  Memory Target Tests",
            "title": "Logging to an array"
        },
        {
            "location": "/MessageBox-target/",
            "text": "Pops up log messages as message boxes. \n\n\nSupported in .NET, Silverlight, Compact Framework and Mono.\n\n\nConfiguration Syntax\n\n\n<targets>\n  <target xsi:type=\"MessageBox\" name=\"String\" layout=\"Layout\" caption=\"Layout\" />\n</targets>\n\n\n\n\nRead more about using the [[Configuration File]].\n\n\nParameters\n\n\nGeneral Options\n\n\n\n\nname\n - Name of the target.\n\n\n\n\nLayout Options\n\n\n\n\nlayout\n - Layout used to format log messages. \nLayout\n Required. Default: \n${longdate}|${level:uppercase=true}|${logger}|${message}\n\n\n\n\nUI Options\n\n\n\n\ncaption\n - Message box title. \nLayout",
            "title": "MessageBox target"
        },
        {
            "location": "/MessageBox-target/#configuration-syntax",
            "text": "<targets>\n  <target xsi:type=\"MessageBox\" name=\"String\" layout=\"Layout\" caption=\"Layout\" />\n</targets>  Read more about using the [[Configuration File]].",
            "title": "Configuration Syntax"
        },
        {
            "location": "/MessageBox-target/#parameters",
            "text": "",
            "title": "Parameters"
        },
        {
            "location": "/MessageBox-target/#general-options",
            "text": "name  - Name of the target.",
            "title": "General Options"
        },
        {
            "location": "/MessageBox-target/#layout-options",
            "text": "layout  - Layout used to format log messages.  Layout  Required. Default:  ${longdate}|${level:uppercase=true}|${logger}|${message}",
            "title": "Layout Options"
        },
        {
            "location": "/MessageBox-target/#ui-options",
            "text": "caption  - Message box title.  Layout",
            "title": "UI Options"
        },
        {
            "location": "/MethodCall-target/",
            "text": "Calls the specified static method on each log message and passes contextual parameters to it. \n\n\nSupported in .NET, Silverlight, Compact Framework and Mono.\n\n\nConfiguration Syntax\n\n\n<targets>\n  <target xsi:type=\"MethodCall\"\n          name=\"String\"\n          methodName=\"String\"\n          className=\"String\">\n    <parameter layout=\"Layout\" name=\"String\" type=\"System.Type\"/><!-- repeated -->\n  </target>\n</targets>\n\n\n\n\nRead more about using the [[Configuration File]].\n\n\nParameters\n\n\nGeneral Options\n\n\n\n\nname\n - Name of the target.\n\n\n\n\nInvocation Options\n\n\n\n\nmethodName\n - Method name. The method must be \npublic\n and \nstatic\n.\n\n\nclassName\n - Class name. Do include the assembly name, e.g. \n\"NLog.UnitTests.Targets.MethodCallTests, NLog.UnitTests\"\n\n\n\n\nParameter Options\n\n\n\n\nparameters\n - The array of parameters to be passed. \nCollection\n\nEach collection item is represented by \n<parameter />\n element with the following attributes:\n\n\nlayout\n - Layout that should be use to calculate the value for the parameter. \nLayout\n Required.\n\n\nname\n - Name of the parameter.\n\n\ntype\n - Type of the parameter. \nSystem.Type\n\n\n\n\nNote: Since NLog 4.3 these parameters can be optional.\n\n\nExamples\n\n\nLogging to a static method\n\n\nIn order to send all logs to a static method, use the following configuration file:\n\n\n<?xml version=\"1.0\" ?>\n<nlog xmlns=\"http://www.nlog-project.org/schemas/NLog.xsd\"\n      xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n    <targets>\n        <target name=\"m\" xsi:type=\"MethodCall\" className=\"SomeNamespace.MyClass, MyAssembly\" methodName=\"LogMethod\">\n            <parameter layout=\"${level}\" />\n            <parameter layout=\"${message}\" />\n        </target>\n    </targets>\n\n    <rules>\n        <logger name=\"*\" minlevel=\"Debug\" writeTo=\"m\" />\n    </rules>\n</nlog>\n\n\n\n\nPer the configuration, the log method needs to be called \"LogMethod\" be declared in \"SomeNamespace.MyClass\" class. The class must be compiled to MyAssembly.dll. Each parameter of the log method must correspond to \\\n entry in the target configuration.\n\n\nnamespace SomeNamespace\n{\n    using System;\n\n    public class MyClass\n    {\n        public static void LogMethod(string level, string message)\n        {\n            Console.WriteLine(\"l: {0} m: {1}\", level, message);\n        }\n    }\n}\n\n\n\n\nNames of parameters are not important, only their order is. The default type of each parameter is string, but it can be overridden by adding type attribute to \n<parameter />\n element.\n\n\nIt is also possible to configure logging using \nConfiguration API\n:\n\n\nusing System;\n\nusing NLog;\nusing NLog.Targets;\nusing System.Diagnostics;\n\npublic class Example\n{\n    public static void LogMethod(string level, string message)\n    {\n        Console.WriteLine(\"l: {0} m: {1}\", level, message);\n    }\n\n    static void Main(string[] args)\n    {\n        MethodCallTarget target = new MethodCallTarget();\n        target.ClassName = typeof(Example).AssemblyQualifiedName;\n        target.MethodName = \"LogMethod\";\n        target.Parameters.Add(new MethodCallParameter(\"${level}\"));\n        target.Parameters.Add(new MethodCallParameter(\"${message}\"));\n\n        NLog.Config.SimpleConfigurator.ConfigureForTargetLogging(target, LogLevel.Debug);\n\n        Logger logger = LogManager.GetLogger(\"Example\");\n        logger.Debug(\"log message\");\n        logger.Error(\"error message\");\n    }\n}",
            "title": "MethodCall target"
        },
        {
            "location": "/MethodCall-target/#configuration-syntax",
            "text": "<targets>\n  <target xsi:type=\"MethodCall\"\n          name=\"String\"\n          methodName=\"String\"\n          className=\"String\">\n    <parameter layout=\"Layout\" name=\"String\" type=\"System.Type\"/><!-- repeated -->\n  </target>\n</targets>  Read more about using the [[Configuration File]].",
            "title": "Configuration Syntax"
        },
        {
            "location": "/MethodCall-target/#parameters",
            "text": "",
            "title": "Parameters"
        },
        {
            "location": "/MethodCall-target/#general-options",
            "text": "name  - Name of the target.",
            "title": "General Options"
        },
        {
            "location": "/MethodCall-target/#invocation-options",
            "text": "methodName  - Method name. The method must be  public  and  static .  className  - Class name. Do include the assembly name, e.g.  \"NLog.UnitTests.Targets.MethodCallTests, NLog.UnitTests\"",
            "title": "Invocation Options"
        },
        {
            "location": "/MethodCall-target/#parameter-options",
            "text": "parameters  - The array of parameters to be passed.  Collection \nEach collection item is represented by  <parameter />  element with the following attributes:  layout  - Layout that should be use to calculate the value for the parameter.  Layout  Required.  name  - Name of the parameter.  type  - Type of the parameter.  System.Type   Note: Since NLog 4.3 these parameters can be optional.",
            "title": "Parameter Options"
        },
        {
            "location": "/MethodCall-target/#examples",
            "text": "",
            "title": "Examples"
        },
        {
            "location": "/MethodCall-target/#logging-to-a-static-method",
            "text": "In order to send all logs to a static method, use the following configuration file:  <?xml version=\"1.0\" ?>\n<nlog xmlns=\"http://www.nlog-project.org/schemas/NLog.xsd\"\n      xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n    <targets>\n        <target name=\"m\" xsi:type=\"MethodCall\" className=\"SomeNamespace.MyClass, MyAssembly\" methodName=\"LogMethod\">\n            <parameter layout=\"${level}\" />\n            <parameter layout=\"${message}\" />\n        </target>\n    </targets>\n\n    <rules>\n        <logger name=\"*\" minlevel=\"Debug\" writeTo=\"m\" />\n    </rules>\n</nlog>  Per the configuration, the log method needs to be called \"LogMethod\" be declared in \"SomeNamespace.MyClass\" class. The class must be compiled to MyAssembly.dll. Each parameter of the log method must correspond to \\  entry in the target configuration.  namespace SomeNamespace\n{\n    using System;\n\n    public class MyClass\n    {\n        public static void LogMethod(string level, string message)\n        {\n            Console.WriteLine(\"l: {0} m: {1}\", level, message);\n        }\n    }\n}  Names of parameters are not important, only their order is. The default type of each parameter is string, but it can be overridden by adding type attribute to  <parameter />  element.  It is also possible to configure logging using  Configuration API :  using System;\n\nusing NLog;\nusing NLog.Targets;\nusing System.Diagnostics;\n\npublic class Example\n{\n    public static void LogMethod(string level, string message)\n    {\n        Console.WriteLine(\"l: {0} m: {1}\", level, message);\n    }\n\n    static void Main(string[] args)\n    {\n        MethodCallTarget target = new MethodCallTarget();\n        target.ClassName = typeof(Example).AssemblyQualifiedName;\n        target.MethodName = \"LogMethod\";\n        target.Parameters.Add(new MethodCallParameter(\"${level}\"));\n        target.Parameters.Add(new MethodCallParameter(\"${message}\"));\n\n        NLog.Config.SimpleConfigurator.ConfigureForTargetLogging(target, LogLevel.Debug);\n\n        Logger logger = LogManager.GetLogger(\"Example\");\n        logger.Debug(\"log message\");\n        logger.Error(\"error message\");\n    }\n}",
            "title": "Logging to a static method"
        },
        {
            "location": "/MSMQ-target/",
            "text": "Writes log message to the specified message queue handled by MSMQ. \n\n\nSupported in .NET, Compact Framework and Mono.\n\n\nConfiguration Syntax\n\n\n<targets>\n  <target xsi:type=\"MSMQ\"\n          name=\"String\"\n          useXmlEncoding=\"Boolean\"\n          encoding=\"Encoding\"\n          layout=\"Layout\"\n          recoverable=\"Boolean\"\n          createQueueIfNotExists=\"Boolean\"\n          checkIfQueueExists=\"Boolean\"\n          label=\"Layout\"\n          queue=\"Layout\" />\n</targets>\n\n\n\n\nRead more about using the [[Configuration File]].\n\n\nParameters\n\n\nGeneral Options\n\n\n\n\nname\n - Name of the target.\n\n\n\n\nLayout Options\n\n\n\n\n\n\nuseXmlEncoding\n - Indicates whether to use the XML format when serializing message. \nBoolean\n Default: False\n\n\n\n\n\n\nencoding\n - Encoding to be used when writing text to the queue. \nEncoding\n\n\n\n\n\n\nlayout\n - Layout used to format log messages. \nLayout\n Required. Default: \n${longdate}|${level:uppercase=true}|${logger}|${message}\n\n\n\n\n\n\nQueue Options\n\n\n\n\n\n\nqueue\n - Name of the queue to write to. \nLayout\n \nRequired\n.\n\nTo write to a private queue on a local machine use .\\private$\\QueueName. For other available queue names, consult MSMQ documentation.\n\n\n\n\n\n\nrecoverable\n - Indicates whether to use recoverable messages (with guaranteed delivery). \nBoolean\n Default: False\n\n\n\n\n\n\ncreateQueueIfNotExists\n - Indicates whether to create the queue if it doesn't exists. Won't do anything when \ncheckIfQueueExists\n is false.  \nBoolean\n Default: False\n\n\n\n\n\n\ncheckIfQueueExists\n - If false, won't check for the existence of the queue. This is sometimes needed for private remote queues (where the \n.exists\n would throw an Exception). \nBoolean\n Default: True\n\n\n\n\n\n\nlabel\n - Label to associate with each message. \nLayout\n Default: \"NLog\"\n\n\n\n\n\n\nNotes\n\n\nThe MSMQ target requires that:\n\n NLog.extended.dll be along side the NLog.dll at runtime.\n\n The machine doing the logging have MSMQ installed with the Active Directory Domain Services Integration option. If the option is not installed, the target will throw an exception.\n* The queue being written to is NOT transactional.",
            "title": "MSMQ target"
        },
        {
            "location": "/MSMQ-target/#configuration-syntax",
            "text": "<targets>\n  <target xsi:type=\"MSMQ\"\n          name=\"String\"\n          useXmlEncoding=\"Boolean\"\n          encoding=\"Encoding\"\n          layout=\"Layout\"\n          recoverable=\"Boolean\"\n          createQueueIfNotExists=\"Boolean\"\n          checkIfQueueExists=\"Boolean\"\n          label=\"Layout\"\n          queue=\"Layout\" />\n</targets>  Read more about using the [[Configuration File]].",
            "title": "Configuration Syntax"
        },
        {
            "location": "/MSMQ-target/#parameters",
            "text": "",
            "title": "Parameters"
        },
        {
            "location": "/MSMQ-target/#general-options",
            "text": "name  - Name of the target.",
            "title": "General Options"
        },
        {
            "location": "/MSMQ-target/#layout-options",
            "text": "useXmlEncoding  - Indicates whether to use the XML format when serializing message.  Boolean  Default: False    encoding  - Encoding to be used when writing text to the queue.  Encoding    layout  - Layout used to format log messages.  Layout  Required. Default:  ${longdate}|${level:uppercase=true}|${logger}|${message}",
            "title": "Layout Options"
        },
        {
            "location": "/MSMQ-target/#queue-options",
            "text": "queue  - Name of the queue to write to.  Layout   Required . \nTo write to a private queue on a local machine use .\\private$\\QueueName. For other available queue names, consult MSMQ documentation.    recoverable  - Indicates whether to use recoverable messages (with guaranteed delivery).  Boolean  Default: False    createQueueIfNotExists  - Indicates whether to create the queue if it doesn't exists. Won't do anything when  checkIfQueueExists  is false.   Boolean  Default: False    checkIfQueueExists  - If false, won't check for the existence of the queue. This is sometimes needed for private remote queues (where the  .exists  would throw an Exception).  Boolean  Default: True    label  - Label to associate with each message.  Layout  Default: \"NLog\"",
            "title": "Queue Options"
        },
        {
            "location": "/MSMQ-target/#notes",
            "text": "The MSMQ target requires that:  NLog.extended.dll be along side the NLog.dll at runtime.  The machine doing the logging have MSMQ installed with the Active Directory Domain Services Integration option. If the option is not installed, the target will throw an exception.\n* The queue being written to is NOT transactional.",
            "title": "Notes"
        },
        {
            "location": "/Network-target/",
            "text": "Sends log messages over the network. \n\n\nFor SOAP-based webservice support over HTTP use \nWebService target\n.\n\n\nSupported in .NET, Silverlight, Compact Framework and Mono.\n\n\nConfiguration Syntax\n\n\n<targets>\n  <target xsi:type=\"Network\"\n          name=\"String\"\n          onOverflow=\"Enum\"\n          newLine=\"Boolean\"\n          lineEnding=\"CRLF|LF|CR|None\"\n          layout=\"Layout\"\n          maxMessageSize=\"Integer\"\n          encoding=\"Encoding\"\n          connectionCacheSize=\"Integer\"\n          maxConnections=\"Integer\"\n          maxQueueSize=\"Integer\"\n          keepConnection=\"Boolean\"\n          onConnectionOverflow=\"Enum\"\n          address=\"Layout\" \n/>\n</targets>\n\n\n\n\nRead more about using the [[Configuration File]].\n\n\nParameters\n\n\nGeneral Options\n\n\n\n\nname\n - Name of the target.\n\n\n\n\nLayout Options\n\n\n\n\nonOverflow\n - Action that should be taken if the message is larger than maxMessageSize.\n\nPossible values:\n\n\nDiscard\n - Discard the entire message.\n\n\nError\n - Report an error.\n\n\n\n\nSplit\n - Split the message into smaller pieces.\n\n\n\n\n\n\nnewLine\n - Indicates whether to append newline at the end of log message. \nBoolean\n Default: False\n\n\n\n\n\n\nlayout\n - Layout used to format log messages. \nLayout\n Required. Default: \n${longdate}|${level:uppercase=true}|${logger}|${message}\n\n\n\n\n\n\nmaxMessageSize\n - Maximum message size in bytes. \nInteger\n Default: 65000\n\n\n\n\n\n\nencoding\n - Encoding to be used. \nEncoding\n Default: utf-8\n\n\n\n\n\n\nlineEnding\n - Line Ending to be used if \nnewLine\n is set to true. \nLineEndingMode\n Default: \nCRLF\n. Not used if \nnewLine\n is \nfalse\n. Introduced in 4.3.8.\nPossible values:\n\n\n\n\nCRLF\n - Carriage Return and Line Feed. (default)\n\n\nCR\n - Carriage Return.\n\n\nLF\n - Line Feed.\n\n\nNone\n - No end of line characters.\n\n\n\n\nConnection Options\n\n\n\n\n\n\nconnectionCacheSize\n - Size of the connection cache (number of connections which are kept alive). \nInteger\n Default: 5  \n\n\n\n\n\n\nkeepConnection\n - Indicates whether to keep connection open whenever possible. Not used for stateless protocols (= http, https) \nBoolean\n Default: \nTrue\n\n\n\n\n\n\nmaxConnections\n - Maximum current connections. 0 = no maximum. \nInteger\n Default: \n0\n. Not used if \nkeepConnection\n is \ntrue\n. Introduced in NLog 4.2.1\n\n\n\n\n\n\nonConnectionOverflow\n - Action that should be taken if the will be more connections than \nmaxConnections\n . Introduced in NLog 4.2.1. \nPossible values:\n\n\n\n\nAllowNewConnnection\n - Just allow it. (default)\n\n\nBlock\n - Block until there's more room in the queue.\n\n\n\n\nDiscardMessage\n - Discard the connection item.\n\n\n\n\n\n\nmaxQueueSize\n - Maximum queue size. Only used for TCP (not http/https/udp). Will removes messages when if too many. 0 is no max. \nInteger\n. Default: 0\n\n\n\n\n\n\naddress\n - Network address. \nLayout\n\nThe network address can be:\n\n\n\n\ntcp://host:port - TCP (auto select IPv4/IPv6) (not supported on Windows Phone 7.0)\n\n\ntcp4://host:port - force TCP/IPv4 (not supported on Windows Phone 7.0)\n\n\ntcp6://host:port - force TCP/IPv6 (not supported on Windows Phone 7.0)\n\n\nudp://host:port - UDP (auto select IPv4/IPv6, not supported on Silverlight and on Windows Phone 7.0)\n\n\nudp4://host:port - force UDP/IPv4 (not supported on Silverlight and on Windows Phone 7.0)\n\n\nudp6://host:port - force UDP/IPv6 (not supported on Silverlight and on Windows Phone 7.0)\n\n\nhttp://host:port/pageName - HTTP using POST verb\n\n\nhttps://host:port/pageName - HTTPS using POST verb",
            "title": "Network target"
        },
        {
            "location": "/Network-target/#configuration-syntax",
            "text": "<targets>\n  <target xsi:type=\"Network\"\n          name=\"String\"\n          onOverflow=\"Enum\"\n          newLine=\"Boolean\"\n          lineEnding=\"CRLF|LF|CR|None\"\n          layout=\"Layout\"\n          maxMessageSize=\"Integer\"\n          encoding=\"Encoding\"\n          connectionCacheSize=\"Integer\"\n          maxConnections=\"Integer\"\n          maxQueueSize=\"Integer\"\n          keepConnection=\"Boolean\"\n          onConnectionOverflow=\"Enum\"\n          address=\"Layout\" \n/>\n</targets>  Read more about using the [[Configuration File]].",
            "title": "Configuration Syntax"
        },
        {
            "location": "/Network-target/#parameters",
            "text": "",
            "title": "Parameters"
        },
        {
            "location": "/Network-target/#general-options",
            "text": "name  - Name of the target.",
            "title": "General Options"
        },
        {
            "location": "/Network-target/#layout-options",
            "text": "onOverflow  - Action that should be taken if the message is larger than maxMessageSize. \nPossible values:  Discard  - Discard the entire message.  Error  - Report an error.   Split  - Split the message into smaller pieces.    newLine  - Indicates whether to append newline at the end of log message.  Boolean  Default: False    layout  - Layout used to format log messages.  Layout  Required. Default:  ${longdate}|${level:uppercase=true}|${logger}|${message}    maxMessageSize  - Maximum message size in bytes.  Integer  Default: 65000    encoding  - Encoding to be used.  Encoding  Default: utf-8    lineEnding  - Line Ending to be used if  newLine  is set to true.  LineEndingMode  Default:  CRLF . Not used if  newLine  is  false . Introduced in 4.3.8.\nPossible values:   CRLF  - Carriage Return and Line Feed. (default)  CR  - Carriage Return.  LF  - Line Feed.  None  - No end of line characters.",
            "title": "Layout Options"
        },
        {
            "location": "/Network-target/#connection-options",
            "text": "connectionCacheSize  - Size of the connection cache (number of connections which are kept alive).  Integer  Default: 5      keepConnection  - Indicates whether to keep connection open whenever possible. Not used for stateless protocols (= http, https)  Boolean  Default:  True    maxConnections  - Maximum current connections. 0 = no maximum.  Integer  Default:  0 . Not used if  keepConnection  is  true . Introduced in NLog 4.2.1    onConnectionOverflow  - Action that should be taken if the will be more connections than  maxConnections  . Introduced in NLog 4.2.1. \nPossible values:   AllowNewConnnection  - Just allow it. (default)  Block  - Block until there's more room in the queue.   DiscardMessage  - Discard the connection item.    maxQueueSize  - Maximum queue size. Only used for TCP (not http/https/udp). Will removes messages when if too many. 0 is no max.  Integer . Default: 0    address  - Network address.  Layout \nThe network address can be:   tcp://host:port - TCP (auto select IPv4/IPv6) (not supported on Windows Phone 7.0)  tcp4://host:port - force TCP/IPv4 (not supported on Windows Phone 7.0)  tcp6://host:port - force TCP/IPv6 (not supported on Windows Phone 7.0)  udp://host:port - UDP (auto select IPv4/IPv6, not supported on Silverlight and on Windows Phone 7.0)  udp4://host:port - force UDP/IPv4 (not supported on Silverlight and on Windows Phone 7.0)  udp6://host:port - force UDP/IPv6 (not supported on Silverlight and on Windows Phone 7.0)  http://host:port/pageName - HTTP using POST verb  https://host:port/pageName - HTTPS using POST verb",
            "title": "Connection Options"
        },
        {
            "location": "/NLogViewer-target/",
            "text": "Sends log messages to the remote instance of NLog Viewer. \n\n\nSupported in .NET, Silverlight, Compact Framework and Mono.\n\n\nConfiguration Syntax\n\n\n<targets>\n  <target xsi:type=\"NLogViewer\"\n          name=\"String\"\n          newLine=\"Boolean\"\n          layout=\"Layout\"\n          onOverflow=\"Enum\"\n          maxMessageSize=\"Integer\"\n          encoding=\"Encoding\"\n          connectionCacheSize=\"Integer\"\n          address=\"Layout\"\n          keepConnection=\"Boolean\"\n          includeSourceInfo=\"Boolean\"\n          includeCallSite=\"Boolean\"\n          appInfo=\"String\"\n          ndcItemSeparator=\"String\"\n          includeNdc=\"Boolean\"\n          includeNLogData=\"Boolean\"\n          includeMdc=\"Boolean\">\n    <parameter layout=\"Layout\" name=\"String\"/><!-- repeated -->\n  </target>\n</targets>\n\n\n\n\nRead more about using the \nConfiguration File\n.\n\n\nParameters\n\n\nGeneral Options\n\n\n\n\nname\n - Name of the target.\n\n\n\n\nLayout Options\n\n\n\n\n\n\nnewLine\n - Indicates whether to append newline at the end of log message. \nBoolean\n Default: False\n\n\n\n\n\n\nlayout\n - Instance of Log4JXmlEventLayout that is used to format log messages. \nLayout\n Default: ${longdate}|${level:uppercase=true}|${logger}|${message}\n\n\n\n\n\n\nonOverflow\n - Action that should be taken if the message is larger than maxMessageSize.\n\nPossible values:\n\n\n\n\nDiscard\n - Discard the entire message.\n\n\nError\n - Report an error.\n\n\n\n\nSplit\n - Split the message into smaller pieces.\n\n\n\n\n\n\nmaxMessageSize\n - Maximum message size in bytes. \nInteger\n Default: 65000\n\n\n\n\n\n\nencoding\n - Encoding to be used. \nEncoding\n Default: utf-8\n\n\n\n\n\n\nConnection Options\n\n\n\n\n\n\nconnectionCacheSize\n - Size of the connection cache (number of connections which are kept alive). \nInteger\n Default: 5\n\n\n\n\nThis parameter is not supported in:\n\n NLog v1.0 for .NET Compact Framework 1.0\n\n NLog v1.0 for .NET Compact Framework 2.0\n\n NLog v1.0 for .NET Framework 1.0\n\n NLog v1.0 for .NET Framework 1.1\n* NLog v1.0 for .NET Framework 2.0\n\n\n\n\n\n\n\n\naddress\n - Network address. \nLayout\n\nThe network address can be:\n\n\n\n\ntcp://host:port - TCP (auto select IPv4/IPv6) (not supported on Windows Phone 7.0)\n\n\ntcp4://host:port - force TCP/IPv4 (not supported on Windows Phone 7.0)\n\n\ntcp6://host:port - force TCP/IPv6 (not supported on Windows Phone 7.0)\n\n\nudp://host:port - UDP (auto select IPv4/IPv6, not supported on Silverlight and on Windows Phone 7.0)\n\n\nudp4://host:port - force UDP/IPv4 (not supported on Silverlight and on Windows Phone 7.0)\n\n\nudp6://host:port - force UDP/IPv6 (not supported on Silverlight and on Windows Phone 7.0)\n\n\nhttp://host:port/pageName - HTTP using POST verb\n\n\n\n\nhttps://host:port/pageName - HTTPS using POST verb\n  For SOAP-based webservice support over HTTP use WebService target.\n\n\n\n\n\n\nkeepConnection\n - Indicates whether to keep connection open whenever possible. \nBoolean\n Default: True\n\n\n\n\n\n\nPayload Options\n\n\n\n\n\n\nincludeSourceInfo\n - Indicates whether to include source info (file name and line number) in the information sent over the network. \nBoolean\n  \n\n\n\n\nThis parameter is not supported in:\n\n NLog v1.0 for .NET Compact Framework 1.0\n\n NLog v1.0 for .NET Compact Framework 2.0\n\n NLog v2.0 for .NET Compact Framework 2.0\n\n NLog v2.0 for .NET Compact Framework 3.5\n\n NLog v2.0 for Silverlight 2.0\n\n NLog v2.0 for Silverlight 3.0\n\n NLog v2.0 for Silverlight 4.0\n\n NLog v2.0 for Silverlight for Windows Phone 7\n* NLog v2.0 for Silverlight for Windows Phone 7.1\n\n\n\n\n\n\n\n\nincludeCallSite\n - Indicates whether to include call site (class and method name) in the information sent over the network. \nBoolean\n  \n\n\n\n\nThis parameter is not supported in:\n\n NLog v1.0 for .NET Compact Framework 1.0\n\n NLog v1.0 for .NET Compact Framework 2.0\n\n NLog v2.0 for .NET Compact Framework 2.0\n\n NLog v2.0 for .NET Compact Framework 3.5\n\n\n\n\n\n\n\n\nappInfo\n - AppInfo field. By default it's the friendly name of the current AppDomain.\n\n\n\n\n\n\nndcItemSeparator\n - NDC item separator.\n\n\n\n\nThis parameter is not supported in:\n\n NLog v1.0 for .NET Compact Framework 1.0\n\n NLog v1.0 for .NET Compact Framework 2.0\n\n NLog v1.0 for .NET Framework 1.0\n\n NLog v1.0 for .NET Framework 1.1\n* NLog v1.0 for .NET Framework 2.0\n\n\n\n\n\n\n\n\nincludeNdc\n - Indicates whether to include NestedDiagnosticsContext stack contents. \nBoolean\n\n\n\n\n\n\nincludeNLogData\n - Indicates whether to include NLog-specific extensions to log4j schema. \nBoolean\n\n\n\n\n\n\nincludeMdc\n - Indicates whether to include MappedDiagnosticsContext dictionary contents. \nBoolean\n\n\n\n\n\n\nparameters\n - The collection of parameters. Each parameter contains a mapping between NLog layout and a named parameter. \nCollection\n \nEach collection item is represented by \\\n element with the following attributes:\n\n\n\n\n\n\nlayout\n - Layout that should be use to calcuate the value for the parameter. \nLayout\n Required.\n\n\n\n\n\n\nname\n - Viewer parameter name. Required.",
            "title": "NLogViewer target"
        },
        {
            "location": "/NLogViewer-target/#configuration-syntax",
            "text": "<targets>\n  <target xsi:type=\"NLogViewer\"\n          name=\"String\"\n          newLine=\"Boolean\"\n          layout=\"Layout\"\n          onOverflow=\"Enum\"\n          maxMessageSize=\"Integer\"\n          encoding=\"Encoding\"\n          connectionCacheSize=\"Integer\"\n          address=\"Layout\"\n          keepConnection=\"Boolean\"\n          includeSourceInfo=\"Boolean\"\n          includeCallSite=\"Boolean\"\n          appInfo=\"String\"\n          ndcItemSeparator=\"String\"\n          includeNdc=\"Boolean\"\n          includeNLogData=\"Boolean\"\n          includeMdc=\"Boolean\">\n    <parameter layout=\"Layout\" name=\"String\"/><!-- repeated -->\n  </target>\n</targets>  Read more about using the  Configuration File .",
            "title": "Configuration Syntax"
        },
        {
            "location": "/NLogViewer-target/#parameters",
            "text": "",
            "title": "Parameters"
        },
        {
            "location": "/NLogViewer-target/#general-options",
            "text": "name  - Name of the target.",
            "title": "General Options"
        },
        {
            "location": "/NLogViewer-target/#layout-options",
            "text": "newLine  - Indicates whether to append newline at the end of log message.  Boolean  Default: False    layout  - Instance of Log4JXmlEventLayout that is used to format log messages.  Layout  Default: ${longdate}|${level:uppercase=true}|${logger}|${message}    onOverflow  - Action that should be taken if the message is larger than maxMessageSize. \nPossible values:   Discard  - Discard the entire message.  Error  - Report an error.   Split  - Split the message into smaller pieces.    maxMessageSize  - Maximum message size in bytes.  Integer  Default: 65000    encoding  - Encoding to be used.  Encoding  Default: utf-8",
            "title": "Layout Options"
        },
        {
            "location": "/NLogViewer-target/#connection-options",
            "text": "connectionCacheSize  - Size of the connection cache (number of connections which are kept alive).  Integer  Default: 5   This parameter is not supported in:  NLog v1.0 for .NET Compact Framework 1.0  NLog v1.0 for .NET Compact Framework 2.0  NLog v1.0 for .NET Framework 1.0  NLog v1.0 for .NET Framework 1.1\n* NLog v1.0 for .NET Framework 2.0     address  - Network address.  Layout \nThe network address can be:   tcp://host:port - TCP (auto select IPv4/IPv6) (not supported on Windows Phone 7.0)  tcp4://host:port - force TCP/IPv4 (not supported on Windows Phone 7.0)  tcp6://host:port - force TCP/IPv6 (not supported on Windows Phone 7.0)  udp://host:port - UDP (auto select IPv4/IPv6, not supported on Silverlight and on Windows Phone 7.0)  udp4://host:port - force UDP/IPv4 (not supported on Silverlight and on Windows Phone 7.0)  udp6://host:port - force UDP/IPv6 (not supported on Silverlight and on Windows Phone 7.0)  http://host:port/pageName - HTTP using POST verb   https://host:port/pageName - HTTPS using POST verb\n  For SOAP-based webservice support over HTTP use WebService target.    keepConnection  - Indicates whether to keep connection open whenever possible.  Boolean  Default: True",
            "title": "Connection Options"
        },
        {
            "location": "/NLogViewer-target/#payload-options",
            "text": "includeSourceInfo  - Indicates whether to include source info (file name and line number) in the information sent over the network.  Boolean      This parameter is not supported in:  NLog v1.0 for .NET Compact Framework 1.0  NLog v1.0 for .NET Compact Framework 2.0  NLog v2.0 for .NET Compact Framework 2.0  NLog v2.0 for .NET Compact Framework 3.5  NLog v2.0 for Silverlight 2.0  NLog v2.0 for Silverlight 3.0  NLog v2.0 for Silverlight 4.0  NLog v2.0 for Silverlight for Windows Phone 7\n* NLog v2.0 for Silverlight for Windows Phone 7.1     includeCallSite  - Indicates whether to include call site (class and method name) in the information sent over the network.  Boolean      This parameter is not supported in:  NLog v1.0 for .NET Compact Framework 1.0  NLog v1.0 for .NET Compact Framework 2.0  NLog v2.0 for .NET Compact Framework 2.0  NLog v2.0 for .NET Compact Framework 3.5     appInfo  - AppInfo field. By default it's the friendly name of the current AppDomain.    ndcItemSeparator  - NDC item separator.   This parameter is not supported in:  NLog v1.0 for .NET Compact Framework 1.0  NLog v1.0 for .NET Compact Framework 2.0  NLog v1.0 for .NET Framework 1.0  NLog v1.0 for .NET Framework 1.1\n* NLog v1.0 for .NET Framework 2.0     includeNdc  - Indicates whether to include NestedDiagnosticsContext stack contents.  Boolean    includeNLogData  - Indicates whether to include NLog-specific extensions to log4j schema.  Boolean    includeMdc  - Indicates whether to include MappedDiagnosticsContext dictionary contents.  Boolean    parameters  - The collection of parameters. Each parameter contains a mapping between NLog layout and a named parameter.  Collection  \nEach collection item is represented by \\  element with the following attributes:    layout  - Layout that should be use to calcuate the value for the parameter.  Layout  Required.    name  - Viewer parameter name. Required.",
            "title": "Payload Options"
        },
        {
            "location": "/Null-target/",
            "text": "Discards log messages. Used mainly for debugging and benchmarking. \n\n\nSupported in .NET, Silverligt, Compact Framework and Mono.\n\n\nConfiguration Syntax\n\n\n<targets>\n  <target xsi:type=\"Null\" name=\"String\" formatMessage=\"Boolean\" layout=\"Layout\" />\n</targets>\n\n\n\n\nRead more about using the [[Configuration File]].\n\n\nParameters\n\n\nGeneral Options\n\n\n\n\nname\n - Name of the target.\n\n\n\n\nLayout Options\n\n\n\n\n\n\nformatMessage\n - Indicates whether to perform layout calculation. \nBoolean\n Default: False\n\n\n\n\n\n\nlayout\n - Layout used to format log messages. \nBoolean\n Required. Default: \n${longdate}|${level:uppercase=true}|${logger}|${message}\n\n\n\n\n\n\nExample\n\n\n<targets>\n  <target xsi:type=\"Null\" name=\"BlackHole\" formatMessage=\"false\"  />\n</targets>\n<rules>\n   <!-- ignore events written that are written to a logger which starts with \"Namespace.\" -->\n   <logger name=\"Namespace.*\" minlevel=\"Debug\" writeTo=\"BlackHole\" final=\"true\" />     \n</rules>",
            "title": "Null target"
        },
        {
            "location": "/Null-target/#configuration-syntax",
            "text": "<targets>\n  <target xsi:type=\"Null\" name=\"String\" formatMessage=\"Boolean\" layout=\"Layout\" />\n</targets>  Read more about using the [[Configuration File]].",
            "title": "Configuration Syntax"
        },
        {
            "location": "/Null-target/#parameters",
            "text": "",
            "title": "Parameters"
        },
        {
            "location": "/Null-target/#general-options",
            "text": "name  - Name of the target.",
            "title": "General Options"
        },
        {
            "location": "/Null-target/#layout-options",
            "text": "formatMessage  - Indicates whether to perform layout calculation.  Boolean  Default: False    layout  - Layout used to format log messages.  Boolean  Required. Default:  ${longdate}|${level:uppercase=true}|${logger}|${message}",
            "title": "Layout Options"
        },
        {
            "location": "/Null-target/#example",
            "text": "<targets>\n  <target xsi:type=\"Null\" name=\"BlackHole\" formatMessage=\"false\"  />\n</targets>\n<rules>\n   <!-- ignore events written that are written to a logger which starts with \"Namespace.\" -->\n   <logger name=\"Namespace.*\" minlevel=\"Debug\" writeTo=\"BlackHole\" final=\"true\" />     \n</rules>",
            "title": "Example"
        },
        {
            "location": "/OutputDebugString-target/",
            "text": "Outputs log messages through the OutputDebugString() Win32 API. \n\n\nSupported in .NET, Compact Framework and Mono.\n\n\nConfiguration Syntax\n\n\n<targets>\n  <target xsi:type=\"OutputDebugString\" name=\"String\" layout=\"Layout\" />\n</targets>\n\n\n\n\nRead more about using the [[Configuration File]].\n\n\nParameters\n\n\nGeneral Options\n\n\n\n\nname\n - Name of the target.\n\n\n\n\nLayout Options\n\n\n\n\nlayout\n - Layout used to format log messages. Required. Default: \n${longdate}|${level:uppercase=true}|${logger}|${message}",
            "title": "OutputDebugString target"
        },
        {
            "location": "/OutputDebugString-target/#configuration-syntax",
            "text": "<targets>\n  <target xsi:type=\"OutputDebugString\" name=\"String\" layout=\"Layout\" />\n</targets>  Read more about using the [[Configuration File]].",
            "title": "Configuration Syntax"
        },
        {
            "location": "/OutputDebugString-target/#parameters",
            "text": "",
            "title": "Parameters"
        },
        {
            "location": "/OutputDebugString-target/#general-options",
            "text": "name  - Name of the target.",
            "title": "General Options"
        },
        {
            "location": "/OutputDebugString-target/#layout-options",
            "text": "layout  - Layout used to format log messages. Required. Default:  ${longdate}|${level:uppercase=true}|${logger}|${message}",
            "title": "Layout Options"
        },
        {
            "location": "/PerfCounter-target/",
            "text": "Increments specified performance counter on each write. \n\n\nSupported in .NET and Mono.\n\n\nConfiguration Syntax\n\n\n<targets>\n  <target xsi:type=\"PerfCounter\"\n          counterName=\"String\"\n          instanceName=\"String\"\n          counterHelp=\"String\"\n          counterType=\"Enum\"\n          autoCreate=\"Boolean\"\n          categoryName=\"String\"\n          incrementValue=\"Layout\"\n           />\n</targets>\n\n\n\n\nRead more about using the [[Configuration File]].\n\n\nParameters\n\n\nGeneral Options\n\n\n\n\ncounterName\n - Name of the counter.\n\n\n\n\nPerformance Counter Options\n\n\n\n\n\n\ninstanceName\n - Performance counter instance name.\n\n\n\n\n\n\ncounterHelp\n - Counter help text.  \n\n\n\n\n\n\ncounterType\n - Performance counter type. Default: \nNumberOfItems32\n\nPossible values:\n\n\n\n\nAverageBase\n\n\nAverageCount64\n\n\nAverageTimer32\n\n\nCounterDelta32\n\n\nCounterDelta64\n\n\nCounterMultiBase\n\n\nCounterMultiTimer\n\n\nCounterMultiTimer100Ns\n\n\nCounterMultiTimer100NsInverse\n\n\nCounterMultiTimerInverse\n\n\nCounterTimer\n\n\nCounterTimerInverse\n\n\nCountPerTimeInterval32\n\n\nCountPerTimeInterval64\n\n\nElapsedTime\n\n\nNumberOfItems32\n\n\nNumberOfItems64\n\n\nNumberOfItemsHEX32\n\n\nNumberOfItemsHEX64\n\n\nRateOfCountsPerSecond32\n\n\nRateOfCountsPerSecond64\n\n\nRawBase\n\n\nRawFraction\n\n\nSampleBase\n\n\nSampleCounter\n\n\nSampleFraction\n\n\nTimer100Ns\n\n\n\n\nTimer100NsInverse\n\n\n\n\n\n\nautoCreate\n - Indicates whether performance counter should be automatically created.\n\n\n\n\n\n\ncategoryName\n - Name of the performance counter category. Required.\n\n\n\n\n\n\ncounterName\n - Name of the performance counter. Required.\n\n\n\n\n\n\nincrementValue\n - Introduced in NLog 4.2. The value by which to increment the counter. Layout. Default: 1.",
            "title": "PerfCounter target"
        },
        {
            "location": "/PerfCounter-target/#configuration-syntax",
            "text": "<targets>\n  <target xsi:type=\"PerfCounter\"\n          counterName=\"String\"\n          instanceName=\"String\"\n          counterHelp=\"String\"\n          counterType=\"Enum\"\n          autoCreate=\"Boolean\"\n          categoryName=\"String\"\n          incrementValue=\"Layout\"\n           />\n</targets>  Read more about using the [[Configuration File]].",
            "title": "Configuration Syntax"
        },
        {
            "location": "/PerfCounter-target/#parameters",
            "text": "",
            "title": "Parameters"
        },
        {
            "location": "/PerfCounter-target/#general-options",
            "text": "counterName  - Name of the counter.",
            "title": "General Options"
        },
        {
            "location": "/PerfCounter-target/#performance-counter-options",
            "text": "instanceName  - Performance counter instance name.    counterHelp  - Counter help text.      counterType  - Performance counter type. Default:  NumberOfItems32 \nPossible values:   AverageBase  AverageCount64  AverageTimer32  CounterDelta32  CounterDelta64  CounterMultiBase  CounterMultiTimer  CounterMultiTimer100Ns  CounterMultiTimer100NsInverse  CounterMultiTimerInverse  CounterTimer  CounterTimerInverse  CountPerTimeInterval32  CountPerTimeInterval64  ElapsedTime  NumberOfItems32  NumberOfItems64  NumberOfItemsHEX32  NumberOfItemsHEX64  RateOfCountsPerSecond32  RateOfCountsPerSecond64  RawBase  RawFraction  SampleBase  SampleCounter  SampleFraction  Timer100Ns   Timer100NsInverse    autoCreate  - Indicates whether performance counter should be automatically created.    categoryName  - Name of the performance counter category. Required.    counterName  - Name of the performance counter. Required.    incrementValue  - Introduced in NLog 4.2. The value by which to increment the counter. Layout. Default: 1.",
            "title": "Performance Counter Options"
        },
        {
            "location": "/PostFilteringWrapper-target/",
            "text": "Filters buffered log entries based on a set of conditions that are evaluated on a group of events. \n\n\nSupported in .NET, Silverlight, Compact Framework and Mono.\n\n\nConfiguration Syntax\n\n\n<targets>\n  <target xsi:type=\"PostFilteringWrapper\" name=\"String\" defaultFilter=\"Condition\">\n    <target xsi:type=\"wrappedTargetType\" ...target properties... />\n    <when exists=\"Condition\" filter=\"Condition\"/><!-- repeated -->\n  </target>\n</targets>\n\n\n\n\nParameters\n\n\nGeneral Options\n\n\n\n\nname\n - Name of the target.\n\n\n\n\nFiltering Options\n\n\n\n\ndefaultFilter\n - Default filter to be applied when no specific rule matches. Condition\n\n\n\n\nFiltering Rules\n\n\n\n\nrules\n - The collection of filtering rules. The rules are processed top-down and the first rule that matches determines the filtering condition to be applied to log events. Collection\n\nEach collection item is represented by \\\n element with the following attributes:  \n\n\nexists\n - Condition to be tested. Condition Required.\n\n\nfilter\n - Resulting filter to be applied when the condition matches. Condition Required.\n\n\n\n\nRemarks\n\n\nPostFilteringWrapper must be used with some type of buffering target or wrapper, such as AsyncTargetWrapper, BufferingWrapper or ASPNetBufferingWrapper.",
            "title": "PostFilteringWrapper target"
        },
        {
            "location": "/PostFilteringWrapper-target/#configuration-syntax",
            "text": "<targets>\n  <target xsi:type=\"PostFilteringWrapper\" name=\"String\" defaultFilter=\"Condition\">\n    <target xsi:type=\"wrappedTargetType\" ...target properties... />\n    <when exists=\"Condition\" filter=\"Condition\"/><!-- repeated -->\n  </target>\n</targets>",
            "title": "Configuration Syntax"
        },
        {
            "location": "/PostFilteringWrapper-target/#parameters",
            "text": "",
            "title": "Parameters"
        },
        {
            "location": "/PostFilteringWrapper-target/#general-options",
            "text": "name  - Name of the target.",
            "title": "General Options"
        },
        {
            "location": "/PostFilteringWrapper-target/#filtering-options",
            "text": "defaultFilter  - Default filter to be applied when no specific rule matches. Condition",
            "title": "Filtering Options"
        },
        {
            "location": "/PostFilteringWrapper-target/#filtering-rules",
            "text": "rules  - The collection of filtering rules. The rules are processed top-down and the first rule that matches determines the filtering condition to be applied to log events. Collection \nEach collection item is represented by \\  element with the following attributes:    exists  - Condition to be tested. Condition Required.  filter  - Resulting filter to be applied when the condition matches. Condition Required.",
            "title": "Filtering Rules"
        },
        {
            "location": "/PostFilteringWrapper-target/#remarks",
            "text": "PostFilteringWrapper must be used with some type of buffering target or wrapper, such as AsyncTargetWrapper, BufferingWrapper or ASPNetBufferingWrapper.",
            "title": "Remarks"
        },
        {
            "location": "/RandomizeGroup-target/",
            "text": "Sends log messages to a randomly selected target. \n\n\nSupported in .NET, Silverligt, Compact Framework and Mono.\n\n\nConfiguration Syntax\n\n\n<targets>\n  <target xsi:type=\"RandomizeGroup\" name=\"String\">\n    <target xsi:type=\"wrappedTargetType\" ... />\n    <target xsi:type=\"wrappedTargetType\" ... />\n    ...\n    <target xsi:type=\"wrappedTargetType\" ... />\n  </target>\n</targets>\n\n\n\n\nParameters\n\n\nGeneral Options\n\n\n\n\nname\n - Name of the target.",
            "title": "RandomizeGroup target"
        },
        {
            "location": "/RandomizeGroup-target/#configuration-syntax",
            "text": "<targets>\n  <target xsi:type=\"RandomizeGroup\" name=\"String\">\n    <target xsi:type=\"wrappedTargetType\" ... />\n    <target xsi:type=\"wrappedTargetType\" ... />\n    ...\n    <target xsi:type=\"wrappedTargetType\" ... />\n  </target>\n</targets>",
            "title": "Configuration Syntax"
        },
        {
            "location": "/RandomizeGroup-target/#parameters",
            "text": "",
            "title": "Parameters"
        },
        {
            "location": "/RandomizeGroup-target/#general-options",
            "text": "name  - Name of the target.",
            "title": "General Options"
        },
        {
            "location": "/RepeatingWrapper-target/",
            "text": "Repeats each log event the specified number of times. \n\n\nSupported in .NET, Silverlight, Compact Framework and Mono.\n\n\nConfiguration Syntax\n\n\n<targets>\n  <target xsi:type=\"RepeatingWrapper\" name=\"String\" repeatCount=\"Integer\">\n    <target xsi:type=\"wrappedTargetType\" ...target properties... />\n  </target>\n</targets>\n\n\n\n\nParameters\n\n\nGeneral Options\n\n\n\n\nname\n - Name of the target.\n\n\n\n\nRepeating Options\n\n\n\n\nrepeatCount\n - Number of times to repeat each log message. Integer Default: 3",
            "title": "RepeatingWrapper target"
        },
        {
            "location": "/RepeatingWrapper-target/#configuration-syntax",
            "text": "<targets>\n  <target xsi:type=\"RepeatingWrapper\" name=\"String\" repeatCount=\"Integer\">\n    <target xsi:type=\"wrappedTargetType\" ...target properties... />\n  </target>\n</targets>",
            "title": "Configuration Syntax"
        },
        {
            "location": "/RepeatingWrapper-target/#parameters",
            "text": "",
            "title": "Parameters"
        },
        {
            "location": "/RepeatingWrapper-target/#general-options",
            "text": "name  - Name of the target.",
            "title": "General Options"
        },
        {
            "location": "/RepeatingWrapper-target/#repeating-options",
            "text": "repeatCount  - Number of times to repeat each log message. Integer Default: 3",
            "title": "Repeating Options"
        },
        {
            "location": "/RetryingWrapper-target/",
            "text": "Retries in case of write error. \n\n\nSupported in .NET, Silverligt, Compact Framework and Mono.\n\n\nConfiguration Syntax\n\n\n<targets>\n  <target xsi:type=\"RetryingWrapper\" name=\"String\" retryDelayMilliseconds=\"Integer\" retryCount=\"Integer\">\n    <target xsi:type=\"wrappedTargetType\" ...target properties... />\n  </target>\n</targets>\n\n\n\n\nParameters\n\n\nGeneral Options\n\n\n\n\nname\n - Name of the target.\n\n\n\n\nRetrying Options\n\n\n\n\n\n\nretryDelayMilliseconds\n - Time to wait between retries in milliseconds. Integer Default: 100\n\n\n\n\n\n\nretryCount\n - Number of retries that should be attempted on the wrapped target in case of a failure. Integer Default: 3",
            "title": "RetryingWrapper target"
        },
        {
            "location": "/RetryingWrapper-target/#configuration-syntax",
            "text": "<targets>\n  <target xsi:type=\"RetryingWrapper\" name=\"String\" retryDelayMilliseconds=\"Integer\" retryCount=\"Integer\">\n    <target xsi:type=\"wrappedTargetType\" ...target properties... />\n  </target>\n</targets>",
            "title": "Configuration Syntax"
        },
        {
            "location": "/RetryingWrapper-target/#parameters",
            "text": "",
            "title": "Parameters"
        },
        {
            "location": "/RetryingWrapper-target/#general-options",
            "text": "name  - Name of the target.",
            "title": "General Options"
        },
        {
            "location": "/RetryingWrapper-target/#retrying-options",
            "text": "retryDelayMilliseconds  - Time to wait between retries in milliseconds. Integer Default: 100    retryCount  - Number of retries that should be attempted on the wrapped target in case of a failure. Integer Default: 3",
            "title": "Retrying Options"
        },
        {
            "location": "/RichTextBox-target/",
            "text": "Log text a Rich Text Box control in an existing or new form. \n\n\nSupported in .NET\n\n\nConfiguration Syntax\n\n\n<targets>\n  <target xsi:type=\"RichTextBox\"\n          name=\"String\"\n          layout=\"Layout\"\n          height=\"Integer\"\n          autoScroll=\"Boolean\"\n          maxLines=\"Integer\"\n          showMinimized=\"Boolean\"\n          toolWindow=\"Boolean\"\n          controlName=\"String\"\n          formName=\"String\"\n          width=\"Integer\"\n          useDefaultRowColoringRules=\"Boolean\">\n    <word-coloring backgroundColor=\"String\" fontColor=\"String\" ignoreCase=\"Boolean\"\n                regex=\"String\" style=\"Enum\" text=\"String\"\n                wholeWords=\"Boolean\"/><!-- repeated -->\n    <row-coloring backgroundColor=\"String\" condition=\"Condition\" fontColor=\"String\"\n               style=\"Enum\"/><!-- repeated -->\n  </target>\n</targets>\n\n\n\n\nRead more about using the [[Configuration File]].\n\n\nParameters\n\n\nGeneral Options\n\n\n\n\nname\n - Name of the target.\n\n\n\n\nLayout Options\n\n\n\n\nlayout\n - Layout used to format log messages. Required. Default: ${longdate}|${level:uppercase=true}|${logger}|${message}\n\n\n\n\nForm Options\n\n\n\n\n\n\nheight\n - Initial height of the form with rich text box.\n\nThis parameter is ignored when logging to existing form control.   \n\n\n\n\nThis parameter is not supported in:\n\n NLog v1.0 for .NET Framework 1.0\n\n NLog v1.0 for .NET Framework 1.1\n* NLog v1.0 for .NET Framework 2.0\n\n\n\n\n\n\n\n\nautoScroll\n - Indicates whether scroll bar will be moved automatically to show most recent log entries.  \n\n\n\n\nThis parameter is not supported in:\n\n NLog v1.0 for .NET Framework 1.0\n\n NLog v1.0 for .NET Framework 1.1\n* NLog v1.0 for .NET Framework 2.0\n\n\n\n\n\n\n\n\nmaxLines\n - Maximum number of lines the rich text box will store (or 0 to disable this feature).\n\nAfter exceeding the maximum number, first line will be deleted.  \n\n\n\n\nThis parameter is not supported in:\n\n NLog v1.0 for .NET Framework 1.0\n\n NLog v1.0 for .NET Framework 1.1\n* NLog v1.0 for .NET Framework 2.0\n\n\n\n\n\n\n\n\nshowMinimized\n - Indicates whether the created form will be initially minimized.\n\nThis parameter is ignored when logging to existing form control.  \n\n\n\n\nThis parameter is not supported in:\n\n NLog v1.0 for .NET Framework 1.0\n\n NLog v1.0 for .NET Framework 1.1\n* NLog v1.0 for .NET Framework 2.0\n\n\n\n\n\n\n\n\ntoolWindow\n - Indicates whether the created window will be a tool window. Default: True\n\nThis parameter is ignored when logging to existing form control. Tool windows have thin border, and do not show up in the task bar.  \n\n\n\n\nThis parameter is not supported in:\n\n NLog v1.0 for .NET Framework 1.0\n\n NLog v1.0 for .NET Framework 1.1\n* NLog v1.0 for .NET Framework 2.0\n\n\n\n\n\n\n\n\ncontrolName\n - Name of RichTextBox to which Nlog will write.\n\n\n\n\n\n\nformName\n - Name of the Form on which the control is located. If there is no open form of a specified name then NLog will create a new one.\n\n\n\n\n\n\nwidth\n - Initial width of the form with rich text box.\n\nThis parameter is ignored when logging to existing form control.  \n\n\n\n\nThis parameter is not supported in:\n\n NLog v1.0 for .NET Framework 1.0\n\n NLog v1.0 for .NET Framework 1.1\n* NLog v1.0 for .NET Framework 2.0\n\n\n\n\n\n\n\n\nHighlighting Options\n\n\n\n\nwordColoringRules\n - The word highlighting rules. Collection\n\nEach collection item is represented by \\\n element with the following attributes:  \n\n\nbackgroundColor\n - Background color. Names are identical with KnownColor enum extended with Empty value which means that background color won't be changed. Default: Empty\n\n\nfontColor\n - Font color. Names are identical with KnownColor enum extended with Empty value which means that font color won't be changed. Default: Empty\n\n\nignoreCase\n - Indicates whether to ignore case when comparing texts. Boolean Default: False\n\n\nregex\n - Regular expression to be matched. You must specify either text or regex.\n\n\n\n\nstyle\n - Font style of matched text. Possible values are the same as in FontStyle enum in System.Drawing.\n    Possible values:\n\n\n\n\nBold -\n\n\nItalic -\n\n\nRegular -\n\n\nStrikeout -\n\n\nUnderline -\n\n\n\n\n\n\n\n\ntext\n - Text to be matched. You must specify either text or regex.\n\n\n\n\n\n\nwholeWords\n - Indicates whether to match whole words only. Boolean Default: False\n\n\n\n\n\n\nuseDefaultRowColoringRules\n - Indicates whether to use default cooring rules.Boolean Default: False\n\n\n\n\n\n\nrowColoringRules\n - The row coloring rules. Collection\n\nEach collection item is represented by \\\n element with the following attributes:  \n\n\n\n\nbackgroundColor\n - Background color. Names are identical with KnownColor enum extended with Empty value which means that background color won't be changed. Default: Empty\n\n\nfontColor\n - Font color. Names are identical with KnownColor enum extended with Empty value which means that font color won't be changed. Default: Empty\n\n\nignoreCase\n - Indicates whether to ignore case when comparing texts. Boolean Default: False\n\n\nregex\n - Regular expression to be matched. You must specify either text or regex.\n\n\nstyle\n - Font style of matched text. Possible values are the same as in FontStyle enum in System.Drawing.\n\n    Possible values:\n\n\nBold -\n\n\nItalic -\n\n\nRegular -\n\n\nStrikeout -\n\n\nUnderline -\nPossible values are the same as in FontStyle enum in System.Drawing",
            "title": "RichTextBox target"
        },
        {
            "location": "/RichTextBox-target/#configuration-syntax",
            "text": "<targets>\n  <target xsi:type=\"RichTextBox\"\n          name=\"String\"\n          layout=\"Layout\"\n          height=\"Integer\"\n          autoScroll=\"Boolean\"\n          maxLines=\"Integer\"\n          showMinimized=\"Boolean\"\n          toolWindow=\"Boolean\"\n          controlName=\"String\"\n          formName=\"String\"\n          width=\"Integer\"\n          useDefaultRowColoringRules=\"Boolean\">\n    <word-coloring backgroundColor=\"String\" fontColor=\"String\" ignoreCase=\"Boolean\"\n                regex=\"String\" style=\"Enum\" text=\"String\"\n                wholeWords=\"Boolean\"/><!-- repeated -->\n    <row-coloring backgroundColor=\"String\" condition=\"Condition\" fontColor=\"String\"\n               style=\"Enum\"/><!-- repeated -->\n  </target>\n</targets>  Read more about using the [[Configuration File]].",
            "title": "Configuration Syntax"
        },
        {
            "location": "/RichTextBox-target/#parameters",
            "text": "",
            "title": "Parameters"
        },
        {
            "location": "/RichTextBox-target/#general-options",
            "text": "name  - Name of the target.",
            "title": "General Options"
        },
        {
            "location": "/RichTextBox-target/#layout-options",
            "text": "layout  - Layout used to format log messages. Required. Default: ${longdate}|${level:uppercase=true}|${logger}|${message}",
            "title": "Layout Options"
        },
        {
            "location": "/RichTextBox-target/#form-options",
            "text": "height  - Initial height of the form with rich text box. \nThis parameter is ignored when logging to existing form control.      This parameter is not supported in:  NLog v1.0 for .NET Framework 1.0  NLog v1.0 for .NET Framework 1.1\n* NLog v1.0 for .NET Framework 2.0     autoScroll  - Indicates whether scroll bar will be moved automatically to show most recent log entries.     This parameter is not supported in:  NLog v1.0 for .NET Framework 1.0  NLog v1.0 for .NET Framework 1.1\n* NLog v1.0 for .NET Framework 2.0     maxLines  - Maximum number of lines the rich text box will store (or 0 to disable this feature). \nAfter exceeding the maximum number, first line will be deleted.     This parameter is not supported in:  NLog v1.0 for .NET Framework 1.0  NLog v1.0 for .NET Framework 1.1\n* NLog v1.0 for .NET Framework 2.0     showMinimized  - Indicates whether the created form will be initially minimized. \nThis parameter is ignored when logging to existing form control.     This parameter is not supported in:  NLog v1.0 for .NET Framework 1.0  NLog v1.0 for .NET Framework 1.1\n* NLog v1.0 for .NET Framework 2.0     toolWindow  - Indicates whether the created window will be a tool window. Default: True \nThis parameter is ignored when logging to existing form control. Tool windows have thin border, and do not show up in the task bar.     This parameter is not supported in:  NLog v1.0 for .NET Framework 1.0  NLog v1.0 for .NET Framework 1.1\n* NLog v1.0 for .NET Framework 2.0     controlName  - Name of RichTextBox to which Nlog will write.    formName  - Name of the Form on which the control is located. If there is no open form of a specified name then NLog will create a new one.    width  - Initial width of the form with rich text box. \nThis parameter is ignored when logging to existing form control.     This parameter is not supported in:  NLog v1.0 for .NET Framework 1.0  NLog v1.0 for .NET Framework 1.1\n* NLog v1.0 for .NET Framework 2.0",
            "title": "Form Options"
        },
        {
            "location": "/RichTextBox-target/#highlighting-options",
            "text": "wordColoringRules  - The word highlighting rules. Collection \nEach collection item is represented by \\  element with the following attributes:    backgroundColor  - Background color. Names are identical with KnownColor enum extended with Empty value which means that background color won't be changed. Default: Empty  fontColor  - Font color. Names are identical with KnownColor enum extended with Empty value which means that font color won't be changed. Default: Empty  ignoreCase  - Indicates whether to ignore case when comparing texts. Boolean Default: False  regex  - Regular expression to be matched. You must specify either text or regex.   style  - Font style of matched text. Possible values are the same as in FontStyle enum in System.Drawing.\n    Possible values:   Bold -  Italic -  Regular -  Strikeout -  Underline -     text  - Text to be matched. You must specify either text or regex.    wholeWords  - Indicates whether to match whole words only. Boolean Default: False    useDefaultRowColoringRules  - Indicates whether to use default cooring rules.Boolean Default: False    rowColoringRules  - The row coloring rules. Collection \nEach collection item is represented by \\  element with the following attributes:     backgroundColor  - Background color. Names are identical with KnownColor enum extended with Empty value which means that background color won't be changed. Default: Empty  fontColor  - Font color. Names are identical with KnownColor enum extended with Empty value which means that font color won't be changed. Default: Empty  ignoreCase  - Indicates whether to ignore case when comparing texts. Boolean Default: False  regex  - Regular expression to be matched. You must specify either text or regex.  style  - Font style of matched text. Possible values are the same as in FontStyle enum in System.Drawing. \n    Possible values:  Bold -  Italic -  Regular -  Strikeout -  Underline -\nPossible values are the same as in FontStyle enum in System.Drawing",
            "title": "Highlighting Options"
        },
        {
            "location": "/RoundRobinGroup-target/",
            "text": "Distributes log events to targets in a round-robin fashion. \n\n\nSupported in .NET, Silverlight, Compact Framework and Mono.\n\n\nConfiguration Syntax\n\n\n<targets>\n  <target xsi:type=\"RoundRobinGroup\" name=\"String\">\n    <target xsi:type=\"wrappedTargetType\" ... />\n    <target xsi:type=\"wrappedTargetType\" ... />\n    ...\n    <target xsi:type=\"wrappedTargetType\" ... />\n  </target>\n</targets>\n\n\n\n\nParameters\n\n\nGeneral Options\n\n\n\n\nname\n - Name of the target.",
            "title": "RoundRobinGroup target"
        },
        {
            "location": "/RoundRobinGroup-target/#configuration-syntax",
            "text": "<targets>\n  <target xsi:type=\"RoundRobinGroup\" name=\"String\">\n    <target xsi:type=\"wrappedTargetType\" ... />\n    <target xsi:type=\"wrappedTargetType\" ... />\n    ...\n    <target xsi:type=\"wrappedTargetType\" ... />\n  </target>\n</targets>",
            "title": "Configuration Syntax"
        },
        {
            "location": "/RoundRobinGroup-target/#parameters",
            "text": "",
            "title": "Parameters"
        },
        {
            "location": "/RoundRobinGroup-target/#general-options",
            "text": "name  - Name of the target.",
            "title": "General Options"
        },
        {
            "location": "/SplitGroup-target/",
            "text": "Writes log events to all targets. \n\n\nSupported in .NET, Silverlight, Compact Framework and Mono.\n\n\nConfiguration Syntax\n\n\n<targets>\n  <target xsi:type=\"SplitGroup\" name=\"String\">\n    <target xsi:type=\"wrappedTargetType\" ... />\n    <target xsi:type=\"wrappedTargetType\" ... />\n    ...\n    <target xsi:type=\"wrappedTargetType\" ... />\n  </target>\n</targets>\n\n\n\n\nParameters\n\n\nGeneral Options\n\n\n\n\nname\n - Name of the target.",
            "title": "SplitGroup target"
        },
        {
            "location": "/SplitGroup-target/#configuration-syntax",
            "text": "<targets>\n  <target xsi:type=\"SplitGroup\" name=\"String\">\n    <target xsi:type=\"wrappedTargetType\" ... />\n    <target xsi:type=\"wrappedTargetType\" ... />\n    ...\n    <target xsi:type=\"wrappedTargetType\" ... />\n  </target>\n</targets>",
            "title": "Configuration Syntax"
        },
        {
            "location": "/SplitGroup-target/#parameters",
            "text": "",
            "title": "Parameters"
        },
        {
            "location": "/SplitGroup-target/#general-options",
            "text": "name  - Name of the target.",
            "title": "General Options"
        },
        {
            "location": "/Trace-target/",
            "text": "Sends log messages through System.Diagnostics.Trace. \n\n\nSupported in .NET and Mono.\n\n\nConfiguration Syntax\n\n\n<targets>\n  <target xsi:type=\"Trace\" name=\"String\" layout=\"Layout\" />\n</targets>\n\n\n\n\nParameters\n\n\nGeneral Options\n\n\n\n\nname\n - Name of the target.\n\n\n\n\nLayout Options\n\n\n\n\nlayout\n - Layout used to format log messages. Layout Required. Default: \n${longdate}|${level:uppercase=true}|${logger}|${message}",
            "title": "Trace target"
        },
        {
            "location": "/Trace-target/#configuration-syntax",
            "text": "<targets>\n  <target xsi:type=\"Trace\" name=\"String\" layout=\"Layout\" />\n</targets>",
            "title": "Configuration Syntax"
        },
        {
            "location": "/Trace-target/#parameters",
            "text": "",
            "title": "Parameters"
        },
        {
            "location": "/Trace-target/#general-options",
            "text": "name  - Name of the target.",
            "title": "General Options"
        },
        {
            "location": "/Trace-target/#layout-options",
            "text": "layout  - Layout used to format log messages. Layout Required. Default:  ${longdate}|${level:uppercase=true}|${logger}|${message}",
            "title": "Layout Options"
        },
        {
            "location": "/WebService-target/",
            "text": "Calls the specified web service on each log message. \n\n\nSupported in .NET, Silverlight, Compact Framework and Mono.\n\n\nConfiguration Syntax\n\n\n<targets>\n  <target xsi:type=\"WebService\"\n          name=\"String\"\n          url=\"System.Uri\"\n          encoding=\"Encoding\"\n          includeBOM=\"Nullable boolean\"\n          protocol=\"Enum\"\n          namespace=\"String\"\n          methodName=\"String\">\n    <parameter layout=\"Layout\" name=\"String\" type=\"System.Type\"/><!-- repeated -->\n  </target>\n</targets>\n\n\n\n\nParameters\n\n\nGeneral Options\n\n\n\n\nname\n - Name of the target.\n\n\n\n\nParameter Options\n\n\n\n\nparameters\n - The array of parameters to be passed. Collection\n\nEach collection item is represented by \n<parameter />\n element with the following attributes:  \n\n\nlayout\n - Layout that should be use to calculate the value for the parameter. Layout Required.\n\n\nname\n - Name of the parameter.\n\n\ntype\n - Type of the parameter. System.Type\n\n\n\n\nWeb Service Options\n\n\n\n\n\n\nurl\n - Web service URL. System.Uri\n\n\n\n\n\n\nencoding\n - Encoding. Encoding name like \"utf-8\", \"ascii\" or \"utf-16\". See \nEncoding class on MSDN\n\n\n\n\n\n\nincludeBOM\n - Skip or add Byte-order-mark (BOM) for UTF-8. Only used if encoding is set to UTF-8, because a BOM is optional in UTF-8.  default: \nfalse\n. For more info on BOM, check \nWikipedia\n.\nPossible options: \n\n\n\n\nnull\n: doesn\u2019t change BOM. \n\n\ntrue\n: always include UTF-8 BOM UTF-8 encodings. \n\n\n\n\nfalse\n: default, always skip BOM on UTF-8 encodings.\n\n\n\n\n\n\nescapeDataRfc3986\n - NLog will by default encode parameters as UTF8 and escape special characters according to Rfc2396. To escape data according to standard Rc3986, set this option to 'true' (Available from NLog 4.4)\n\n\n\n\n\n\nescapeDataNLogLegacy\n - NLog will by default encode parameters as UTF8 and escape special characters according to Rfc2396. To escape data according to the old non-standard NLog style, set this option to 'true' (Available from NLog 4.4)\n\n\n\n\n\n\nprotocol\n - Protocol to be used when calling web service. Default: Soap11\n\nPossible values:  \n\n\n\n\nJsonPost - JSON POST  - introduced in NLog 4.4 - ContentType \"application/json\"\n\n\nXmlPost - XML POST - introduced in NLog 4.4 -  ContentType \"application/xml\"\n\n\nHttpGet - Use HTTP GET Protocol.\n\n\nHttpPost - Use HTTP POST Protocol.  ContentType \"application/x-www-form-urlencoded\"\n\n\nSoap11 - Use SOAP 1.1 Protocol.\n\n\n\n\nSoap12 - Use SOAP 1.2 Protocol.\n\n\n\n\n\n\nnamespace\n - Web service namespace.\n\n\n\n\n\n\nmethodName\n - Web service method name.\n\n\n\n\n\n\nRemarks\n\n\nThe web service must implement a method that accepts a number of string parameters.\n\n\nExample\n\n\nExample config:\n\n\n<nlog>\n    <targets>\n        <target type='WebService'\n                name='ws'\n                url='http://localhost:1234/logme'\n                protocol='HttpPost'\n                encoding='UTF-8'   >\n            <parameter name='param1' type='System.String' layout='${message}'/> \n            <parameter name='param2' type='System.String' layout='${level}'/>\n        </target>\n    </targets>\n    <rules>\n      <logger name='*' writeTo='ws'></logger>\n    </rules>\n</nlog>\n\n\n\n\nExample API controller\n\n\n\npublic class LogMeController : ApiController\n{\n    /// <summary>\n    /// We need a complex type for modelbinding because \n    /// of content-type: \"application/x-www-form-urlencoded\" \n    /// in <see cref=\"WebServiceTarget\"/>\n    /// </summary>\n    public class ComplexType\n    {\n        public string Param1 { get; set; }\n        public string Param2 { get; set; }\n    }\n\n    /// <summary>\n    /// Post\n    /// </summary>\n    public void Post([FromBody] ComplexType complexType)\n    {\n        //do something\n    }\n}",
            "title": "WebService target"
        },
        {
            "location": "/WebService-target/#configuration-syntax",
            "text": "<targets>\n  <target xsi:type=\"WebService\"\n          name=\"String\"\n          url=\"System.Uri\"\n          encoding=\"Encoding\"\n          includeBOM=\"Nullable boolean\"\n          protocol=\"Enum\"\n          namespace=\"String\"\n          methodName=\"String\">\n    <parameter layout=\"Layout\" name=\"String\" type=\"System.Type\"/><!-- repeated -->\n  </target>\n</targets>",
            "title": "Configuration Syntax"
        },
        {
            "location": "/WebService-target/#parameters",
            "text": "",
            "title": "Parameters"
        },
        {
            "location": "/WebService-target/#general-options",
            "text": "name  - Name of the target.",
            "title": "General Options"
        },
        {
            "location": "/WebService-target/#parameter-options",
            "text": "parameters  - The array of parameters to be passed. Collection \nEach collection item is represented by  <parameter />  element with the following attributes:    layout  - Layout that should be use to calculate the value for the parameter. Layout Required.  name  - Name of the parameter.  type  - Type of the parameter. System.Type",
            "title": "Parameter Options"
        },
        {
            "location": "/WebService-target/#web-service-options",
            "text": "url  - Web service URL. System.Uri    encoding  - Encoding. Encoding name like \"utf-8\", \"ascii\" or \"utf-16\". See  Encoding class on MSDN    includeBOM  - Skip or add Byte-order-mark (BOM) for UTF-8. Only used if encoding is set to UTF-8, because a BOM is optional in UTF-8.  default:  false . For more info on BOM, check  Wikipedia .\nPossible options:    null : doesn\u2019t change BOM.   true : always include UTF-8 BOM UTF-8 encodings.    false : default, always skip BOM on UTF-8 encodings.    escapeDataRfc3986  - NLog will by default encode parameters as UTF8 and escape special characters according to Rfc2396. To escape data according to standard Rc3986, set this option to 'true' (Available from NLog 4.4)    escapeDataNLogLegacy  - NLog will by default encode parameters as UTF8 and escape special characters according to Rfc2396. To escape data according to the old non-standard NLog style, set this option to 'true' (Available from NLog 4.4)    protocol  - Protocol to be used when calling web service. Default: Soap11 \nPossible values:     JsonPost - JSON POST  - introduced in NLog 4.4 - ContentType \"application/json\"  XmlPost - XML POST - introduced in NLog 4.4 -  ContentType \"application/xml\"  HttpGet - Use HTTP GET Protocol.  HttpPost - Use HTTP POST Protocol.  ContentType \"application/x-www-form-urlencoded\"  Soap11 - Use SOAP 1.1 Protocol.   Soap12 - Use SOAP 1.2 Protocol.    namespace  - Web service namespace.    methodName  - Web service method name.",
            "title": "Web Service Options"
        },
        {
            "location": "/WebService-target/#remarks",
            "text": "The web service must implement a method that accepts a number of string parameters.",
            "title": "Remarks"
        },
        {
            "location": "/WebService-target/#example",
            "text": "",
            "title": "Example"
        },
        {
            "location": "/WebService-target/#example-config",
            "text": "<nlog>\n    <targets>\n        <target type='WebService'\n                name='ws'\n                url='http://localhost:1234/logme'\n                protocol='HttpPost'\n                encoding='UTF-8'   >\n            <parameter name='param1' type='System.String' layout='${message}'/> \n            <parameter name='param2' type='System.String' layout='${level}'/>\n        </target>\n    </targets>\n    <rules>\n      <logger name='*' writeTo='ws'></logger>\n    </rules>\n</nlog>",
            "title": "Example config:"
        },
        {
            "location": "/WebService-target/#example-api-controller",
            "text": "public class LogMeController : ApiController\n{\n    /// <summary>\n    /// We need a complex type for modelbinding because \n    /// of content-type: \"application/x-www-form-urlencoded\" \n    /// in <see cref=\"WebServiceTarget\"/>\n    /// </summary>\n    public class ComplexType\n    {\n        public string Param1 { get; set; }\n        public string Param2 { get; set; }\n    }\n\n    /// <summary>\n    /// Post\n    /// </summary>\n    public void Post([FromBody] ComplexType complexType)\n    {\n        //do something\n    }\n}",
            "title": "Example API controller"
        },
        {
            "location": "/Basedir-layout-renderer/",
            "text": "The current application domain's base directory. \n\n\nSupported in .NET, Compact Framework and Mono.\n\n\nConfiguration Syntax\n\n\n${basedir:dir=String:file=String:processDir=boolean}\n\n\n\n\nParameters\n\n\nAdvanced Options\n\n\n\n\ndir\n - Name of the directory to be Path.Combine()'d with with the base directory.\n\n\nfile\n - Name of the file to be Path.Combine()'d with with the base directory.\n\n\nprocessDir\n - Introduced in NLog 4.4.2. Render the base directory of the current process? Default \nfalse\n.",
            "title": "Basedir layout renderer"
        },
        {
            "location": "/Basedir-layout-renderer/#configuration-syntax",
            "text": "${basedir:dir=String:file=String:processDir=boolean}",
            "title": "Configuration Syntax"
        },
        {
            "location": "/Basedir-layout-renderer/#parameters",
            "text": "",
            "title": "Parameters"
        },
        {
            "location": "/Basedir-layout-renderer/#advanced-options",
            "text": "dir  - Name of the directory to be Path.Combine()'d with with the base directory.  file  - Name of the file to be Path.Combine()'d with with the base directory.  processDir  - Introduced in NLog 4.4.2. Render the base directory of the current process? Default  false .",
            "title": "Advanced Options"
        },
        {
            "location": "/Callsite-layout-renderer/",
            "text": "The call site (class name, method name and source information). \n\n\nSupported in .NET, Silverlight and Mono.\n\n\nConfiguration Syntax\n\n\n${callsite:className=Boolean:includeNamespace=Boolean:fileName=Boolean:includeSourcePath=Boolean\n          :methodName=Boolean:cleanNamesOfAnonymousDelegates=Boolean:skipFrames=Integer}\n\n\n\n\nParameters\n\n\nRendering Options\n\n\n\n\nclassName\n - Indicates whether to render the class name.Boolean Default: \nTrue\n\n\nincludeNamespace\n - Include namespace in class name? Introduced in NLog 4.4. Default: \nTrue\n\n\nfileName\n - Indicates whether to render the source file name and line number.Boolean Default: \nFalse\n\n\nincludeSourcePath\n - Indicates whether to include source file path.Boolean Default: \nTrue\n\n\nmethodName\n - Indicates whether to render the method name.Boolean Default: \nTrue\n\n\ncleanNamesOfAnonymousDelegates\n - Indicates whether the method name will be cleaned up if it is detected as an anonymous delegate. Boolean Default: \nFalse\n\n\nskipFrames\n - The number of frames to skip. Integer Default: \n0\n\n\n\n\nNotes\n\n\nplease note that the method name won't work well with async methods before NLog 4.3 - it will always show \nMoveNext\n.",
            "title": "Callsite layout renderer"
        },
        {
            "location": "/Callsite-layout-renderer/#configuration-syntax",
            "text": "${callsite:className=Boolean:includeNamespace=Boolean:fileName=Boolean:includeSourcePath=Boolean\n          :methodName=Boolean:cleanNamesOfAnonymousDelegates=Boolean:skipFrames=Integer}",
            "title": "Configuration Syntax"
        },
        {
            "location": "/Callsite-layout-renderer/#parameters",
            "text": "",
            "title": "Parameters"
        },
        {
            "location": "/Callsite-layout-renderer/#rendering-options",
            "text": "className  - Indicates whether to render the class name.Boolean Default:  True  includeNamespace  - Include namespace in class name? Introduced in NLog 4.4. Default:  True  fileName  - Indicates whether to render the source file name and line number.Boolean Default:  False  includeSourcePath  - Indicates whether to include source file path.Boolean Default:  True  methodName  - Indicates whether to render the method name.Boolean Default:  True  cleanNamesOfAnonymousDelegates  - Indicates whether the method name will be cleaned up if it is detected as an anonymous delegate. Boolean Default:  False  skipFrames  - The number of frames to skip. Integer Default:  0",
            "title": "Rendering Options"
        },
        {
            "location": "/Callsite-layout-renderer/#notes",
            "text": "please note that the method name won't work well with async methods before NLog 4.3 - it will always show  MoveNext .",
            "title": "Notes"
        },
        {
            "location": "/Callsite-line-number-layout-renderer/",
            "text": "The call site source line number. For full callsite use \nCallSiteLayoutRenderer\n\n\nIntroduced in NLog v4.1\n\n\nSupported in .NET and Mono.\n\n\nConfiguration Syntax\n\n\n${callsite-linenumber:skipFrames=Integer}\n\n\n\n\nParameters\n\n\nRendering Options\n\n\n\n\nskipFrames\n - The number of frames to skip. Integer Default: 0",
            "title": "Callsite line number layout renderer"
        },
        {
            "location": "/Callsite-line-number-layout-renderer/#configuration-syntax",
            "text": "${callsite-linenumber:skipFrames=Integer}",
            "title": "Configuration Syntax"
        },
        {
            "location": "/Callsite-line-number-layout-renderer/#parameters",
            "text": "",
            "title": "Parameters"
        },
        {
            "location": "/Callsite-line-number-layout-renderer/#rendering-options",
            "text": "skipFrames  - The number of frames to skip. Integer Default: 0",
            "title": "Rendering Options"
        },
        {
            "location": "/Counter-layout-renderer/",
            "text": "A counter value (increases on each layout rendering). \n\n\nSupported in .NET, Silverlight, Compact Framework and Mono.\n\n\nConfiguration Syntax\n\n\nStarting in NLog v4.0 the sequence options have been changed from String to layout\n\n\n${counter:increment=Integer:sequence=Layout:value=Integer}\n\n\n\n\nThe syntax for versions below NLog v4.0 is:\n\n\n${counter:increment=Integer:sequence=String:value=Integer}\n\n\n\n\nParameters\n\n\nCounter Options\n\n\n\n\nincrement\n - Value to be added to the counter after each layout rendering. Integer Default: 1\n\n\nsequence\n - Name of the sequence. Different named sequences can have individual values.\n\n\nvalue\n - Initial value of the counter. Integer Default: 1",
            "title": "Counter layout renderer"
        },
        {
            "location": "/Counter-layout-renderer/#configuration-syntax",
            "text": "Starting in NLog v4.0 the sequence options have been changed from String to layout  ${counter:increment=Integer:sequence=Layout:value=Integer}  The syntax for versions below NLog v4.0 is:  ${counter:increment=Integer:sequence=String:value=Integer}",
            "title": "Configuration Syntax"
        },
        {
            "location": "/Counter-layout-renderer/#parameters",
            "text": "",
            "title": "Parameters"
        },
        {
            "location": "/Counter-layout-renderer/#counter-options",
            "text": "increment  - Value to be added to the counter after each layout rendering. Integer Default: 1  sequence  - Name of the sequence. Different named sequences can have individual values.  value  - Initial value of the counter. Integer Default: 1",
            "title": "Counter Options"
        },
        {
            "location": "/Date-layout-renderer/",
            "text": "Current date and time. \n\n\nSupported in .NET, Silverlight, Compact Framework and Mono.\n\n\nConfiguration Syntax\n\n\n${date:universalTime=Boolean:format=String:culture=Culture}\n\n\n\n\nParameters\n\n\nRendering Options\n\n\n\n\nuniversalTime\n - Indicates whether to output UTC time instead of local time.Boolean Default: False\n\n\nformat\n - Date format. Can be any argument accepted by DateTime.ToString(format). Note that colons need to escaped with a backslash. Example: \n${date:format=yyyy-MM-dd HH\\:mm\\:ss.fff}\n\n\nculture\n - Culture used for rendering.Culture",
            "title": "Date layout renderer"
        },
        {
            "location": "/Date-layout-renderer/#configuration-syntax",
            "text": "${date:universalTime=Boolean:format=String:culture=Culture}",
            "title": "Configuration Syntax"
        },
        {
            "location": "/Date-layout-renderer/#parameters",
            "text": "",
            "title": "Parameters"
        },
        {
            "location": "/Date-layout-renderer/#rendering-options",
            "text": "universalTime  - Indicates whether to output UTC time instead of local time.Boolean Default: False  format  - Date format. Can be any argument accepted by DateTime.ToString(format). Note that colons need to escaped with a backslash. Example:  ${date:format=yyyy-MM-dd HH\\:mm\\:ss.fff}  culture  - Culture used for rendering.Culture",
            "title": "Rendering Options"
        },
        {
            "location": "/DocumentUri-layout-renderer/",
            "text": "URI of the HTML page which hosts the current Silverlight application. \n\n\nSupported in Silverlight\n\n\nConfiguration Syntax\n\n\n${document-uri}",
            "title": "DocumentUri layout renderer"
        },
        {
            "location": "/DocumentUri-layout-renderer/#configuration-syntax",
            "text": "${document-uri}",
            "title": "Configuration Syntax"
        },
        {
            "location": "/Environment-layout-renderer/",
            "text": "The environment variable like Path, TMP, PROCESSOR_ARCHITECTURE etc.\n\n\nSupported in .NET and Mono\n\n\nConfiguration Syntax\n\n\n${environment:variable=String}\n\n\n\n\nParameters\n\n\nRendering Options\n\n\n\n\nvariable\n - Name of the environment variable. Required. Examples: Path, TMP, USERPROFILE, PROCESSOR_ARCHITECTURE\n\n\n\n\nRemarks\n\n\n\n\n\n\nTo list all environment variables in your system: \nEnvironment.GetEnvironmentVariables()\n\n\n\n\n\n\nThese are the environment variables, not the properties listed at  \nEnvironment Class on MSDN\n\n\n\n\n\n\nExample\n\n\nlog file for 32 bits systems in folder 32 and otherwise in folder 64\n\n\n<target \n   xsi:type=\"File\"\n   name=\"file1\" \n   fileName=\"c:\\temp\\${when:when='${environment:PROCESSOR_ARCHITECTURE}'='X86':inner=32:else=64}\\file.log\" />",
            "title": "Environment layout renderer"
        },
        {
            "location": "/Environment-layout-renderer/#configuration-syntax",
            "text": "${environment:variable=String}",
            "title": "Configuration Syntax"
        },
        {
            "location": "/Environment-layout-renderer/#parameters",
            "text": "",
            "title": "Parameters"
        },
        {
            "location": "/Environment-layout-renderer/#rendering-options",
            "text": "variable  - Name of the environment variable. Required. Examples: Path, TMP, USERPROFILE, PROCESSOR_ARCHITECTURE",
            "title": "Rendering Options"
        },
        {
            "location": "/Environment-layout-renderer/#remarks",
            "text": "To list all environment variables in your system:  Environment.GetEnvironmentVariables()    These are the environment variables, not the properties listed at   Environment Class on MSDN",
            "title": "Remarks"
        },
        {
            "location": "/Environment-layout-renderer/#example",
            "text": "log file for 32 bits systems in folder 32 and otherwise in folder 64  <target \n   xsi:type=\"File\"\n   name=\"file1\" \n   fileName=\"c:\\temp\\${when:when='${environment:PROCESSOR_ARCHITECTURE}'='X86':inner=32:else=64}\\file.log\" />",
            "title": "Example"
        },
        {
            "location": "/Exception-layout-renderer/",
            "text": "Exception information provided through a call to one of the Logger.*Exception() methods. \n\n\nSupported in .NET, Silverlight, Compact Framework and Mono.\n\n\nConfiguration Syntax\n\n\n${exception:innerFormat=String:maxInnerExceptionLevel=Integer:innerExceptionSeparator=String\n           :separator=String:format=String:exceptionDataSeparator=string}\n\n\n\n\nParameters\n\n\nRendering Options\n\n\n\n\n\n\ninnerFormat\n - Format of the output of inner exceptions. Must be a comma-separated list of exception properties: \nMessage\n, \nType\n, \nShortType\n, \nToString\n, \nMethod\n & \nStackTrace\n. This parameter value is case-insensitive. \n\n\n\n\n\n\nmaxInnerExceptionLevel\n - Maximum number of inner exceptions to include in the output. By default inner exceptions are not enabled for compatibility with NLog 1.0.Integer. Default: 0\n\n\n\n\n\n\nseparator\n - Separator used to concatenate parts specified in the Format. Default: single space\n\n\n\n\ninnerExceptionSeparator\n - Separator between inner exceptions. Default: new line\n\n\n\n\nexceptionDataSeparator\n -  Separator used to concatenate the exception data parts. Default: \n;\n. Introduced in NLog 4.3.9\n\n\n\n\n\n\nformat\n - Format of the output. Must be a comma-separated list of exception properties: \nMessage\n, \nType\n, \nShortType\n, \nToString\n, \nMethod\n, \nStackTrace\n & \nData\n. This parameter value is case-insensitive. Default: \nmessage\n\n\n\n\n\n\nExamples\n\n\nLog only message\n\n\nOnly message of the first exception\n\n\n${exception}\n\n\n\n\nor\n\n\n${exception:format=message}\n\n\n\n\nLog full (but without Data)\n\n\nToString\n is also printing the innerExceptions\n\n\n${exception:format=toString}\n\n\n\n\nLog full\n\n\nAlso print exception data, e.g.\n\n\nvar ex = new Exception();\nex.Data(\"data1\", \"val2\");\nthrow ex;\n\n\n\n\n${exception:format=toString,Data}\n\n\n\n\nLog full with inner exceptions\n\n\nmax 10 depth\n\n\n${exception:format=toString,Data:maxInnerExceptionLevel=10}\n\n\n\n\nMore Info and Examples\n\n\nFor more information, see \nHow to properly log exceptions\n.",
            "title": "Exception layout renderer"
        },
        {
            "location": "/Exception-layout-renderer/#configuration-syntax",
            "text": "${exception:innerFormat=String:maxInnerExceptionLevel=Integer:innerExceptionSeparator=String\n           :separator=String:format=String:exceptionDataSeparator=string}",
            "title": "Configuration Syntax"
        },
        {
            "location": "/Exception-layout-renderer/#parameters",
            "text": "",
            "title": "Parameters"
        },
        {
            "location": "/Exception-layout-renderer/#rendering-options",
            "text": "innerFormat  - Format of the output of inner exceptions. Must be a comma-separated list of exception properties:  Message ,  Type ,  ShortType ,  ToString ,  Method  &  StackTrace . This parameter value is case-insensitive.     maxInnerExceptionLevel  - Maximum number of inner exceptions to include in the output. By default inner exceptions are not enabled for compatibility with NLog 1.0.Integer. Default: 0    separator  - Separator used to concatenate parts specified in the Format. Default: single space   innerExceptionSeparator  - Separator between inner exceptions. Default: new line   exceptionDataSeparator  -  Separator used to concatenate the exception data parts. Default:  ; . Introduced in NLog 4.3.9    format  - Format of the output. Must be a comma-separated list of exception properties:  Message ,  Type ,  ShortType ,  ToString ,  Method ,  StackTrace  &  Data . This parameter value is case-insensitive. Default:  message",
            "title": "Rendering Options"
        },
        {
            "location": "/Exception-layout-renderer/#examples",
            "text": "",
            "title": "Examples"
        },
        {
            "location": "/Exception-layout-renderer/#log-only-message",
            "text": "Only message of the first exception  ${exception}  or  ${exception:format=message}",
            "title": "Log only message"
        },
        {
            "location": "/Exception-layout-renderer/#log-full-but-without-data",
            "text": "ToString  is also printing the innerExceptions  ${exception:format=toString}",
            "title": "Log full (but without Data)"
        },
        {
            "location": "/Exception-layout-renderer/#log-full",
            "text": "Also print exception data, e.g.  var ex = new Exception();\nex.Data(\"data1\", \"val2\");\nthrow ex;  ${exception:format=toString,Data}",
            "title": "Log full"
        },
        {
            "location": "/Exception-layout-renderer/#log-full-with-inner-exceptions",
            "text": "max 10 depth  ${exception:format=toString,Data:maxInnerExceptionLevel=10}",
            "title": "Log full with inner exceptions"
        },
        {
            "location": "/Exception-layout-renderer/#more-info-and-examples",
            "text": "For more information, see  How to properly log exceptions .",
            "title": "More Info and Examples"
        },
        {
            "location": "/FileContents-layout-renderer/",
            "text": "Renders contents of the specified file. \n\n\nSupported in .NET, Silverlight, Compact Framework and Mono.\n\n\nConfiguration Syntax\n\n\n${file-contents:encoding=Encoding:fileName=Layout}\n\n\n\n\nParameters\n\n\nFile Options\n\n\n\n\nencoding\n - Encoding used in the file.Encoding\n\n\nfileName\n - Name of the file.Layout",
            "title": "FileContents layout renderer"
        },
        {
            "location": "/FileContents-layout-renderer/#configuration-syntax",
            "text": "${file-contents:encoding=Encoding:fileName=Layout}",
            "title": "Configuration Syntax"
        },
        {
            "location": "/FileContents-layout-renderer/#parameters",
            "text": "",
            "title": "Parameters"
        },
        {
            "location": "/FileContents-layout-renderer/#file-options",
            "text": "encoding  - Encoding used in the file.Encoding  fileName  - Name of the file.Layout",
            "title": "File Options"
        },
        {
            "location": "/Gc-layout-renderer/",
            "text": "The information about the garbage collector. \n\n\nSupported in .NET and Silverlight\n\n\nConfiguration Syntax\n\n\n${gc:property=Enum}\n\n\n\n\nParameters\n\n\nRendering Options\n\n\n\n\nproperty\n - Property to retrieve. Default: TotalMemory\n\n  Possible values:\n\n\nCollectionCount0 - The number of Gen0 collections.\n\n\nCollectionCount1 - The number of Gen1 collections.\n\n\nCollectionCount2 - The number of Gen2 collections.\n\n\nMaxGeneration - Maximum generation number supported by GC.\n\n\nTotalMemory - Total memory allocated.\n\n\nTotalMemoryForceCollection - Total memory allocated (perform full garbage collection first)",
            "title": "Gc layout renderer"
        },
        {
            "location": "/Gc-layout-renderer/#configuration-syntax",
            "text": "${gc:property=Enum}",
            "title": "Configuration Syntax"
        },
        {
            "location": "/Gc-layout-renderer/#parameters",
            "text": "",
            "title": "Parameters"
        },
        {
            "location": "/Gc-layout-renderer/#rendering-options",
            "text": "property  - Property to retrieve. Default: TotalMemory \n  Possible values:  CollectionCount0 - The number of Gen0 collections.  CollectionCount1 - The number of Gen1 collections.  CollectionCount2 - The number of Gen2 collections.  MaxGeneration - Maximum generation number supported by GC.  TotalMemory - Total memory allocated.  TotalMemoryForceCollection - Total memory allocated (perform full garbage collection first)",
            "title": "Rendering Options"
        },
        {
            "location": "/Gdc-layout-renderer/",
            "text": "Global Diagnostics Context - a dictionary structure to hold per-application-instance values.\n\n\nUse the Global Diagnostics Context when you want to make certain information available to every logger in the current process.\n\n\nThe global context is one of the context. \n\n\n\n\nWhen you need the context for all threads, use the \nGDC\n. \n\n\nWhen you need the context for one threads, use the \nMDC\n. \n\n\nWhen you work with async, use the \nMDLC\n\n\nIf the context is different for every message, use the \nLog event properties\n\n\n\n\nAs of NLog 4.1, the Global Diagnostics Context supports any \nObject\n type, not just \nString\n.\n\n\nSupported in .NET, Silverlight, Compact Framework and Mono.\n\n\nConfiguration Syntax\n\n\n${gdc:item=String}\n\n\n\n\nParameters\n\n\nRendering Options\n\n\n\n\nitem\n - Name of the item. Required.\n\n\n\n\nExample\n\n\nSimple Properties\n\n\nThe following example demonstrates the basic usage of the Global Diagnostics Context.\n\n\nGlobalDiagnosticsContext.Set(\"myDataBase\",\"someValue\");\nGlobalDiagnosticsContext.Set(\"informationGroup\", new { One = 1, Two = 2 });\nGlobalDiagnosticsContext.Set(\"anyObject\", anyObjectReferenceOrString);\n\n\n\n\nAdd the following to your logger configuration to reference the above properties:\n\n\n${gdc:item=myDatabase}\n${gdc:item=informationGroup}\n${gdc:item=anyObject}\n\n\n\n\nDynamic Properties\n\n\nIn some instances you may have thread-local information that you want to make available to all logger instances in the current process. This can be achieved with the \nMapped Diagnostics Context\n, but requires that your create the property within the context of every thread that may reference it. Using Dynamic Properties and the Global Diagnostics Context, you can achieve the same result while only creating the property once.\n\n\npublic class ManagedThreadIdProperty\n{\n   public static readonly ManagedThreadIdProperty Default = new ManagedThreadIdProperty();\n\n   private ManagedThreadIdProperty () \n   {\n   }\n\n   public override string ToString ()\n   {\n      return System.Threading.Thread.CurrentThread.ManagedThreadId.ToString();\n   }\n}\n\n\n\n\nDuring initialization, add the following code:\n\n\nGlobalDiagnosticsContext.Set(\"ManagedThreadId\", ManagedThreadIdProperty.Default);\n\n\n\n\nTo reference the ManagedThreadId Global Diagnostics Context property.\n\n\n${gdc:item=ManagedThreadId}\n\n\n\n\nNotes\n\n\nWhen rendering context items, the item is passed to \nString.Format\n along with the current configuration's \nDefaultCultureInfo\n value.",
            "title": "Gdc layout renderer"
        },
        {
            "location": "/Gdc-layout-renderer/#configuration-syntax",
            "text": "${gdc:item=String}",
            "title": "Configuration Syntax"
        },
        {
            "location": "/Gdc-layout-renderer/#parameters",
            "text": "",
            "title": "Parameters"
        },
        {
            "location": "/Gdc-layout-renderer/#rendering-options",
            "text": "item  - Name of the item. Required.",
            "title": "Rendering Options"
        },
        {
            "location": "/Gdc-layout-renderer/#example",
            "text": "",
            "title": "Example"
        },
        {
            "location": "/Gdc-layout-renderer/#simple-properties",
            "text": "The following example demonstrates the basic usage of the Global Diagnostics Context.  GlobalDiagnosticsContext.Set(\"myDataBase\",\"someValue\");\nGlobalDiagnosticsContext.Set(\"informationGroup\", new { One = 1, Two = 2 });\nGlobalDiagnosticsContext.Set(\"anyObject\", anyObjectReferenceOrString);  Add the following to your logger configuration to reference the above properties:  ${gdc:item=myDatabase}\n${gdc:item=informationGroup}\n${gdc:item=anyObject}",
            "title": "Simple Properties"
        },
        {
            "location": "/Gdc-layout-renderer/#dynamic-properties",
            "text": "In some instances you may have thread-local information that you want to make available to all logger instances in the current process. This can be achieved with the  Mapped Diagnostics Context , but requires that your create the property within the context of every thread that may reference it. Using Dynamic Properties and the Global Diagnostics Context, you can achieve the same result while only creating the property once.  public class ManagedThreadIdProperty\n{\n   public static readonly ManagedThreadIdProperty Default = new ManagedThreadIdProperty();\n\n   private ManagedThreadIdProperty () \n   {\n   }\n\n   public override string ToString ()\n   {\n      return System.Threading.Thread.CurrentThread.ManagedThreadId.ToString();\n   }\n}  During initialization, add the following code:  GlobalDiagnosticsContext.Set(\"ManagedThreadId\", ManagedThreadIdProperty.Default);  To reference the ManagedThreadId Global Diagnostics Context property.  ${gdc:item=ManagedThreadId}",
            "title": "Dynamic Properties"
        },
        {
            "location": "/Gdc-layout-renderer/#notes",
            "text": "When rendering context items, the item is passed to  String.Format  along with the current configuration's  DefaultCultureInfo  value.",
            "title": "Notes"
        },
        {
            "location": "/Guid-layout-renderer/",
            "text": "Globally-unique identifier (GUID). \n\n\nSupported in .NET, Silverlight, Compact Framework and Mono.\n\n\nConfiguration Syntax\n\n\n${guid:format=String}\n\n\n\n\nParameters\n\n\nRendering Options\n\n\n\n\nformat\n - GUID format as accepted by Guid.ToString() method. Default: N",
            "title": "Guid layout renderer"
        },
        {
            "location": "/Guid-layout-renderer/#configuration-syntax",
            "text": "${guid:format=String}",
            "title": "Configuration Syntax"
        },
        {
            "location": "/Guid-layout-renderer/#parameters",
            "text": "",
            "title": "Parameters"
        },
        {
            "location": "/Guid-layout-renderer/#rendering-options",
            "text": "format  - GUID format as accepted by Guid.ToString() method. Default: N",
            "title": "Rendering Options"
        },
        {
            "location": "/Identity-layout-renderer/",
            "text": "Thread identity information (name and authentication information). \n\n\nSupported in .NET and Mono.\n\n\nConfiguration Syntax\n\n\n${identity:authType=Boolean:separator=String:name=Boolean\n          :isAuthenticated=Boolean}\n\n\n\n\nParameters\n\n\nRendering Options\n\n\n\n\nauthType\n - Indicates whether to render Thread.CurrentPrincipal.Identity.AuthenticationType.Boolean Default: True\n\n\nseparator\n - Separator to be used when concatenating parts of identity information. Default: :\n\n\nname\n - Indicates whether to render Thread.CurrentPrincipal.Identity.Name.Boolean Default: True\n\n\nisAuthenticated\n - Indicates whether to render Thread.CurrentPrincipal.Identity.IsAuthenticated.Boolean Default: True",
            "title": "Identity layout renderer"
        },
        {
            "location": "/Identity-layout-renderer/#configuration-syntax",
            "text": "${identity:authType=Boolean:separator=String:name=Boolean\n          :isAuthenticated=Boolean}",
            "title": "Configuration Syntax"
        },
        {
            "location": "/Identity-layout-renderer/#parameters",
            "text": "",
            "title": "Parameters"
        },
        {
            "location": "/Identity-layout-renderer/#rendering-options",
            "text": "authType  - Indicates whether to render Thread.CurrentPrincipal.Identity.AuthenticationType.Boolean Default: True  separator  - Separator to be used when concatenating parts of identity information. Default: :  name  - Indicates whether to render Thread.CurrentPrincipal.Identity.Name.Boolean Default: True  isAuthenticated  - Indicates whether to render Thread.CurrentPrincipal.Identity.IsAuthenticated.Boolean Default: True",
            "title": "Rendering Options"
        },
        {
            "location": "/InstallContext-layout-renderer/",
            "text": "Installation parameter (passed to InstallNLogConfig). \n\n\nSupported in .NET, Silverlight, Compact Framework and Mono.\n\n\nConfiguration Syntax\n\n\n${install-context:parameter=String}\n\n\n\n\nParameters\n\n\nRendering Options\n\n\n\n\nparameter\n - Name of the parameter. Required",
            "title": "InstallContext layout renderer"
        },
        {
            "location": "/InstallContext-layout-renderer/#configuration-syntax",
            "text": "${install-context:parameter=String}",
            "title": "Configuration Syntax"
        },
        {
            "location": "/InstallContext-layout-renderer/#parameters",
            "text": "",
            "title": "Parameters"
        },
        {
            "location": "/InstallContext-layout-renderer/#rendering-options",
            "text": "parameter  - Name of the parameter. Required",
            "title": "Rendering Options"
        },
        {
            "location": "/Level-layout-renderer/",
            "text": "The \nlog level\n. \n\n\nSupported in .NET, Silverlight, Compact Framework and Mono.\n\n\nConfiguration Syntax\n\n\n${level:format=Enum}\n\n\n\n\nAlternatively, add padding to align the message.\n\n\n${pad:padding=5:inner=${level:uppercase=true}}\n\n\n\n\nParameters\n\n\n\n\nformat\n - Output format of the level. Introduced in 4.4.6 Default: Name\n\n  Possible values:\n\n\nName\n - Render the full level name.\n\n\nFirstCharacter\n - Render the first character of the level.\n\n\nOrdinal\n - Render the ordinal (aka number) for the level.\n\n\n\n\n\n\n\n\n\n\nLevel\n\n\nFirstCharacter\n\n\nOrdinal\n\n\n\n\n\n\n\n\n\n\nTrace\n\n\nT\n\n\n0\n\n\n\n\n\n\nDebug\n\n\nD\n\n\n1\n\n\n\n\n\n\nInfo\n\n\nI\n\n\n2\n\n\n\n\n\n\nWarn\n\n\nW\n\n\n3\n\n\n\n\n\n\nError\n\n\nE\n\n\n4\n\n\n\n\n\n\nFatal\n\n\nF\n\n\n5\n\n\n\n\n\n\nOff\n\n\nO\n\n\n6\n\n\n\n\n\n\n\n\nExamples\n\n\nBasic\n\n\nConfiguration:\n\n\n${level}\n\n\n\n\nCode:\n\n\nlogger.Debug(\"Test Message\")\n\n\n\n\nResult:\n\n\nDebug\n\n\n\n\nFormat\n\n\nConfiguration:\n\n\n${level:format=FirstCharacter}\n\n\n\n\nCode:\n\n\nlogger.Debug(\"Test Message\")\n\n\n\n\nResult:\n\n\nD",
            "title": "Level layout renderer"
        },
        {
            "location": "/Level-layout-renderer/#configuration-syntax",
            "text": "${level:format=Enum}  Alternatively, add padding to align the message.  ${pad:padding=5:inner=${level:uppercase=true}}",
            "title": "Configuration Syntax"
        },
        {
            "location": "/Level-layout-renderer/#parameters",
            "text": "format  - Output format of the level. Introduced in 4.4.6 Default: Name \n  Possible values:  Name  - Render the full level name.  FirstCharacter  - Render the first character of the level.  Ordinal  - Render the ordinal (aka number) for the level.      Level  FirstCharacter  Ordinal      Trace  T  0    Debug  D  1    Info  I  2    Warn  W  3    Error  E  4    Fatal  F  5    Off  O  6",
            "title": "Parameters"
        },
        {
            "location": "/Level-layout-renderer/#examples",
            "text": "",
            "title": "Examples"
        },
        {
            "location": "/Level-layout-renderer/#basic",
            "text": "Configuration:  ${level}  Code:  logger.Debug(\"Test Message\")  Result:  Debug",
            "title": "Basic"
        },
        {
            "location": "/Level-layout-renderer/#format",
            "text": "Configuration:  ${level:format=FirstCharacter}  Code:  logger.Debug(\"Test Message\")  Result:  D",
            "title": "Format"
        },
        {
            "location": "/WrapLine-layout-renderer/",
            "text": "Wraps the result of another layout output at specified line length.\n\n\nIntroduced in NLog 4.3.4\n\n\nSupported in .NET, Silverlight, Compact Framework and Mono.\n\n\nConfiguration Syntax\n\n\n${wrapline=Integer:inner=Layout}\n\n\n\n\nor by using ambient property to modify output of other layout renderer:\n\n\n${other:wrapline=Integer}\n\n\n\n\nParameters\n\n\nTransformation Options\n\n\n\n\ninner\n - Wrapped layout. Layout.  Default attribute.\n\n\nwrapline\n - Indicates wrapping position. Integer greater than 0. Default: 80\n\n\n\n\nExamples\n\n\n${wrapline:${message}}\n${wrapline:Inner=${message}:WrapLine=80}\n${message:wrapline=80}",
            "title": "WrapLine layout renderer"
        },
        {
            "location": "/WrapLine-layout-renderer/#configuration-syntax",
            "text": "${wrapline=Integer:inner=Layout}  or by using ambient property to modify output of other layout renderer:  ${other:wrapline=Integer}",
            "title": "Configuration Syntax"
        },
        {
            "location": "/WrapLine-layout-renderer/#parameters",
            "text": "",
            "title": "Parameters"
        },
        {
            "location": "/WrapLine-layout-renderer/#transformation-options",
            "text": "inner  - Wrapped layout. Layout.  Default attribute.  wrapline  - Indicates wrapping position. Integer greater than 0. Default: 80",
            "title": "Transformation Options"
        },
        {
            "location": "/WrapLine-layout-renderer/#examples",
            "text": "${wrapline:${message}}\n${wrapline:Inner=${message}:WrapLine=80}\n${message:wrapline=80}",
            "title": "Examples"
        },
        {
            "location": "/AspApplication-layout-renderer/",
            "text": "ASP Application variable. \n\n\nSupported in .NET and Mono\n\n\nConfiguration Syntax\n\n\n${asp-application:variable=String}\n\n\n\n\nParameters\n\n\nRendering Options\n\n\n\n\nvariable\n - ASP Application variable name. Required.",
            "title": "AspApplication layout renderer"
        },
        {
            "location": "/AspApplication-layout-renderer/#configuration-syntax",
            "text": "${asp-application:variable=String}",
            "title": "Configuration Syntax"
        },
        {
            "location": "/AspApplication-layout-renderer/#parameters",
            "text": "",
            "title": "Parameters"
        },
        {
            "location": "/AspApplication-layout-renderer/#rendering-options",
            "text": "variable  - ASP Application variable name. Required.",
            "title": "Rendering Options"
        },
        {
            "location": "/AspNetApplication-layout-renderer/",
            "text": "ASP.NET Application variable. \n\n\nSupported in .NET and Mono. \n\n\nNot supported in ASP.NET Core - \nServerVariables are non-existing in ASP.NET Core. \n\n\nConfiguration Syntax\n\n\n${aspnet-application:variable=String}\n\n\n\n\nParameters\n\n\nRendering Options\n\n\n\n\nvariable\n - Variable name. Required.\n\n\n\n\nRemarks\n\n\nUse this layout renderer to insert the value of the specified variable stored in the ASP.NET Application dictionary",
            "title": "AspNetApplication layout renderer"
        },
        {
            "location": "/AspNetApplication-layout-renderer/#configuration-syntax",
            "text": "${aspnet-application:variable=String}",
            "title": "Configuration Syntax"
        },
        {
            "location": "/AspNetApplication-layout-renderer/#parameters",
            "text": "",
            "title": "Parameters"
        },
        {
            "location": "/AspNetApplication-layout-renderer/#rendering-options",
            "text": "variable  - Variable name. Required.",
            "title": "Rendering Options"
        },
        {
            "location": "/AspNetApplication-layout-renderer/#remarks",
            "text": "Use this layout renderer to insert the value of the specified variable stored in the ASP.NET Application dictionary",
            "title": "Remarks"
        },
        {
            "location": "/AspNetItem-layout-renderer/",
            "text": "ASP.NET Item variable.\nUse this layout renderer to insert the value of the specified variable stored \n in the ASP.NET \nHttpContext.Current.Items\n dictionary.\n\n\nSupported in .NET and Mono\n\n\nConfiguration Syntax\n\n\n${aspnet-item:variable=String;evaluateAsNestedProperties:boolean}\n\n\n\n\nParameters\n\n\nRendering Options\n\n\n\n\nvariable\n - Variable name.\n\n\nEvaluateAsNestedProperties\n - boolean. Default: \nfalse\n. Evaluate the  as nested properties. The dots in the \nvariable\n are special interpreted. See example below.\n\n\n\n\nExamples\n\n\nYou can set the value of an ASP.NET Item variable by using the following code:\n\n\nExample usage of \n${aspnet-item}\n\n\nHttpContext.Current.Items[\"myvariable\"] = 123;\nHttpContext.Current.Items[\"stringvariable\"] = \"aaa BBB\";\nHttpContext.Current.Items[\"anothervariable\"] = DateTime.Now;\n\n${aspnet-item:variable=myvariable} - produces \"123\"\n${aspnet-item:variable=anothervariable} - produces \"01/01/2006 00:00:00\"\n${aspnet-item:variable=anothervariable:culture=pl-PL} - produces \"2006-01-01 00:00:00\"\n${aspnet-item:variable=myvariable:padding=5} - produces \"  123\"\n${aspnet-item:variable=myvariable:padding=-5} - produces \"123  \"\n${aspnet-item:variable=stringvariable:upperCase=true} - produces \"AAA BBB\"",
            "title": "AspNetItem layout renderer"
        },
        {
            "location": "/AspNetItem-layout-renderer/#configuration-syntax",
            "text": "${aspnet-item:variable=String;evaluateAsNestedProperties:boolean}",
            "title": "Configuration Syntax"
        },
        {
            "location": "/AspNetItem-layout-renderer/#parameters",
            "text": "",
            "title": "Parameters"
        },
        {
            "location": "/AspNetItem-layout-renderer/#rendering-options",
            "text": "variable  - Variable name.  EvaluateAsNestedProperties  - boolean. Default:  false . Evaluate the  as nested properties. The dots in the  variable  are special interpreted. See example below.",
            "title": "Rendering Options"
        },
        {
            "location": "/AspNetItem-layout-renderer/#examples",
            "text": "You can set the value of an ASP.NET Item variable by using the following code:  Example usage of  ${aspnet-item}  HttpContext.Current.Items[\"myvariable\"] = 123;\nHttpContext.Current.Items[\"stringvariable\"] = \"aaa BBB\";\nHttpContext.Current.Items[\"anothervariable\"] = DateTime.Now;\n\n${aspnet-item:variable=myvariable} - produces \"123\"\n${aspnet-item:variable=anothervariable} - produces \"01/01/2006 00:00:00\"\n${aspnet-item:variable=anothervariable:culture=pl-PL} - produces \"2006-01-01 00:00:00\"\n${aspnet-item:variable=myvariable:padding=5} - produces \"  123\"\n${aspnet-item:variable=myvariable:padding=-5} - produces \"123  \"\n${aspnet-item:variable=stringvariable:upperCase=true} - produces \"AAA BBB\"",
            "title": "Examples"
        },
        {
            "location": "/AspNetRequest-layout-renderer/",
            "text": "ASP.NET Request variable. This layout renderer is non supported ASP.NET Core!\n\n\nSupported in .NET and Mono\n\n\nASP.NET Core\n\n\nThis layout renderer is broken down to separate layout renders who are more ASP.NET Core compatible / future proof:\n\n\n\n\n${aspnet-Request-Cookie}\n - ASP.NET Request cookie content. \n\n\n${aspnet-Request-Host}\n - ASP.NET Request host.\n\n\n${aspnet-Request-Method}\n - ASP.NET Request method (GET, POST etc).\n\n\n${aspnet-Request-QueryString}\n - ASP.NET Request querystring.\n\n\n${aspnet-Request-Referrer}\n - ASP.NET Request referrer.\n\n\n${aspnet-Request-UserAgent}\n - ASP.NET Request useragent.\n\n\n${aspnet-Request-Url}\n - ASP.NET Request URL.\n\n\n\n\nConfiguration Syntax\n\n\n${aspnet-request:cookie=String:serverVariable=String:queryString=String\n                :item=String:form=String:header=String}\n\n\n\n\nParameters\n\n\nRendering Options\n\n\n\n\ncookie\n - Cookie to be rendered.\n\n\nheader\n - Request header. Introduced in NLog.Web 4.2\n\n\nserverVariable\n - ServerVariables item to be rendered. See for possible options: \nmsdn\n. Not supported in ASP.NET Core. \n\n\nqueryString\n - QueryString variable to be rendered.\n\n\nitem\n - Item name. The QueryString, Form, Cookies, or ServerVariables collection variables having the specified name are rendered.\n\n\nform\n - Form variable to be rendered. Note: The Form property is populated when the HTTP request Content-Type value is either \"application/x-www-form-urlencoded\" or \"multipart/form-data\". (see \nmsdn\n)\n\n\n\n\nRemarks\n\n\nUse this layout renderer to insert the value of the specified parameter of the ASP.NET Request object. This renderer requires the NLog.Web package.\n\n\nExamples\n\n\nFull URL\n\n\nFull URL without domain, eg \ndefault.aspx?id=512\n\n\n${aspnet-request:serverVariable=HTTP_URL}${aspnet-request:queryString}\n \n\n\nReferer\n\n\nURL doing the request. Including schema (e.g \nhttps://\n) and querystring\n\n\n${aspnet-request:header=Referer}\n\n\nContent-Type\n\n\nContent-Type like \napplication/json; charset=UTF-8\n\n\n${aspnet-request:header=Content-Type}\n\n\nMethod\n\n\nMethod like PUT, POST, GET etc\n\n\n${aspnet-request:serverVariable=REQUEST_METHOD}\n\n\nUser agent\n\n\nuser agent, like \nMozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.87 Safari/537.36\n\n\n${aspnet-request:serverVariable=HTTP_USER_AGENT}",
            "title": "AspNetRequest layout renderer"
        },
        {
            "location": "/AspNetRequest-layout-renderer/#aspnet-core",
            "text": "This layout renderer is broken down to separate layout renders who are more ASP.NET Core compatible / future proof:   ${aspnet-Request-Cookie}  - ASP.NET Request cookie content.   ${aspnet-Request-Host}  - ASP.NET Request host.  ${aspnet-Request-Method}  - ASP.NET Request method (GET, POST etc).  ${aspnet-Request-QueryString}  - ASP.NET Request querystring.  ${aspnet-Request-Referrer}  - ASP.NET Request referrer.  ${aspnet-Request-UserAgent}  - ASP.NET Request useragent.  ${aspnet-Request-Url}  - ASP.NET Request URL.",
            "title": "ASP.NET Core"
        },
        {
            "location": "/AspNetRequest-layout-renderer/#configuration-syntax",
            "text": "${aspnet-request:cookie=String:serverVariable=String:queryString=String\n                :item=String:form=String:header=String}",
            "title": "Configuration Syntax"
        },
        {
            "location": "/AspNetRequest-layout-renderer/#parameters",
            "text": "",
            "title": "Parameters"
        },
        {
            "location": "/AspNetRequest-layout-renderer/#rendering-options",
            "text": "cookie  - Cookie to be rendered.  header  - Request header. Introduced in NLog.Web 4.2  serverVariable  - ServerVariables item to be rendered. See for possible options:  msdn . Not supported in ASP.NET Core.   queryString  - QueryString variable to be rendered.  item  - Item name. The QueryString, Form, Cookies, or ServerVariables collection variables having the specified name are rendered.  form  - Form variable to be rendered. Note: The Form property is populated when the HTTP request Content-Type value is either \"application/x-www-form-urlencoded\" or \"multipart/form-data\". (see  msdn )",
            "title": "Rendering Options"
        },
        {
            "location": "/AspNetRequest-layout-renderer/#remarks",
            "text": "Use this layout renderer to insert the value of the specified parameter of the ASP.NET Request object. This renderer requires the NLog.Web package.",
            "title": "Remarks"
        },
        {
            "location": "/AspNetRequest-layout-renderer/#examples",
            "text": "",
            "title": "Examples"
        },
        {
            "location": "/AspNetRequest-layout-renderer/#full-url",
            "text": "Full URL without domain, eg  default.aspx?id=512  ${aspnet-request:serverVariable=HTTP_URL}${aspnet-request:queryString}",
            "title": "Full URL"
        },
        {
            "location": "/AspNetRequest-layout-renderer/#referer",
            "text": "URL doing the request. Including schema (e.g  https:// ) and querystring  ${aspnet-request:header=Referer}",
            "title": "Referer"
        },
        {
            "location": "/AspNetRequest-layout-renderer/#content-type",
            "text": "Content-Type like  application/json; charset=UTF-8  ${aspnet-request:header=Content-Type}",
            "title": "Content-Type"
        },
        {
            "location": "/AspNetRequest-layout-renderer/#method",
            "text": "Method like PUT, POST, GET etc  ${aspnet-request:serverVariable=REQUEST_METHOD}",
            "title": "Method"
        },
        {
            "location": "/AspNetRequest-layout-renderer/#user-agent",
            "text": "user agent, like  Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.87 Safari/537.36  ${aspnet-request:serverVariable=HTTP_USER_AGENT}",
            "title": "User agent"
        },
        {
            "location": "/AspNetSession-layout-renderer/",
            "text": "ASP.NET Session variable. \n\n\nSupported in .NET and Mono\n\n\nConfiguration Syntax\n\n\n${aspnet-session:variable=String:evaluateAsNestedProperties:boolean}\n\n\n\n\nParameters\n\n\nRendering Options\n\n\n\n\nvariable\n - Session variable name.\n\n\nEvaluateAsNestedProperties\n - boolean. Default: \nfalse\n. Evaluate the \nvariable\n as nested properties. The dots in the \nvariable\n are special interpreted. See example below.\n\n\n\n\nRemarks\n\n\nUse this layout renderer to insert the value of the specified variable stored in the ASP.NET Session dictionary.\n\n\nExamples\n\n\nLog the username in the session.\n\n\nIn the C# code:\n\n\nSession[\"username\"] = \"johnDoe\";\n\n\n\n\nConfig:\n\n\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<nlog xmlns=\"http://www.nlog-project.org/schemas/NLog.xsd\"\n      xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n\n    <targets>\n        <target name=\"logfile\" xsi:type=\"File\" fileName=\"file.txt\" />\n    </targets>\n\n    <rules>\n        <logger name=\"*\" minlevel=\"Info\" writeTo=\"logfile\" layout=\"${aspnet-session:Variable=Username}/>\n    </rules>\n</nlog>\n\n\n\n\nWill print \"JohnDoe\"\n\n\nEvaluateAsNestedProperties\n\n\nIn the C# code:\n\n\nSession[\"user\"] = new UserInfo { Name= \"johnDoe\", Id = 100};\n\n\n\n\nConfig:\n\n\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<nlog xmlns=\"http://www.nlog-project.org/schemas/NLog.xsd\"\n      xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n\n    <targets>\n        <target name=\"logfile\" xsi:type=\"File\" fileName=\"file.txt\" />\n    </targets>\n\n    <rules>\n        <logger name=\"*\" minlevel=\"Info\" writeTo=\"logfile\" layout=\"${aspnet-session:Variable=User.Name:EvaluateAsNestedProperties=true}/>\n    </rules>\n</nlog>\n\n\n\n\nWill print \"JohnDoe\"",
            "title": "AspNetSession layout renderer"
        },
        {
            "location": "/AspNetSession-layout-renderer/#configuration-syntax",
            "text": "${aspnet-session:variable=String:evaluateAsNestedProperties:boolean}",
            "title": "Configuration Syntax"
        },
        {
            "location": "/AspNetSession-layout-renderer/#parameters",
            "text": "",
            "title": "Parameters"
        },
        {
            "location": "/AspNetSession-layout-renderer/#rendering-options",
            "text": "variable  - Session variable name.  EvaluateAsNestedProperties  - boolean. Default:  false . Evaluate the  variable  as nested properties. The dots in the  variable  are special interpreted. See example below.",
            "title": "Rendering Options"
        },
        {
            "location": "/AspNetSession-layout-renderer/#remarks",
            "text": "Use this layout renderer to insert the value of the specified variable stored in the ASP.NET Session dictionary.",
            "title": "Remarks"
        },
        {
            "location": "/AspNetSession-layout-renderer/#examples",
            "text": "Log the username in the session.  In the C# code:  Session[\"username\"] = \"johnDoe\";  Config:  <?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<nlog xmlns=\"http://www.nlog-project.org/schemas/NLog.xsd\"\n      xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n\n    <targets>\n        <target name=\"logfile\" xsi:type=\"File\" fileName=\"file.txt\" />\n    </targets>\n\n    <rules>\n        <logger name=\"*\" minlevel=\"Info\" writeTo=\"logfile\" layout=\"${aspnet-session:Variable=Username}/>\n    </rules>\n</nlog>  Will print \"JohnDoe\"",
            "title": "Examples"
        },
        {
            "location": "/AspNetSession-layout-renderer/#evaluateasnestedproperties",
            "text": "In the C# code:  Session[\"user\"] = new UserInfo { Name= \"johnDoe\", Id = 100};  Config:  <?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<nlog xmlns=\"http://www.nlog-project.org/schemas/NLog.xsd\"\n      xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n\n    <targets>\n        <target name=\"logfile\" xsi:type=\"File\" fileName=\"file.txt\" />\n    </targets>\n\n    <rules>\n        <logger name=\"*\" minlevel=\"Info\" writeTo=\"logfile\" layout=\"${aspnet-session:Variable=User.Name:EvaluateAsNestedProperties=true}/>\n    </rules>\n</nlog>  Will print \"JohnDoe\"",
            "title": "EvaluateAsNestedProperties"
        },
        {
            "location": "/AspNetSessionId-layout-renderer/",
            "text": "ASP.NET Session ID. \n\n\nSupported in .NET and Mono\n\n\nConfiguration Syntax\n\n\n${aspnet-sessionid}",
            "title": "AspNetSessionId layout renderer"
        },
        {
            "location": "/AspNetSessionId-layout-renderer/#configuration-syntax",
            "text": "${aspnet-sessionid}",
            "title": "Configuration Syntax"
        },
        {
            "location": "/AspNetUserAuthType-layout-renderer/",
            "text": "ASP.NET User variable. \n\n\nSupported in .NET and Mono\n\n\nConfiguration Syntax\n\n\n${aspnet-user-authtype}",
            "title": "AspNetUserAuthType layout renderer"
        },
        {
            "location": "/AspNetUserAuthType-layout-renderer/#configuration-syntax",
            "text": "${aspnet-user-authtype}",
            "title": "Configuration Syntax"
        },
        {
            "location": "/AspNetUserIdentity-layout-renderer/",
            "text": "ASP.NET User variable. \n\n\nSupported in .NET and Mono\n\n\nConfiguration Syntax\n\n\n${aspnet-user-identity}",
            "title": "AspNetUserIdentity layout renderer"
        },
        {
            "location": "/AspNetUserIdentity-layout-renderer/#configuration-syntax",
            "text": "${aspnet-user-identity}",
            "title": "Configuration Syntax"
        },
        {
            "location": "/AspRequest-layout-renderer/",
            "text": "ASP Request variable. \n\n\nSupported in .NET and Mono\n\n\nConfiguration Syntax\n\n\n${asp-request:cookie=String:serverVariable=String:queryString=String\n             :item=String:form=String}\n\n\n\n\nParameters\n\n\nRendering Options\n\n\n\n\ncookie\n - Cookie to be rendered.\n\n\nserverVariable\n - ServerVariables item to be rendered. See \nmsdn\n\n\nqueryString\n - QueryString variable to be rendered.\n\n\nitem\n - Item name. The QueryString, Form, Cookies, or ServerVariables collection variables having the specified name are rendered.\n\n\nform\n - Form variable to be rendered.",
            "title": "AspRequest layout renderer"
        },
        {
            "location": "/AspRequest-layout-renderer/#configuration-syntax",
            "text": "${asp-request:cookie=String:serverVariable=String:queryString=String\n             :item=String:form=String}",
            "title": "Configuration Syntax"
        },
        {
            "location": "/AspRequest-layout-renderer/#parameters",
            "text": "",
            "title": "Parameters"
        },
        {
            "location": "/AspRequest-layout-renderer/#rendering-options",
            "text": "cookie  - Cookie to be rendered.  serverVariable  - ServerVariables item to be rendered. See  msdn  queryString  - QueryString variable to be rendered.  item  - Item name. The QueryString, Form, Cookies, or ServerVariables collection variables having the specified name are rendered.  form  - Form variable to be rendered.",
            "title": "Rendering Options"
        },
        {
            "location": "/AspSession-layout-renderer/",
            "text": "ASP Session variable. \n\n\nSupported in .NET and Mono\n\n\nConfiguration Syntax\n\n\n${asp-session:variable=String}\n\n\n\n\nParameters\n\n\nRendering Options\n\n\n\n\nvariable\n - Session variable name. Required.",
            "title": "AspSession layout renderer"
        },
        {
            "location": "/AspSession-layout-renderer/#configuration-syntax",
            "text": "${asp-session:variable=String}",
            "title": "Configuration Syntax"
        },
        {
            "location": "/AspSession-layout-renderer/#parameters",
            "text": "",
            "title": "Parameters"
        },
        {
            "location": "/AspSession-layout-renderer/#rendering-options",
            "text": "variable  - Session variable name. Required.",
            "title": "Rendering Options"
        },
        {
            "location": "/How-to-write-a-custom-target/",
            "text": "It\u2019s really easy. Create a class that inherits from \nNLog.Targets.TargetWithLayout\n and override the \nWrite()\n method. In the body of the method invoke \nthis.Layout.Render()\n to get the message text, then send the text to the destination media.\n\n\nDon't forget to [[register your custom target|register-your-custom-component]]!\n\n\nExample\n\n\nThis is a skeleton target that writes messages to the specified host. Compile using:\n\n\ncsc.exe /t:library /out:MyAssembly.dll /r:NLog.dll MyFirstTarget.cs\n\n\nusing NLog;\nusing NLog.Config;\nusing NLog.Targets;\n\nnamespace MyNamespace \n{ \n    [Target(\"MyFirst\")] \n    public sealed class MyFirstTarget: TargetWithLayout \n    { \n        public MyFirstTarget()\n        {\n            this.Host = \"localhost\";\n        }\n\n        [RequiredParameter] \n        public string Host { get; set; }\n\n        protected override void Write(LogEventInfo logEvent) \n        { \n            string logMessage = this.Layout.Render(logEvent); \n\n            SendTheMessageToRemoteHost(this.Host, logMessage); \n        } \n\n        private void SendTheMessageToRemoteHost(string host, string message) \n        { \n            // TODO - write me \n        } \n    } \n}\n\n\n\n\nHow to pass configuration options to the target?\n\n\nConsider the above example. There\u2019s a property called \u201cHost\u201d that does just that. Having a public property that sets the required configuration parameters is enough for NLog to use it. Each attribute that you put in the \n<target />\n definition gets passed to the appropriate public property. NLog takes care of the appropriate conversions necessary so that you can use integer, string, datetime, boolean parameters. Check also [[Properties-constraints-for-custom-extensions]]",
            "title": "How to write a custom target"
        },
        {
            "location": "/How-to-write-a-custom-target/#example",
            "text": "This is a skeleton target that writes messages to the specified host. Compile using:  csc.exe /t:library /out:MyAssembly.dll /r:NLog.dll MyFirstTarget.cs  using NLog;\nusing NLog.Config;\nusing NLog.Targets;\n\nnamespace MyNamespace \n{ \n    [Target(\"MyFirst\")] \n    public sealed class MyFirstTarget: TargetWithLayout \n    { \n        public MyFirstTarget()\n        {\n            this.Host = \"localhost\";\n        }\n\n        [RequiredParameter] \n        public string Host { get; set; }\n\n        protected override void Write(LogEventInfo logEvent) \n        { \n            string logMessage = this.Layout.Render(logEvent); \n\n            SendTheMessageToRemoteHost(this.Host, logMessage); \n        } \n\n        private void SendTheMessageToRemoteHost(string host, string message) \n        { \n            // TODO - write me \n        } \n    } \n}",
            "title": "Example"
        },
        {
            "location": "/How-to-write-a-custom-target/#how-to-pass-configuration-options-to-the-target",
            "text": "Consider the above example. There\u2019s a property called \u201cHost\u201d that does just that. Having a public property that sets the required configuration parameters is enough for NLog to use it. Each attribute that you put in the  <target />  definition gets passed to the appropriate public property. NLog takes care of the appropriate conversions necessary so that you can use integer, string, datetime, boolean parameters. Check also [[Properties-constraints-for-custom-extensions]]",
            "title": "How to pass configuration options to the target?"
        },
        {
            "location": "/How-to-write-a-custom-layout-renderer/",
            "text": "Since NLog 4.4 there are two ways to create a custom layout renderer.\n\n\nYou could write a custom layout with one lambda function - it will be registered intermediately, or you could write a class which is easier to share across projects. \n\n\nLambda Function\n\n\nIntroduced in NLog 4.4\n\n\nFor some cases, it's easier to write a lambda function. \n\n\nThe lambda function will accept 1 or 2 parameters and should return a \nstring\n.\n\n\n\n\n1 parameter: the \nlogEventInfo\n.\n\n\n2 parameters: \nlogEventInfo\n and the current NLog config.\n\n\n\n\nExamples \n\n\n//register ${text-fixed}\nLayoutRenderer.Register(\"test-fixed\", (logEvent) => \"2\");\n\n//register ${trace-identifier}\nLayoutRenderer.Register(\"trace-identifier\", (logEvent) => HttpContext.Current.TraceIdentifier);\n\n//Using logEventInfo, ${message-length}\nLayoutRenderer.Register(\"message-length\", (logEvent) => logEvent.Message.Length);\n\n//Using config, ${targetCount}\nLayoutRenderer.Register(\"targetCount\",(logEvent, config) => config.AllTargets.Count);\n\n\n\n\nClass\n\n\nCreate a class that inherits from \nNLog.LayoutRenderers.LayoutRenderer\n, set the \n[LayoutRenderer(\"your-name\"]\n on the class and override the \nAppend(StringBuilder builder, LogEventInfo logEvent)\n method. \nInvoke in this method \nbuilder.Append(..)\n to render your custom layout renderer.\n\n\nDon't forget to [[register your custom component|Register-your-custom-component]]!\n\n\nExample\n\n\nWe create a \n${hello-world}\n layout renderer, which renders...\"hello world!\".\n\n\n[LayoutRenderer(\"hello-world\")]\npublic class HelloWorldLayoutRenderer : LayoutRenderer\n{\n    protected override void Append(StringBuilder builder, LogEventInfo logEvent)\n    {\n        builder.Append(\"hello world!\");\n    }\n}\n\n\n\n\n\n\nHow to pass configuration options to the layout render?\n\n\nJust create public properties on the Layout Renderer. The properties could be decorated with the \n[RequiredParameter]\n and \n[DefaultParameter]\n attributes. The \n[DefaultParameter]\n is can be passed to the layout renderer without using the name.\n\n\nfor example:\n\n\n[LayoutRenderer(\"hello-world\")]\npublic class HelloWorldLayoutRenderer : LayoutRenderer\n{\n        /// <summary>\n        /// I'm not required or default\n        /// </summary>\n        public string Config1 { get; set; }\n\n        /// <summary>\n        /// I'm required\n        /// </summary>\n        [RequiredParameter]\n        public string Config2 { get; set; }\n\n        /// <summary>\n        /// I'm the default parameter. You can set me as required also.\n        /// </summary>\n        [DefaultParameter]\n        public bool Caps {get;set;}\n\n\n\n\n\nExample usages\n\n\n\n\n${hello-world}\n - raises exception: required parameter Config2 isn't set\n\n\n${hello-world:Config2=abc}\n - OK, Config2 property set\n\n\n${hello-world:true:config2=abc}\n - default parameter (Caps) set to \ntrue\n\n\n${hello-world:true:config2=abc:config1=yes}\n - all the three properties se",
            "title": "How to write a custom layout renderer"
        },
        {
            "location": "/How-to-write-a-custom-layout-renderer/#lambda-function",
            "text": "Introduced in NLog 4.4  For some cases, it's easier to write a lambda function.   The lambda function will accept 1 or 2 parameters and should return a  string .   1 parameter: the  logEventInfo .  2 parameters:  logEventInfo  and the current NLog config.   Examples   //register ${text-fixed}\nLayoutRenderer.Register(\"test-fixed\", (logEvent) => \"2\");\n\n//register ${trace-identifier}\nLayoutRenderer.Register(\"trace-identifier\", (logEvent) => HttpContext.Current.TraceIdentifier);\n\n//Using logEventInfo, ${message-length}\nLayoutRenderer.Register(\"message-length\", (logEvent) => logEvent.Message.Length);\n\n//Using config, ${targetCount}\nLayoutRenderer.Register(\"targetCount\",(logEvent, config) => config.AllTargets.Count);",
            "title": "Lambda Function"
        },
        {
            "location": "/How-to-write-a-custom-layout-renderer/#class",
            "text": "Create a class that inherits from  NLog.LayoutRenderers.LayoutRenderer , set the  [LayoutRenderer(\"your-name\"]  on the class and override the  Append(StringBuilder builder, LogEventInfo logEvent)  method. \nInvoke in this method  builder.Append(..)  to render your custom layout renderer.  Don't forget to [[register your custom component|Register-your-custom-component]]!",
            "title": "Class"
        },
        {
            "location": "/How-to-write-a-custom-layout-renderer/#example",
            "text": "We create a  ${hello-world}  layout renderer, which renders...\"hello world!\".  [LayoutRenderer(\"hello-world\")]\npublic class HelloWorldLayoutRenderer : LayoutRenderer\n{\n    protected override void Append(StringBuilder builder, LogEventInfo logEvent)\n    {\n        builder.Append(\"hello world!\");\n    }\n}",
            "title": "Example"
        },
        {
            "location": "/How-to-write-a-custom-layout-renderer/#how-to-pass-configuration-options-to-the-layout-render",
            "text": "Just create public properties on the Layout Renderer. The properties could be decorated with the  [RequiredParameter]  and  [DefaultParameter]  attributes. The  [DefaultParameter]  is can be passed to the layout renderer without using the name.  for example:  [LayoutRenderer(\"hello-world\")]\npublic class HelloWorldLayoutRenderer : LayoutRenderer\n{\n        /// <summary>\n        /// I'm not required or default\n        /// </summary>\n        public string Config1 { get; set; }\n\n        /// <summary>\n        /// I'm required\n        /// </summary>\n        [RequiredParameter]\n        public string Config2 { get; set; }\n\n        /// <summary>\n        /// I'm the default parameter. You can set me as required also.\n        /// </summary>\n        [DefaultParameter]\n        public bool Caps {get;set;}  Example usages   ${hello-world}  - raises exception: required parameter Config2 isn't set  ${hello-world:Config2=abc}  - OK, Config2 property set  ${hello-world:true:config2=abc}  - default parameter (Caps) set to  true  ${hello-world:true:config2=abc:config1=yes}  - all the three properties se",
            "title": "How to pass configuration options to the layout render?"
        }
    ]
}